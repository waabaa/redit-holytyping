{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a **Bible Transcription Practice Application** that helps users improve their typing skills while engaging with Biblical texts. The system combines faith-based content with typing practice, featuring multilingual support (Korean, English, Chinese, Japanese), church-based communities, challenges, and competitive leaderboards. Users can practice typing Bible verses, track their progress, participate in challenges, and compete with others both individually and as church communities.\n\n# Recent Changes\n\n## 2025-09-19: 성경 본문 로딩 성능 대폭 최적화\n- **번들 API 구현**: 기존 4번 순차 API 호출을 `/api/bible/initial-data` 1번 호출로 통합, 응답시간 수초→5-20ms로 단축\n- **인기 구절 프리페칭**: 창세기 1장, 시편 23편, 요한복음 3장 등 6개 인기 장을 서버에서 미리 로딩하여 즉시 제공\n- **클라이언트 영구 캐싱**: localStorage 활용 24시간 TTL 캐싱으로 재방문 시 네트워크 호출 없이 즉시 로딩\n- **기본값 즉시 설정**: 한국어/개역개정 번역본을 서버에서 미리 선별하여 클라이언트 추가 호출 없이 즉시 적용\n- **성능 개선 결과**: 첫 로딩 4API호출→1API호출, 응답시간 수초→20ms이하, 재방문시 캐시로 즉시 로딩\n\n## 2025-09-18: Profile System Enhancements\n- **Profile Editing**: Complete profile editing modal with firstName, age, region, and church selection support\n- **Korean Character Support**: Full support for Korean input (한국어) in all profile fields with immediate UI feedback\n- **Profile Visibility**: Enhanced profile page displaying age/region information with clear completion status\n- **UX Improvements**: Loading states, success feedback, pre-filled forms, and clickable completion hints\n- **Code Quality**: Resolved all React key prop warnings and TypeScript compilation errors for system stability\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling\n- **Routing**: Wouter for client-side routing with conditional rendering based on authentication state\n- **UI Components**: Custom component library built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Styling**: Tailwind CSS with custom design system using CSS variables and shadcn/ui components\n- **Authentication Flow**: Conditional rendering between landing page for unauthenticated users and main app for authenticated users\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth using OpenID Connect (OIDC) with session management\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n- **API Design**: RESTful endpoints with organized route handlers and error middleware\n- **Development**: Vite middleware integration for hot reloading in development\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL hosted on Neon Database\n- **ORM**: Drizzle ORM with code-first schema definitions\n- **Schema Structure**: \n  - Users with typing statistics and church affiliations\n  - Bible books and verses with multilingual text support\n  - Typing sessions for performance tracking\n  - Churches for community features\n  - Challenges and participation tracking\n  - Session storage for authentication state\n- **Migrations**: Drizzle Kit for database schema migrations\n\n## Authentication and Authorization\n- **Provider**: Replit Auth with OpenID Connect protocol\n- **Session Management**: Server-side sessions stored in PostgreSQL with TTL\n- **Security**: HTTPS-only cookies, CSRF protection, and secure session configuration\n- **User Profile**: Automatic user creation/update from OIDC claims\n- **Authorization**: Middleware-based route protection for authenticated endpoints\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Connection**: WebSocket-based connections using @neondatabase/serverless\n\n### Authentication Services  \n- **Replit Auth**: OpenID Connect authentication provider\n- **Session Storage**: PostgreSQL-backed session persistence\n\n### UI and Styling\n- **Radix UI**: Headless UI component primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Icon library for consistent iconography\n- **React Icons**: Additional icon sets (Google, GitHub, Apple icons)\n\n### Development Tools\n- **Vite**: Build tool with React plugin and development server\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Fast bundling for production builds\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n\n### Data Management\n- **TanStack Query**: Server state management with caching and synchronization\n- **Drizzle ORM**: Type-safe database queries and schema management\n- **Zod**: Runtime schema validation for API inputs and database schemas\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **nanoid**: Unique ID generation for database records\n- **clsx/tailwind-merge**: Conditional CSS class composition\n- **wouter**: Lightweight client-side routing","size_bytes":5431},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport ConnectPgSimple from \"connect-pg-simple\";\nimport { db } from \"./db\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport \"./types\"; // Import session type augmentation\n\nconst app = express();\napp.set('trust proxy', 1); // Enable trust proxy for secure cookies behind proxies\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration - temporarily using memory store for testing\n// const PgSession = ConnectPgSimple(session);\napp.use(session({\n  // store: new PgSession({\n  //   conObject: {\n  //     connectionString: process.env.DATABASE_URL,\n  //   },\n  //   tableName: 'session',\n  //   createTableIfMissing: true,\n  // }),\n  secret: (() => {\n    if (process.env.NODE_ENV === 'production' && !process.env.SESSION_SECRET) {\n      throw new Error('SESSION_SECRET is required in production');\n    }\n    return process.env.SESSION_SECRET || 'fallback-secret-for-development';\n  })(),\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production', // HTTPS only in production\n    httpOnly: true, // Prevent XSS\n    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n    sameSite: 'lax', // CSRF protection\n  },\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3164},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n// import { setupAuth, isAuthenticated } from \"./replitAuth\"; // Removed Replit auth\nimport { setupKoreanOAuth, isKoreanOAuthAuthenticated } from \"./koreanOAuth\";\nimport { insertTypingSessionSchema, insertChurchSchema, insertChallengeParticipationSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { cache, TTL } from \"./cache\";\nimport { authRateLimiter, verifyRateLimiter } from \"./rateLimiter\";\nimport \"./types\"; // Import session type augmentation\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware - Removed Replit OAuth\n  // await setupAuth(app);\n  \n  // Korean OAuth setup\n  setupKoreanOAuth(app);\n\n  // Unified authentication middleware for session-based auth only\n  const isAuthenticatedUnified = (req: any, res: any, next: any) => {\n    // Check for session user (OAuth or email)\n    const sessionUser = req.session?.user;\n    if (sessionUser && sessionUser.id) {\n      // Set up req.user for downstream handlers\n      req.user = {\n        claims: { sub: sessionUser.id },\n        ...sessionUser,\n      };\n      return next();\n    }\n    \n    // No valid session found\n    return res.status(401).json({ message: \"Unauthorized\" });\n  };\n\n  // Admin authentication middleware\n  const isAdminAuthenticated = async (req: any, res: any, next: any) => {\n    // First check if user is authenticated\n    isAuthenticatedUnified(req, res, async () => {\n      try {\n        const userId = req.user.claims.sub;\n        const user = await storage.getUser(userId);\n        \n        if (!user || !user.isAdmin) {\n          return res.status(403).json({ message: \"Access denied. Admin privileges required.\" });\n        }\n        \n        next();\n      } catch (error) {\n        console.error(\"Error checking admin status:\", error);\n        res.status(500).json({ message: \"Failed to verify admin status\" });\n      }\n    });\n  };\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Email authentication routes\n  // Email signup schema\n  const emailSignupSchema = z.object({\n    email: z.string().email(\"올바른 이메일 주소를 입력해주세요\"),\n    password: z.string().min(8, \"비밀번호는 최소 8자리 이상이어야 합니다\"),\n    firstName: z.string().min(1, \"이름을 입력해주세요\").max(50, \"이름은 50자를 초과할 수 없습니다\"),\n  });\n\n  // Email login schema\n  const emailLoginSchema = z.object({\n    email: z.string().email(\"올바른 이메일 주소를 입력해주세요\"),\n    password: z.string().min(1, \"비밀번호를 입력해주세요\"),\n  });\n\n  app.post('/api/auth/email/signup', authRateLimiter.middleware(), async (req, res) => {\n    try {\n      const validatedData = emailSignupSchema.parse(req.body);\n      const { email, password, firstName } = validatedData;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ \n          message: \"이미 등록된 이메일 주소입니다. 다른 이메일을 사용해주세요.\" \n        });\n      }\n\n      // Hash password\n      const bcrypt = await import('bcrypt');\n      const saltRounds = 12;\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n      // Create user (not verified yet)\n      const user = await storage.createEmailUser(email, hashedPassword, firstName);\n\n      // Generate verification token\n      const { generateSecureToken, hashToken, getTokenExpirationTime, sendEmailVerification } = await import('./emailService');\n      const verificationToken = generateSecureToken();\n      const hashedToken = hashToken(verificationToken); // 보안을 위해 해시화\n      const expiresAt = getTokenExpirationTime();\n\n      // Save hashed token to database\n      await storage.createVerificationToken(email, hashedToken, expiresAt);\n\n      // Send verification email with enhanced error handling\n      const emailResult = await sendEmailVerification({\n        email,\n        firstName,\n        verificationToken,\n      });\n\n      if (!emailResult.success) {\n        console.error(`이메일 발송 실패: ${email}`, emailResult);\n        \n        // Handle different types of email service errors\n        if (emailResult.error === 'MISSING_API_KEY' || emailResult.error === 'CONFIGURATION_ERROR') {\n          return res.status(503).json({ \n            message: \"이메일 서비스가 일시적으로 사용할 수 없습니다. 관리자에게 문의해주세요.\",\n            supportMessage: \"Email service is currently unavailable. Please contact support.\"\n          });\n        }\n        \n        // For send failures or other errors, return 500 with retry suggestion\n        return res.status(500).json({ \n          message: \"계정이 생성되었지만 인증 이메일 발송에 실패했습니다. 잠시 후 이메일 재발송을 시도해주세요.\",\n          canRetry: true\n        });\n      }\n\n      console.log(`✅ 회원가입 성공: ${email} - 인증 이메일 발송됨`);\n\n      res.status(201).json({\n        message: \"회원가입이 완료되었습니다. 이메일을 확인하여 계정을 활성화해주세요.\",\n        email: user.email,\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          emailVerified: user.emailVerified,\n        },\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"입력 데이터가 올바르지 않습니다.\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Email signup error:\", error);\n      res.status(500).json({ message: \"회원가입 중 오류가 발생했습니다. 다시 시도해주세요.\" });\n    }\n  });\n\n  app.post('/api/auth/email/verify', verifyRateLimiter.middleware(), async (req, res) => {\n    try {\n      const { token } = req.body;\n\n      if (!token || typeof token !== 'string') {\n        return res.status(400).json({ message: \"인증 토큰이 필요합니다.\" });\n      }\n\n      // Hash the provided token to compare with stored hash\n      const { hashToken } = await import('./emailService');\n      const hashedToken = hashToken(token);\n      \n      // Get token from database using hashed version\n      const tokenRecord = await storage.getVerificationToken(hashedToken);\n      \n      if (!tokenRecord) {\n        // SECURITY: Don't reveal token existence - return generic error\n        console.log(`⚠️ 이메일 인증 실패 - 존재하지 않는 토큰: ${token.substring(0, 8)}...`);\n        return res.status(400).json({ message: \"인증 토큰이 유효하지 않거나 만료되었습니다.\" });\n      }\n\n      if (tokenRecord.isUsed) {\n        return res.status(400).json({ message: \"이미 사용된 인증 토큰입니다.\" });\n      }\n\n      // Check if token expired\n      const { isTokenExpired } = await import('./emailService');\n      if (isTokenExpired(tokenRecord.expiresAt)) {\n        return res.status(400).json({ message: \"인증 토큰이 만료되었습니다. 새로운 인증 메일을 요청해주세요.\" });\n      }\n\n      // SECURITY: Additional verification - ensure user exists and is not already verified\n      const user = await storage.getUserByEmail(tokenRecord.email);\n      if (!user) {\n        // SECURITY: Don't reveal user existence - return generic error and log internally\n        console.error(`⚠️ 이메일 인증 실패 - 토큰은 존재하지만 사용자 없음: ${tokenRecord.email}`);\n        return res.status(400).json({ message: \"인증 토큰이 유효하지 않거나 만료되었습니다.\" });\n      }\n      \n      if (user.emailVerified) {\n        return res.status(400).json({ message: \"이미 인증된 이메일입니다.\" });\n      }\n\n      // Activate user email\n      await storage.activateUserEmail(tokenRecord.email);\n\n      // Mark token as used (using hashed version)\n      await storage.markTokenAsUsed(hashedToken);\n\n      // Clean up expired tokens\n      await storage.cleanupExpiredTokens();\n\n      console.log(`✅ 이메일 인증 완료: ${tokenRecord.email}`);\n\n      res.json({ \n        message: \"이메일 인증이 완료되었습니다. 이제 로그인할 수 있습니다.\",\n        email: tokenRecord.email,\n      });\n    } catch (error) {\n      console.error(\"Email verification error:\", error);\n      res.status(500).json({ message: \"이메일 인증 중 오류가 발생했습니다. 다시 시도해주세요.\" });\n    }\n  });\n\n  // Email resend verification schema\n  const emailResendSchema = z.object({\n    email: z.string().email(\"올바른 이메일 주소를 입력해주세요\"),\n  });\n\n  app.post('/api/auth/email/resend', verifyRateLimiter.middleware(), async (req, res) => {\n    try {\n      const validatedData = emailResendSchema.parse(req.body);\n      const { email } = validatedData;\n\n      // SECURITY: Check if user exists and is not already verified\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // SECURITY FIX: Don't reveal user existence - always return 200 with generic success message\n        // Internal log for debugging purposes only\n        console.log(`⚠️ 이메일 재발송 시도 - 존재하지 않는 사용자: ${email}`);\n        return res.status(200).json({ \n          message: \"인증 이메일이 재발송되었습니다. 이메일을 확인해주세요.\",\n          email: email,\n          // Don't indicate whether email exists or not\n        });\n      }\n\n      if (user.emailVerified) {\n        return res.status(400).json({ \n          message: \"이미 인증된 이메일입니다. 로그인을 시도해주세요.\" \n        });\n      }\n\n      // Generate new verification token (this automatically invalidates previous tokens)\n      const { generateSecureToken, hashToken, getTokenExpirationTime, sendEmailVerification } = await import('./emailService');\n      const verificationToken = generateSecureToken();\n      const hashedToken = hashToken(verificationToken);\n      const expiresAt = getTokenExpirationTime();\n\n      // Save new hashed token to database (automatically rotates/deletes old tokens)\n      await storage.createVerificationToken(email, hashedToken, expiresAt);\n\n      // Send verification email with enhanced error handling\n      const emailResult = await sendEmailVerification({\n        email,\n        firstName: user.firstName || '사용자',\n        verificationToken,\n      });\n\n      if (!emailResult.success) {\n        console.error(`이메일 재발송 실패: ${email}`, emailResult);\n        \n        // Handle different types of email service errors\n        if (emailResult.error === 'MISSING_API_KEY' || emailResult.error === 'CONFIGURATION_ERROR') {\n          return res.status(503).json({ \n            message: \"이메일 서비스가 일시적으로 사용할 수 없습니다. 관리자에게 문의해주세요.\",\n            supportMessage: \"Email service is currently unavailable. Please contact support.\"\n          });\n        }\n        \n        // For send failures or other errors, return 500 with retry suggestion\n        return res.status(500).json({ \n          message: \"인증 이메일 재발송에 실패했습니다. 잠시 후 다시 시도해주세요.\",\n          canRetry: true\n        });\n      }\n\n      console.log(`✅ 이메일 인증 재발송 성공: ${email} - 기존 토큰 무효화됨`);\n\n      res.json({\n        message: \"인증 이메일이 재발송되었습니다. 이메일을 확인해주세요.\",\n        email: email,\n        tokenRotated: true, // Indicate that previous tokens are now invalid\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"올바른 이메일 주소를 입력해주세요.\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Email resend error:\", error);\n      res.status(500).json({ message: \"이메일 재발송 중 오류가 발생했습니다. 다시 시도해주세요.\" });\n    }\n  });\n\n  app.post('/api/auth/email/login', authRateLimiter.middleware(), async (req, res) => {\n    try {\n      const validatedData = emailLoginSchema.parse(req.body);\n      const { email, password } = validatedData;\n\n      // Verify user credentials\n      const user = await storage.verifyUserPassword(email, password);\n      \n      if (!user) {\n        return res.status(401).json({ \n          message: \"이메일 또는 비밀번호가 올바르지 않거나, 이메일 인증이 완료되지 않았습니다.\" \n        });\n      }\n\n      // SECURITY: Regenerate session to prevent session fixation attacks\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error(\"Session regeneration failed:\", err);\n          return res.status(500).json({ message: \"로그인 중 오류가 발생했습니다.\" });\n        }\n\n        // Set up session (similar to OAuth login)\n        req.session.user = {\n          id: user.id,\n          email: user.email || undefined,\n          firstName: user.firstName || undefined,\n          lastName: user.lastName || undefined,\n          profileImageUrl: user.profileImageUrl || undefined,\n          authProvider: 'email',\n        };\n\n        // Save session to ensure it's persisted\n        req.session.save((saveErr) => {\n          if (saveErr) {\n            console.error(\"Session save failed:\", saveErr);\n            return res.status(500).json({ message: \"로그인 중 오류가 발생했습니다.\" });\n          }\n\n          console.log(`✅ 이메일 로그인 성공: ${email}`);\n\n          res.json({\n            message: \"로그인이 완료되었습니다.\",\n            user: {\n              id: user.id,\n              email: user.email,\n              firstName: user.firstName,\n              lastName: user.lastName,\n              profileImageUrl: user.profileImageUrl,\n              emailVerified: user.emailVerified,\n              authProvider: user.authProvider,\n            },\n          });\n        });\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"입력 데이터가 올바르지 않습니다.\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Email login error:\", error);\n      res.status(500).json({ message: \"로그인 중 오류가 발생했습니다. 다시 시도해주세요.\" });\n    }\n  });\n\n  // Password reset request schema\n  const forgotPasswordSchema = z.object({\n    email: z.string().email(\"올바른 이메일 주소를 입력해주세요\"),\n  });\n\n  // Password reset request route\n  app.post('/api/auth/forgot-password', authRateLimiter.middleware(), async (req, res) => {\n    try {\n      const validatedData = forgotPasswordSchema.parse(req.body);\n      const { email } = validatedData;\n\n      // SECURITY: Always return 200 regardless of whether user exists\n      // This prevents email enumeration attacks\n      let userExists = false;\n      let firstName = '사용자';\n      \n      const user = await storage.getUserByEmail(email);\n      if (user && user.emailVerified) {\n        userExists = true;\n        firstName = user.firstName || '사용자';\n      }\n\n      // Always return success message to prevent email enumeration\n      if (!userExists) {\n        console.log(`⚠️ 비밀번호 리셋 요청 - 존재하지 않거나 미인증 사용자: ${email}`);\n        return res.status(200).json({ \n          message: \"비밀번호 재설정 이메일이 발송되었습니다. 이메일을 확인해주세요.\",\n          email: email,\n        });\n      }\n\n      // Generate reset token\n      const { generateSecureToken, getPasswordResetTokenExpirationTime, sendPasswordReset } = await import('./emailService');\n      const resetToken = generateSecureToken();\n      const expiresAt = getPasswordResetTokenExpirationTime();\n\n      // Save reset token to database\n      await storage.createPasswordResetToken(email, resetToken, expiresAt);\n\n      // Send password reset email\n      const emailResult = await sendPasswordReset({\n        email,\n        firstName,\n        resetToken,\n      });\n\n      // SECURITY: Always return success message even if email sending fails\n      // This prevents email enumeration attacks\n      if (!emailResult.success) {\n        console.error(`비밀번호 리셋 이메일 발송 실패: ${email}`, emailResult);\n        // Log error internally but don't expose to user\n      }\n\n      console.log(`✅ 비밀번호 리셋 이메일 발송 성공: ${email}`);\n\n      res.json({ \n        message: \"비밀번호 재설정 이메일이 발송되었습니다. 이메일을 확인해주세요.\",\n        email: email,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"입력 데이터가 올바르지 않습니다.\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Forgot password error:\", error);\n      res.status(500).json({ message: \"비밀번호 재설정 요청 중 오류가 발생했습니다. 다시 시도해주세요.\" });\n    }\n  });\n\n  // Password reset execution schema\n  const resetPasswordSchema = z.object({\n    token: z.string().min(1, \"재설정 토큰이 필요합니다\"),\n    password: z.string().min(8, \"비밀번호는 최소 8자리 이상이어야 합니다\"),\n  });\n\n  // Password reset execution route\n  app.post('/api/auth/reset-password', authRateLimiter.middleware(), async (req, res) => {\n    try {\n      const validatedData = resetPasswordSchema.parse(req.body);\n      const { token, password } = validatedData;\n\n      // Get and validate reset token\n      const tokenRecord = await storage.getPasswordResetToken(token);\n      \n      if (!tokenRecord) {\n        console.log(`⚠️ 비밀번호 리셋 실패 - 존재하지 않는 토큰: ${token.substring(0, 8)}...`);\n        return res.status(400).json({ message: \"재설정 토큰이 유효하지 않거나 만료되었습니다.\" });\n      }\n\n      if (tokenRecord.isUsed) {\n        return res.status(400).json({ message: \"이미 사용된 재설정 토큰입니다.\" });\n      }\n\n      // Check if token expired\n      const { isTokenExpired } = await import('./emailService');\n      if (isTokenExpired(tokenRecord.expiresAt)) {\n        return res.status(400).json({ message: \"재설정 토큰이 만료되었습니다. 새로운 비밀번호 재설정을 요청해주세요.\" });\n      }\n\n      // Verify user exists and is verified\n      const user = await storage.getUserByEmail(tokenRecord.email);\n      if (!user || !user.emailVerified) {\n        console.error(`⚠️ 비밀번호 리셋 실패 - 토큰은 존재하지만 사용자 없음 또는 미인증: ${tokenRecord.email}`);\n        return res.status(400).json({ message: \"재설정 토큰이 유효하지 않거나 만료되었습니다.\" });\n      }\n\n      // Hash new password\n      const bcrypt = await import('bcrypt');\n      const saltRounds = 12;\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n      // Update user password\n      await storage.updateUserPassword(tokenRecord.email, hashedPassword);\n\n      // Mark token as used\n      await storage.markPasswordResetTokenAsUsed(token);\n\n      // Clean up expired tokens\n      await storage.cleanupExpiredPasswordResetTokens();\n\n      console.log(`✅ 비밀번호 리셋 완료: ${tokenRecord.email}`);\n\n      res.json({ \n        message: \"비밀번호가 성공적으로 재설정되었습니다. 새로운 비밀번호로 로그인해주세요.\",\n        email: tokenRecord.email,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"입력 데이터가 올바르지 않습니다.\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Reset password error:\", error);\n      res.status(500).json({ message: \"비밀번호 재설정 중 오류가 발생했습니다. 다시 시도해주세요.\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/user/dashboard', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const dashboardData = await storage.getUserDashboard(userId);\n      res.json(dashboardData);\n    } catch (error) {\n      console.error(\"Error fetching user dashboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  app.get('/api/user/recent-sessions', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const recentSessions = await storage.getUserRecentSessions(userId, limit);\n      res.json(recentSessions);\n    } catch (error) {\n      console.error(\"Error fetching recent sessions:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent sessions\" });\n    }\n  });\n\n  app.get('/api/user/progress', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const progressData = await storage.getUserProgress(userId);\n      res.json(progressData);\n    } catch (error) {\n      console.error(\"Error fetching user progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch user progress\" });\n    }\n  });\n\n  app.get('/api/user/achievements', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const achievements = await storage.getUserAchievements(userId);\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Error fetching user achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch user achievements\" });\n    }\n  });\n\n  // User profile update route\n  app.patch('/api/users/profile', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { firstName, age, region, churchId } = req.body;\n      \n      // Validate input data\n      const profileData: { firstName?: string; age?: number; region?: string; churchId?: string | null; profileCompleted?: boolean } = {};\n      \n      if (firstName !== undefined) {\n        if (typeof firstName !== 'string' || firstName.trim().length === 0) {\n          return res.status(400).json({ message: \"FirstName is required and must be a non-empty string\" });\n        }\n        if (firstName.length > 100) {\n          return res.status(400).json({ message: \"FirstName must not exceed 100 characters\" });\n        }\n        profileData.firstName = firstName.trim();\n      }\n      \n      if (age !== undefined) {\n        if (typeof age !== 'number' || age < 10 || age > 100) {\n          return res.status(400).json({ message: \"Age must be a number between 10 and 100\" });\n        }\n        profileData.age = age;\n      }\n      \n      if (region !== undefined) {\n        if (typeof region !== 'string' || region.length > 100) {\n          return res.status(400).json({ message: \"Region must be a string with maximum 100 characters\" });\n        }\n        profileData.region = region;\n      }\n      \n      if (churchId !== undefined) {\n        if (churchId !== null && typeof churchId !== 'string') {\n          return res.status(400).json({ message: \"ChurchId must be a string or null\" });\n        }\n        \n        // Handle explicit church removal (null or empty string)\n        if (churchId === null || churchId === '') {\n          profileData.churchId = null;\n        } else if (churchId) {\n          // Verify church exists if a valid churchId is provided\n          const church = await storage.getChurch(churchId);\n          if (!church) {\n            return res.status(404).json({ message: \"Church not found\" });\n          }\n          profileData.churchId = churchId;\n        }\n      }\n\n      // Mark profile as completed when any profile field is being updated\n      // This indicates the user has interacted with the profile completion flow\n      if (Object.keys(profileData).length > 0) {\n        profileData.profileCompleted = true;\n      }\n      \n      const updatedUser = await storage.updateUserProfile(userId, profileData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Temporary admin route for OAuth preparation - backfill existing users\n  app.post('/api/admin/backfill-replit-auth', isAdminAuthenticated, async (req: any, res) => {\n    try {\n      console.log('🔄 Starting Replit auth info backfill...');\n      const result = await storage.backfillReplitAuthInfo();\n      console.log(`✅ Backfill completed: ${result.updatedCount} users updated`);\n      \n      if (result.errors.length > 0) {\n        console.warn('⚠️ Backfill had errors:', result.errors);\n      }\n      \n      res.json({\n        success: true,\n        message: `Successfully backfilled ${result.updatedCount} users`,\n        updatedCount: result.updatedCount,\n        errors: result.errors,\n      });\n    } catch (error) {\n      console.error('❌ Backfill failed:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Backfill failed',\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  });\n\n  // Admin dashboard routes - require admin authentication\n  app.get('/api/admin/stats', isAdminAuthenticated, async (req: any, res) => {\n    try {\n      // Cache admin stats for 5 minutes to improve performance\n      const stats = await cache.getOrSet(\n        'admin-stats',\n        () => storage.getAdminStats(),\n        5 * 60 * 1000 // 5 minutes TTL\n      );\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin statistics\" });\n    }\n  });\n\n  app.post('/api/admin/users/:userId/make-admin', isAdminAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const result = await storage.makeUserAdmin(userId);\n      \n      if (result.success) {\n        res.json(result);\n      } else {\n        res.status(400).json(result);\n      }\n    } catch (error) {\n      console.error(\"Error making user admin:\", error);\n      res.status(500).json({ message: \"Failed to make user admin\" });\n    }\n  });\n\n  app.post('/api/admin/users/:userId/remove-admin', isAdminAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const result = await storage.removeUserAdmin(userId);\n      \n      if (result.success) {\n        res.json(result);\n      } else {\n        res.status(400).json(result);\n      }\n    } catch (error) {\n      console.error(\"Error removing user admin:\", error);\n      res.status(500).json({ message: \"Failed to remove user admin\" });\n    }\n  });\n\n  // Bible routes\n  app.get('/api/bible/books', async (req, res) => {\n    try {\n      const books = await storage.getBibleBooks();\n      res.json(books);\n    } catch (error) {\n      console.error(\"Error fetching bible books:\", error);\n      res.status(500).json({ message: \"Failed to fetch bible books\" });\n    }\n  });\n\n  app.get('/api/bible/verse/:bookId/:chapter/:verse', async (req, res) => {\n    try {\n      const { bookId, chapter, verse } = req.params;\n      const translationId = req.query.translationId as string;\n      const verseData = await storage.getBibleVerse(bookId, parseInt(chapter), parseInt(verse), translationId);\n      if (!verseData) {\n        return res.status(404).json({ message: \"Verse not found\" });\n      }\n      res.json(verseData);\n    } catch (error) {\n      console.error(\"Error fetching verse:\", error);\n      res.status(500).json({ message: \"Failed to fetch verse\" });\n    }\n  });\n\n  app.get('/api/bible/random-verse', async (req, res) => {\n    try {\n      const translationId = req.query.translationId as string;\n      const verse = await storage.getRandomVerse(translationId);\n      if (!verse) {\n        return res.status(404).json({ message: \"No verses available\" });\n      }\n      res.json(verse);\n    } catch (error) {\n      console.error(\"Error fetching random verse:\", error);\n      res.status(500).json({ message: \"Failed to fetch random verse\" });\n    }\n  });\n\n  app.get('/api/bible/chapter/:bookId/:chapter', async (req, res) => {\n    try {\n      const { bookId, chapter } = req.params;\n      const translationId = req.query.translationId as string;\n      \n      // Validate parameters\n      if (!bookId || !chapter || isNaN(parseInt(chapter))) {\n        return res.status(400).json({ message: \"Invalid bookId or chapter parameter\" });\n      }\n      \n      // translationId is optional - getChapterVerses will use default if not provided\n      const verses = await storage.getChapterVerses(bookId, parseInt(chapter), translationId);\n      res.json(verses);\n    } catch (error) {\n      console.error(\"Error fetching chapter verses:\", error);\n      res.status(500).json({ message: \"Failed to fetch chapter verses\" });\n    }\n  });\n\n  app.get('/api/bible/book/:bookId/max-chapter', async (req, res) => {\n    try {\n      const { bookId } = req.params;\n      const translationId = req.query.translationId as string;\n      \n      // Validate parameters\n      if (!bookId) {\n        return res.status(400).json({ message: \"Invalid bookId parameter\" });\n      }\n      \n      const maxChapter = await storage.getMaxChapterForBook(bookId, translationId);\n      res.json({ maxChapter });\n    } catch (error) {\n      console.error(\"Error fetching max chapter:\", error);\n      res.status(500).json({ message: \"Failed to fetch max chapter\" });\n    }\n  });\n\n  // 번들 API: 첫 로딩에 필요한 모든 데이터를 한 번에 제공\n  // ⚡ 번들 API: 모든 필요한 초기 데이터를 한 번에 반환 (선택적 프리페칭)\n  app.get('/api/bible/initial-data', async (req, res) => {\n    try {\n      const prefetch = req.query.prefetch === 'true';\n      console.log(`📦 번들 API 요청: prefetch=${prefetch}`);\n      \n      const initialData = await storage.getBibleInitialData(prefetch);\n      res.json(initialData);\n    } catch (error) {\n      console.error(\"Error fetching initial bible data:\", error);\n      res.status(500).json({ message: \"Failed to fetch initial bible data\" });\n    }\n  });\n\n  // Language and translation routes\n  app.get('/api/bible/languages', async (req, res) => {\n    try {\n      const languages = await storage.getLanguages();\n      res.json(languages);\n    } catch (error) {\n      console.error(\"Error fetching languages:\", error);\n      res.status(500).json({ message: \"Failed to fetch languages\" });\n    }\n  });\n\n  app.get('/api/bible/translations', async (req, res) => {\n    try {\n      const languageCode = req.query.language as string;\n      if (!languageCode) {\n        return res.status(400).json({ message: \"Language code is required\" });\n      }\n      \n      const translations = await storage.getTranslationsByLanguage(languageCode);\n      res.json(translations);\n    } catch (error) {\n      console.error(\"Error fetching translations:\", error);\n      res.status(500).json({ message: \"Failed to fetch translations\" });\n    }\n  });\n\n  // Typing session routes\n  app.post('/api/typing/session', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const sessionData = insertTypingSessionSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const session = await storage.createTypingSession(sessionData);\n      res.json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid session data\", errors: error.errors });\n      }\n      console.error(\"Error creating typing session:\", error);\n      res.status(500).json({ message: \"Failed to create typing session\" });\n    }\n  });\n\n  app.get('/api/typing/sessions', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const sessions = await storage.getUserTypingSessions(userId, limit);\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching typing sessions:\", error);\n      res.status(500).json({ message: \"Failed to fetch typing sessions\" });\n    }\n  });\n\n  app.get('/api/user/stats', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stats = await storage.getUserStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching user stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  // Church routes\n  app.get('/api/churches', async (req, res) => {\n    try {\n      const search = req.query.search as string;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      \n      // Validate limit\n      if (limit < 1 || limit > 100) {\n        return res.status(400).json({ message: \"Limit must be between 1 and 100\" });\n      }\n      \n      const churches = await storage.getAllChurches(search, limit);\n      res.json(churches);\n    } catch (error) {\n      console.error(\"Error fetching churches:\", error);\n      res.status(500).json({ message: \"Failed to fetch churches\" });\n    }\n  });\n\n  app.post('/api/churches', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const churchData = insertChurchSchema.parse({\n        ...req.body,\n        adminId: userId,\n      });\n      \n      const church = await storage.createChurch(churchData);\n      \n      // Auto-join the creator to the church\n      const joinResult = await storage.joinChurch(userId, church.id);\n      if (!joinResult.success) {\n        console.error(\"Failed to auto-join church creator:\", joinResult.message);\n        return res.status(500).json({ message: \"Church created but failed to add creator as member\" });\n      }\n      \n      res.json(church);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid church data\", errors: error.errors });\n      }\n      console.error(\"Error creating church:\", error);\n      res.status(500).json({ message: \"Failed to create church\" });\n    }\n  });\n\n  app.get('/api/churches/:id', async (req, res) => {\n    try {\n      const church = await storage.getChurch(req.params.id);\n      if (!church) {\n        return res.status(404).json({ message: \"Church not found\" });\n      }\n      res.json(church);\n    } catch (error) {\n      console.error(\"Error fetching church:\", error);\n      res.status(500).json({ message: \"Failed to fetch church\" });\n    }\n  });\n\n  app.post('/api/churches/:id/join', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const churchId = req.params.id;\n      \n      const joinResult = await storage.joinChurch(userId, churchId);\n      \n      if (!joinResult.success) {\n        // Return appropriate status codes based on the error message\n        if (joinResult.message === \"Already a member of this church\") {\n          return res.status(409).json({ message: joinResult.message });\n        }\n        if (joinResult.message === \"Church not found\" || joinResult.message === \"User not found\") {\n          return res.status(404).json({ message: joinResult.message });\n        }\n        return res.status(400).json({ message: joinResult.message });\n      }\n      \n      res.json({ message: joinResult.message });\n    } catch (error) {\n      console.error(\"Error joining church:\", error);\n      res.status(500).json({ message: \"Failed to join church\" });\n    }\n  });\n\n  app.get('/api/user/church', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const church = await storage.getUserChurch(userId);\n      res.json(church || null);\n    } catch (error) {\n      console.error(\"Error fetching user church:\", error);\n      res.status(500).json({ message: \"Failed to fetch user church\" });\n    }\n  });\n\n  // Get church members\n  app.get('/api/churches/:id/members', async (req, res) => {\n    try {\n      const churchId = req.params.id;\n      const members = await storage.getChurchMembers(churchId);\n      res.json(members);\n    } catch (error) {\n      console.error(\"Error fetching church members:\", error);\n      res.status(500).json({ message: \"Failed to fetch church members\" });\n    }\n  });\n\n  // Join church by code\n  app.post('/api/churches/join-by-code', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { churchCode } = req.body;\n\n      if (!churchCode || typeof churchCode !== 'string') {\n        return res.status(400).json({ message: \"교회 코드가 필요합니다.\" });\n      }\n\n      const joinResult = await storage.joinChurchByCode(userId, churchCode);\n      \n      if (!joinResult.success) {\n        // Return appropriate status codes based on the error message\n        if (joinResult.message === \"Already a member of this church\") {\n          return res.status(409).json({ message: joinResult.message });\n        }\n        if (joinResult.message.includes(\"교회 코드를 찾을 수 없습니다\")) {\n          return res.status(404).json({ message: joinResult.message });\n        }\n        return res.status(400).json({ message: joinResult.message });\n      }\n\n      res.json({ message: joinResult.message });\n    } catch (error) {\n      console.error(\"Error joining church by code:\", error);\n      res.status(500).json({ message: \"Failed to join church by code\" });\n    }\n  });\n\n  // Update church information (admin only)\n  app.patch('/api/churches/:id', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const churchId = req.params.id;\n      const { name, description } = req.body;\n\n      // Check if the user is the church admin\n      const church = await storage.getChurch(churchId);\n      if (!church) {\n        return res.status(404).json({ message: \"Church not found\" });\n      }\n\n      if (church.adminId !== userId) {\n        return res.status(403).json({ message: \"Only church admin can update church information\" });\n      }\n\n      // Validate input data\n      const updateData: Partial<Pick<typeof church, 'name' | 'description'>> = {};\n      \n      if (name !== undefined) {\n        if (typeof name !== 'string' || name.trim().length === 0) {\n          return res.status(400).json({ message: \"Valid church name is required\" });\n        }\n        updateData.name = name.trim();\n      }\n\n      if (description !== undefined) {\n        if (typeof description === 'string') {\n          updateData.description = description.trim() || null;\n        }\n      }\n\n      if (Object.keys(updateData).length === 0) {\n        return res.status(400).json({ message: \"No valid fields provided to update\" });\n      }\n\n      const updatedChurch = await storage.updateChurch(churchId, updateData);\n      res.json(updatedChurch);\n    } catch (error) {\n      console.error(\"Error updating church:\", error);\n      res.status(500).json({ message: \"Failed to update church\" });\n    }\n  });\n\n  // Leaderboard routes\n  app.get('/api/leaderboard/personal', async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const cacheKey = `leaderboard:personal:${limit}`;\n      \n      const leaderboard = await cache.getOrSet(\n        cacheKey,\n        () => storage.getPersonalLeaderboard(limit),\n        TTL.FIVE_MINUTES\n      );\n      \n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching personal leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch personal leaderboard\" });\n    }\n  });\n\n  app.get('/api/leaderboard/churches', async (req, res) => {\n    try {\n      const sortBy = req.query.sortBy as 'totalPoints' | 'averageWpm' | 'memberCount' || 'totalPoints';\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;\n      const cacheKey = `leaderboard:churches:${sortBy}:${limit}:${offset}`;\n      \n      const leaderboard = await cache.getOrSet(\n        cacheKey,\n        () => storage.getEnhancedChurchLeaderboard(sortBy, limit, offset),\n        TTL.TEN_MINUTES\n      );\n      \n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching church leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch church leaderboard\" });\n    }\n  });\n\n  // Enhanced leaderboard routes\n  app.get('/api/leaderboard/global', async (req, res) => {\n    try {\n      const sortBy = req.query.sortBy as 'totalPoints' | 'averageWpm' | 'totalAccuracy' || 'totalPoints';\n      const timeRange = req.query.timeRange as 'daily' | 'weekly' | 'monthly' | 'all' || 'all';\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;\n      const cacheKey = `leaderboard:global:${sortBy}:${timeRange}:${limit}:${offset}`;\n      \n      const leaderboard = await cache.getOrSet(\n        cacheKey,\n        () => storage.getGlobalLeaderboard(sortBy, timeRange, limit, offset),\n        TTL.FIVE_MINUTES\n      );\n      \n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching global leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch global leaderboard\" });\n    }\n  });\n\n  app.get('/api/leaderboard/church/:churchId', async (req, res) => {\n    try {\n      const { churchId } = req.params;\n      const sortBy = req.query.sortBy as 'totalPoints' | 'averageWpm' | 'totalAccuracy' || 'totalPoints';\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const offset = req.query.offset ? parseInt(req.query.offset as string) : 0;\n      const cacheKey = `leaderboard:church:${churchId}:${sortBy}:${limit}:${offset}`;\n      \n      const leaderboard = await cache.getOrSet(\n        cacheKey,\n        () => storage.getChurchMemberLeaderboard(churchId, sortBy, limit, offset),\n        TTL.FIVE_MINUTES\n      );\n      \n      res.json(leaderboard);\n    } catch (error) {\n      if (error instanceof Error && error.message === 'Church not found') {\n        return res.status(404).json({ message: \"Church not found\" });\n      }\n      console.error(\"Error fetching church member leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch church member leaderboard\" });\n    }\n  });\n\n  app.get('/api/leaderboard/personal/:userId', async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const cacheKey = `leaderboard:personal:rank:${userId}`;\n      \n      const rankInfo = await cache.getOrSet(\n        cacheKey,\n        () => storage.getUserRankInfo(userId),\n        TTL.TWO_MINUTES\n      );\n      \n      res.json(rankInfo);\n    } catch (error) {\n      if (error instanceof Error && error.message === 'User not found') {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      console.error(\"Error fetching user rank info:\", error);\n      res.status(500).json({ message: \"Failed to fetch user rank info\" });\n    }\n  });\n\n  // Challenge routes\n  app.get('/api/challenges', async (req, res) => {\n    try {\n      const challenges = await storage.getActiveChallenges();\n      res.json(challenges);\n    } catch (error) {\n      console.error(\"Error fetching challenges:\", error);\n      res.status(500).json({ message: \"Failed to fetch challenges\" });\n    }\n  });\n\n  app.post('/api/challenges/:id/join', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const challengeId = req.params.id;\n      \n      // Check if already participating\n      const existing = await storage.getUserChallengeProgress(userId, challengeId);\n      if (existing) {\n        return res.status(400).json({ message: \"Already participating in this challenge\" });\n      }\n      \n      const participationData = insertChallengeParticipationSchema.parse({\n        userId,\n        challengeId,\n      });\n      \n      const participation = await storage.joinChallenge(participationData);\n      res.json(participation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid participation data\", errors: error.errors });\n      }\n      console.error(\"Error joining challenge:\", error);\n      res.status(500).json({ message: \"Failed to join challenge\" });\n    }\n  });\n\n  app.get('/api/challenges/:id/progress', isAuthenticatedUnified, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const challengeId = req.params.id;\n      \n      const progress = await storage.getUserChallengeProgress(userId, challengeId);\n      res.json(progress || null);\n    } catch (error) {\n      console.error(\"Error fetching challenge progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch challenge progress\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":45691},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { bibleBooks, bibleVerses, challenges } from \"@shared/schema\";\nimport { sampleBibleVerses, getBibleBooks, sampleChallenges } from \"../client/src/data/bible-verses\";\nimport { nanoid } from \"nanoid\";\n\nasync function seedDatabase() {\n  console.log(\"🌱 Starting database seeding...\");\n\n  try {\n    // 1. Seed Bible books\n    console.log(\"📚 Seeding Bible books...\");\n    const books = getBibleBooks();\n    \n    for (const book of books) {\n      await db.insert(bibleBooks).values({\n        id: nanoid(),\n        name: book.name,\n        nameKo: book.nameKo,\n        nameEn: book.nameEn,\n        nameZh: book.nameZh,\n        nameJa: book.nameJa,\n        testament: book.testament,\n        bookNumber: book.bookNumber,\n        chapters: book.chapters\n      }).onConflictDoNothing();\n    }\n    \n    console.log(`✅ Seeded ${books.length} Bible books`);\n\n    // 2. Get book IDs for verses\n    const bookRecords = await db.select().from(bibleBooks);\n    const bookNameToId = new Map();\n    bookRecords.forEach(book => {\n      bookNameToId.set(book.name, book.id);\n    });\n\n    // 3. Seed Bible verses\n    console.log(\"📖 Seeding Bible verses...\");\n    let verseCount = 0;\n    \n    for (const verse of sampleBibleVerses) {\n      const bookId = bookNameToId.get(verse.book);\n      if (bookId) {\n        await db.insert(bibleVerses).values({\n          id: nanoid(),\n          bookId: bookId,\n          chapter: verse.chapter,\n          verse: verse.verse,\n          textKo: verse.textKo,\n          textEn: verse.textEn,\n          textZh: verse.textZh,\n          textJa: verse.textJa,\n          version: verse.version || \"NIV\"\n        }).onConflictDoNothing();\n        verseCount++;\n      }\n    }\n    \n    console.log(`✅ Seeded ${verseCount} Bible verses`);\n\n    // 4. Seed sample challenges\n    console.log(\"🎯 Seeding challenges...\");\n    \n    for (const challenge of sampleChallenges) {\n      await db.insert(challenges).values({\n        id: nanoid(),\n        title: challenge.title,\n        description: challenge.description,\n        type: challenge.type,\n        targetVerseIds: \"[]\", // Empty array for now\n        requiredAccuracy: challenge.requiredAccuracy,\n        requiredWpm: challenge.requiredWpm,\n        pointsReward: challenge.pointsReward,\n        startDate: challenge.startDate,\n        endDate: challenge.endDate,\n        isActive: challenge.isActive,\n        participantCount: challenge.participantCount\n      }).onConflictDoNothing();\n    }\n    \n    console.log(`✅ Seeded ${sampleChallenges.length} challenges`);\n\n    console.log(\"🎉 Database seeding completed successfully!\");\n    \n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Run seeding if this file is executed directly\nconst isMainModule = import.meta.url === `file://${process.argv[1]}`;\nif (isMainModule) {\n  seedDatabase()\n    .then(() => {\n      console.log(\"Seeding finished!\");\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error(\"Seeding failed:\", error);\n      process.exit(1);\n    });\n}\n\nexport { seedDatabase };","size_bytes":3115},"server/storage.ts":{"content":"import {\n  users,\n  churches,\n  bibleBooks,\n  bibleVerses,\n  languages,\n  translations,\n  typingSessions,\n  challenges,\n  challengeParticipations,\n  emailVerificationTokens,\n  passwordResetTokens,\n  safeAuthUserSchema,\n  type User,\n  type UpsertUser,\n  type SafeAuthUser,\n  type Church,\n  type InsertChurch,\n  type BibleBook,\n  type BibleVerse,\n  type Language,\n  type Translation,\n  type TypingSession,\n  type InsertTypingSession,\n  type Challenge,\n  type ChallengeParticipation,\n  type InsertChallengeParticipation,\n  type EmailVerificationToken,\n  type InsertEmailVerificationToken,\n  type PasswordResetToken,\n  type InsertPasswordResetToken,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and, or, gte, lte, avg, sum, count, isNull } from \"drizzle-orm\";\nimport { cache, TTL } from \"./cache\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  \n  // SECURITY: Safe authentication function - only allows profile fields, no statistics\n  safeUpsertUserFromAuth(user: SafeAuthUser): Promise<User>;\n  \n  // Profile update operations\n  updateUserProfile(userId: string, profileData: { firstName?: string; age?: number; region?: string; churchId?: string }): Promise<User>;\n  \n  // OAuth preparation: Backfill authProvider/authProviderId for existing Replit users\n  backfillReplitAuthInfo(): Promise<{ updatedCount: number; errors: string[] }>;\n  \n  // DEPRECATED: Use with caution - allows all fields including statistics\n  // Only for internal server use, NOT for client-facing operations\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Church operations\n  createChurch(church: InsertChurch): Promise<Church>;\n  getChurch(id: string): Promise<Church | undefined>;\n  getChurchByCode(churchCode: string): Promise<Church | undefined>;\n  getAllChurches(search?: string, limit?: number): Promise<Church[]>;\n  getUserChurch(userId: string): Promise<Church | undefined>;\n  getChurchMembers(churchId: string): Promise<Array<User & { isAdmin: boolean }>>;\n  joinChurch(userId: string, churchId: string): Promise<{ success: boolean; message: string }>;\n  joinChurchByCode(userId: string, churchCode: string): Promise<{ success: boolean; message: string }>;\n  updateChurch(churchId: string, updateData: Partial<Pick<Church, 'name' | 'description'>>): Promise<Church>;\n  getChurchLeaderboard(limit?: number): Promise<Array<Church & { averageWpm: number; memberCount: number }>>;\n  \n  // Bible operations\n  getBibleBooks(): Promise<BibleBook[]>;\n  getBibleVerse(bookId: string, chapter: number, verse: number, translationId?: string): Promise<BibleVerse | undefined>;\n  getRandomVerse(translationId?: string): Promise<BibleVerse | undefined>;\n  getChapterVerses(bookId: string, chapter: number, translationId?: string): Promise<BibleVerse[]>;\n  \n  // Language and translation operations\n  getLanguages(): Promise<Language[]>;\n  getTranslationsByLanguage(languageCode: string): Promise<Translation[]>;\n  getDefaultTranslation(): Promise<Translation | undefined>;\n  getMaxChapterForBook(bookId: string, translationId?: string): Promise<number>;\n  \n  // Typing session operations\n  createTypingSession(session: InsertTypingSession): Promise<TypingSession>;\n  getUserTypingSessions(userId: string, limit?: number): Promise<TypingSession[]>;\n  getUserStats(userId: string): Promise<{\n    totalWords: number;\n    averageWpm: number;\n    averageAccuracy: number;\n    totalSessions: number;\n  }>;\n  updateUserStats(userId: string): Promise<void>;\n  \n  // Leaderboard operations\n  getPersonalLeaderboard(limit?: number): Promise<Array<User & { churchName: string | null }>>;\n  \n  // Enhanced leaderboard operations\n  getGlobalLeaderboard(\n    sortBy?: 'totalPoints' | 'averageWpm' | 'totalAccuracy', \n    timeRange?: 'daily' | 'weekly' | 'monthly' | 'all',\n    limit?: number, \n    offset?: number\n  ): Promise<{\n    users: Array<User & { \n      churchName: string | null; \n      rank: number;\n      recentSessions?: number;\n    }>;\n    total: number;\n  }>;\n  \n  getChurchMemberLeaderboard(\n    churchId: string, \n    sortBy?: 'totalPoints' | 'averageWpm' | 'totalAccuracy',\n    limit?: number,\n    offset?: number\n  ): Promise<{\n    users: Array<User & { rank: number }>;\n    total: number;\n    churchInfo: Church;\n  }>;\n  \n  getUserRankInfo(userId: string): Promise<{\n    globalRank: number;\n    churchRank: number | null;\n    totalUsers: number;\n    totalChurchMembers: number | null;\n    percentile: number;\n    churchPercentile: number | null;\n  }>;\n  \n  getEnhancedChurchLeaderboard(\n    sortBy?: 'totalPoints' | 'averageWpm' | 'memberCount',\n    limit?: number,\n    offset?: number\n  ): Promise<{\n    churches: Array<Church & { \n      averageWpm: number; \n      memberCount: number;\n      totalPoints: number;\n      rank: number;\n      activeMembers: number;\n    }>;\n    total: number;\n  }>;\n  \n  // Challenge operations\n  getActiveChallenges(): Promise<Challenge[]>;\n  joinChallenge(participation: InsertChallengeParticipation): Promise<ChallengeParticipation>;\n  getUserChallengeProgress(userId: string, challengeId: string): Promise<ChallengeParticipation | undefined>;\n  updateChallengeProgress(userId: string, challengeId: string, progress: number): Promise<void>;\n  getUserActiveChallengeParticipations(userId: string): Promise<Array<ChallengeParticipation & { challenge: Challenge }>>;\n  updateChallengesAfterSession(userId: string, session: TypingSession): Promise<void>;\n\n  // Dashboard operations\n  getUserDashboard(userId: string): Promise<{\n    user: User;\n    stats: {\n      totalWords: number;\n      averageWpm: number;\n      averageAccuracy: number;\n      totalSessions: number;\n      practiceStreak: number;\n      totalPoints: number;\n    };\n    rankings: {\n      globalRank: number;\n      churchRank: number | null;\n      totalUsers: number;\n      percentile: number;\n    };\n    recentSessions: TypingSession[];\n    achievements: Array<{\n      id: string;\n      name: string;\n      description: string;\n      icon: string;\n      unlockedAt: Date | null;\n      progress: number;\n      total: number;\n    }>;\n    weeklyProgress: Array<{\n      date: string;\n      sessions: number;\n      wordsTyped: number;\n      avgWpm: number;\n    }>;\n  }>;\n  \n  getUserRecentSessions(userId: string, limit?: number): Promise<Array<TypingSession & {\n    bookName: string;\n    chapter: number;\n    verse: number;\n  }>>;\n  \n  getUserProgress(userId: string): Promise<{\n    bibleProgress: Array<{\n      bookId: string;\n      bookName: string;\n      chaptersCompleted: number;\n      totalChapters: number;\n      progressPercentage: number;\n    }>;\n    dailyGoal: {\n      targetSessions: number;\n      targetWords: number;\n      currentSessions: number;\n      currentWords: number;\n    };\n    weeklyGoal: {\n      targetSessions: number;\n      targetWords: number;\n      currentSessions: number;\n      currentWords: number;\n    };\n  }>;\n  \n  getUserAchievements(userId: string): Promise<Array<{\n    id: string;\n    name: string;\n    description: string;\n    icon: string;\n    category: 'typing' | 'speed' | 'accuracy' | 'streak' | 'bible';\n    unlockedAt: Date | null;\n    progress: number;\n    total: number;\n    isUnlocked: boolean;\n  }>>;\n\n  // Admin operations\n  getAdminStats(): Promise<{\n    totalUsers: number;\n    totalChurches: number;\n    totalTypingSessions: number;\n    averageWpm: number;\n    averageAccuracy: number;\n    newUsersThisWeek: number;\n    activeUsersToday: number;\n    usersByAge: Array<{ ageRange: string; count: number }>;\n    usersByRegion: Array<{ region: string; count: number }>;\n    churchMemberStats: Array<{ churchName: string; memberCount: number; averageWpm: number }>;\n    recentActivity: Array<{ date: string; sessions: number; newUsers: number }>;\n  }>;\n  makeUserAdmin(userId: string): Promise<{ success: boolean; message: string }>;\n  removeUserAdmin(userId: string): Promise<{ success: boolean; message: string }>;\n\n  // Email authentication operations\n  createEmailUser(email: string, hashedPassword: string, firstName: string): Promise<User>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  verifyUserPassword(email: string, password: string): Promise<User | undefined>;\n  createVerificationToken(email: string, token: string, expiresAt: Date): Promise<EmailVerificationToken>;\n  getVerificationToken(token: string): Promise<EmailVerificationToken | undefined>;\n  markTokenAsUsed(token: string): Promise<void>;\n  activateUserEmail(email: string): Promise<void>;\n  cleanupExpiredTokens(): Promise<void>;\n  \n  // Password reset operations\n  createPasswordResetToken(email: string, token: string, expiresAt: Date): Promise<PasswordResetToken>;\n  getPasswordResetToken(token: string): Promise<PasswordResetToken | undefined>;\n  markPasswordResetTokenAsUsed(token: string): Promise<void>;\n  updateUserPassword(email: string, hashedPassword: string): Promise<void>;\n  cleanupExpiredPasswordResetTokens(): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  // SECURITY: Safe authentication upsert - supports OAuth composite key scenarios\n  async safeUpsertUserFromAuth(userData: SafeAuthUser): Promise<User> {\n    // Runtime validation to enforce schema constraints\n    const validatedData = safeAuthUserSchema.parse(userData);\n    \n    return await db.transaction(async (tx) => {\n      let existingUser: User | undefined;\n      \n      // Strategy 1: Find by composite OAuth key (authProvider + authProviderId)\n      if (validatedData.authProvider && validatedData.authProviderId) {\n        const [foundUser] = await tx\n          .select()\n          .from(users)\n          .where(\n            and(\n              eq(users.authProvider, validatedData.authProvider),\n              eq(users.authProviderId, validatedData.authProviderId)\n            )\n          )\n          .limit(1);\n        existingUser = foundUser;\n      }\n      \n      // Strategy 2: Fallback to ID lookup for Replit auth (when OAuth info not available)\n      if (!existingUser && validatedData.id) {\n        const [foundUser] = await tx\n          .select()\n          .from(users)\n          .where(eq(users.id, validatedData.id))\n          .limit(1);\n        existingUser = foundUser;\n      }\n      \n      // Prepare safe data for upsert (exclude churchId for security)\n      const safeFields = {\n        id: validatedData.id,\n        email: validatedData.email,\n        firstName: validatedData.firstName,\n        lastName: validatedData.lastName,\n        profileImageUrl: validatedData.profileImageUrl,\n        age: validatedData.age,\n        region: validatedData.region,\n        authProvider: validatedData.authProvider,\n        authProviderId: validatedData.authProviderId,\n        updatedAt: new Date(),\n      };\n      \n      // Remove undefined values\n      const cleanData = Object.fromEntries(\n        Object.entries(safeFields).filter(([_, value]) => value !== undefined)\n      );\n      \n      if (existingUser) {\n        // Update existing user\n        const [updatedUser] = await tx\n          .update(users)\n          .set(cleanData)\n          .where(eq(users.id, existingUser.id))\n          .returning();\n        return updatedUser;\n      } else {\n        // Create new user\n        const [newUser] = await tx\n          .insert(users)\n          .values(cleanData)\n          .returning();\n        return newUser;\n      }\n    });\n  }\n\n  // OAuth preparation: Backfill authProvider/authProviderId for existing Replit users\n  async backfillReplitAuthInfo(): Promise<{ updatedCount: number; errors: string[] }> {\n    const errors: string[] = [];\n    let updatedCount = 0;\n    \n    try {\n      // Find users who don't have authProvider/authProviderId set (existing Replit users)\n      const usersToUpdate = await db\n        .select({ id: users.id })\n        .from(users)\n        .where(\n          or(\n            isNull(users.authProvider),\n            isNull(users.authProviderId)\n          )\n        );\n      \n      console.log(`Found ${usersToUpdate.length} users to backfill with Replit auth info`);\n      \n      // Update users in batches to avoid overwhelming the database\n      const batchSize = 100;\n      for (let i = 0; i < usersToUpdate.length; i += batchSize) {\n        const batch = usersToUpdate.slice(i, i + batchSize);\n        \n        try {\n          await db.transaction(async (tx) => {\n            for (const user of batch) {\n              await tx\n                .update(users)\n                .set({\n                  authProvider: 'replit',\n                  authProviderId: user.id, // Use the user's ID as the provider ID for Replit\n                  updatedAt: new Date(),\n                })\n                .where(eq(users.id, user.id));\n              updatedCount++;\n            }\n          });\n          \n          console.log(`Backfilled batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(usersToUpdate.length / batchSize)}`);\n        } catch (batchError) {\n          const errorMsg = `Failed to update batch starting at index ${i}: ${batchError instanceof Error ? batchError.message : String(batchError)}`;\n          console.error(errorMsg);\n          errors.push(errorMsg);\n        }\n      }\n      \n      console.log(`✅ Backfill completed: ${updatedCount} users updated with Replit auth info`);\n      \n    } catch (error) {\n      const errorMsg = `Failed to backfill Replit auth info: ${error instanceof Error ? error.message : String(error)}`;\n      console.error(errorMsg);\n      errors.push(errorMsg);\n    }\n    \n    return { updatedCount, errors };\n  }\n\n  // Profile update operations - safe for client use\n  async updateUserProfile(userId: string, profileData: { firstName?: string; age?: number; region?: string; churchId?: string | null }): Promise<User> {\n    // Only allow safe profile fields\n    const safeProfileData: any = {\n      updatedAt: new Date(),\n    };\n    \n    // Handle each field explicitly to support null values\n    if (profileData.firstName !== undefined) {\n      safeProfileData.firstName = profileData.firstName;\n    }\n    \n    if (profileData.age !== undefined) {\n      safeProfileData.age = profileData.age;\n    }\n    \n    if (profileData.region !== undefined) {\n      safeProfileData.region = profileData.region;\n    }\n    \n    if (profileData.churchId !== undefined) {\n      safeProfileData.churchId = profileData.churchId; // This can be null\n    }\n    \n    const [updatedUser] = await db\n      .update(users)\n      .set(safeProfileData)\n      .where(eq(users.id, userId))\n      .returning();\n    \n    if (!updatedUser) {\n      throw new Error(\"User not found\");\n    }\n    \n    return updatedUser;\n  }\n\n  // DEPRECATED: Dangerous function that allows statistics manipulation\n  // TODO: Remove this function or restrict to internal server use only\n  // DO NOT use for client-facing operations\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    console.warn(\n      '⚠️  SECURITY WARNING: upsertUser allows statistics manipulation. Use safeUpsertUserFromAuth for client operations.'\n    );\n    \n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Helper function to generate unique church code using nanoid for maximum entropy\n  private async generateUniqueChurchCode(): Promise<string> {\n    const { nanoid, customAlphabet } = await import('nanoid');\n    \n    // Use custom alphabet for church codes - uppercase letters and numbers, excluding confusing characters\n    // Excludes: 0, O, 1, I, L to prevent confusion\n    const generateCode = customAlphabet('ABCDEFGHJKMNPQRSTUVWXYZ23456789', 8);\n\n    // Keep trying until we find a unique code\n    let attempts = 0;\n    while (attempts < 100) { // Safety limit\n      const code = generateCode();\n      const existing = await this.getChurchByCode(code);\n      if (!existing) {\n        return code;\n      }\n      attempts++;\n    }\n    \n    throw new Error('Failed to generate unique church code after 100 attempts');\n  }\n\n  // Church operations\n  async createChurch(churchData: InsertChurch): Promise<Church> {\n    const churchCode = await this.generateUniqueChurchCode();\n    const [church] = await db.insert(churches).values({\n      ...churchData,\n      churchCode,\n    }).returning();\n    return church;\n  }\n\n  async getChurch(id: string): Promise<Church | undefined> {\n    const [church] = await db.select().from(churches).where(eq(churches.id, id));\n    return church;\n  }\n\n  async getChurchByCode(churchCode: string): Promise<Church | undefined> {\n    const [church] = await db.select().from(churches).where(eq(churches.churchCode, churchCode.toUpperCase()));\n    return church;\n  }\n\n  async getChurchMembers(churchId: string): Promise<Array<User & { isAdmin: boolean }>> {\n    // Get church first to check if it exists and get admin info\n    const church = await this.getChurch(churchId);\n    if (!church) {\n      return [];\n    }\n\n    const members = await db\n      .select()\n      .from(users)\n      .where(eq(users.churchId, churchId))\n      .orderBy(desc(users.averageWpm)); // Order by WPM descending\n\n    // Add isAdmin flag for each member\n    return members.map(member => ({\n      ...member,\n      isAdmin: member.id === church.adminId,\n    }));\n  }\n\n  async joinChurchByCode(userId: string, churchCode: string): Promise<{ success: boolean; message: string }> {\n    // Find church by code\n    const church = await this.getChurchByCode(churchCode.toUpperCase());\n    if (!church) {\n      return { success: false, message: \"교회 코드를 찾을 수 없습니다. 올바른 코드를 입력하세요.\" };\n    }\n\n    // Use existing joinChurch method\n    return await this.joinChurch(userId, church.id);\n  }\n\n  async updateChurch(\n    churchId: string, \n    updateData: Partial<Pick<Church, 'name' | 'description'>>\n  ): Promise<Church> {\n    // Validate church exists\n    const existingChurch = await this.getChurch(churchId);\n    if (!existingChurch) {\n      throw new Error(\"Church not found\");\n    }\n\n    // Update church\n    const [updatedChurch] = await db\n      .update(churches)\n      .set(updateData)\n      .where(eq(churches.id, churchId))\n      .returning();\n\n    return updatedChurch;\n  }\n\n  async getAllChurches(search?: string, limit: number = 50): Promise<Church[]> {\n    if (search && search.trim()) {\n      // Search in church name\n      return await db\n        .select()\n        .from(churches)\n        .where(\n          sql`${churches.name} ILIKE ${`%${search.trim()}%`}`\n        )\n        .orderBy(churches.name)\n        .limit(limit);\n    }\n    \n    return await db\n      .select()\n      .from(churches)\n      .orderBy(churches.name)\n      .limit(limit);\n  }\n\n  async getUserChurch(userId: string): Promise<Church | undefined> {\n    const [result] = await db\n      .select()\n      .from(churches)\n      .innerJoin(users, eq(users.churchId, churches.id))\n      .where(eq(users.id, userId));\n    return result?.churches;\n  }\n\n  async joinChurch(userId: string, churchId: string): Promise<{ success: boolean; message: string }> {\n    return await db.transaction(async (tx) => {\n      // Get current user to check their current church\n      const [currentUser] = await tx.select().from(users).where(eq(users.id, userId));\n      if (!currentUser) {\n        return { success: false, message: \"User not found\" };\n      }\n\n      // Check if user is already a member of this church\n      if (currentUser.churchId === churchId) {\n        return { success: false, message: \"Already a member of this church\" };\n      }\n\n      // Verify the target church exists\n      const [targetChurch] = await tx.select().from(churches).where(eq(churches.id, churchId));\n      if (!targetChurch) {\n        return { success: false, message: \"Church not found\" };\n      }\n\n      // If user was in a different church, decrease that church's member count\n      if (currentUser.churchId) {\n        await tx\n          .update(churches)\n          .set({ \n            totalMembers: sql`GREATEST(${churches.totalMembers} - 1, 0)`\n          })\n          .where(eq(churches.id, currentUser.churchId));\n      }\n\n      // Update user's church membership\n      await tx.update(users).set({ churchId }).where(eq(users.id, userId));\n\n      // Increase new church's member count\n      await tx\n        .update(churches)\n        .set({ \n          totalMembers: sql`${churches.totalMembers} + 1`\n        })\n        .where(eq(churches.id, churchId));\n\n      const action = currentUser.churchId ? \"transferred to\" : \"joined\";\n      return { success: true, message: `Successfully ${action} church` };\n    });\n  }\n\n  async getChurchLeaderboard(limit: number = 10): Promise<Array<Church & { averageWpm: number; memberCount: number }>> {\n    const result = await db\n      .select({\n        id: churches.id,\n        name: churches.name,\n        description: churches.description,\n        adminId: churches.adminId,\n        churchCode: churches.churchCode,\n        totalMembers: churches.totalMembers,\n        totalPoints: churches.totalPoints,\n        createdAt: churches.createdAt,\n        averageWpm: sql<number>`COALESCE(AVG(${users.averageWpm}), 0)`,\n        memberCount: sql<number>`COUNT(${users.id})`,\n      })\n      .from(churches)\n      .leftJoin(users, eq(users.churchId, churches.id))\n      .groupBy(churches.id)\n      .orderBy(desc(sql`COALESCE(AVG(${users.averageWpm}), 0)`))\n      .limit(limit);\n    \n    return result;\n  }\n\n  // Bible operations\n  async getBibleBooks(): Promise<BibleBook[]> {\n    const cacheKey = 'bible:books';\n    \n    return await cache.getOrSet(\n      cacheKey,\n      async () => {\n        // Only return canonical books (book_order 1-66)\n        return await db.select({\n          id: bibleBooks.id,\n          bookCode: bibleBooks.bookCode,\n          bookNameKr: bibleBooks.bookNameKr,\n          bookNameEn: bibleBooks.bookNameEn,\n          bookOrder: bibleBooks.bookOrder,\n          testament: bibleBooks.testament,\n          chapters: bibleBooks.chapters,\n          verses: bibleBooks.verses,\n        })\n          .from(bibleBooks)\n          .where(\n            and(\n              gte(bibleBooks.bookOrder, 1),\n              lte(bibleBooks.bookOrder, 66)\n            )\n          )\n          .orderBy(bibleBooks.bookOrder);\n      },\n      TTL.TWENTY_FOUR_HOURS\n    );\n  }\n\n  async getBibleVerse(bookId: string, chapter: number, verse: number, translationId?: string): Promise<BibleVerse | undefined> {\n    // Get default translation if not specified\n    if (!translationId) {\n      const defaultTranslation = await this.getDefaultTranslation();\n      if (!defaultTranslation) {\n        throw new Error(\"No default translation found\");\n      }\n      translationId = defaultTranslation.id;\n    }\n    \n    const cacheKey = `bibleVerse:${bookId}:${chapter}:${verse}:${translationId}`;\n    \n    return await cache.getOrSet(\n      cacheKey,\n      async () => {\n        const [result] = await db\n          .select()\n          .from(bibleVerses)\n          .where(\n            and(\n              eq(bibleVerses.bookId, bookId),\n              eq(bibleVerses.chapter, chapter),\n              eq(bibleVerses.verse, verse),\n              eq(bibleVerses.translationId, translationId)\n            )\n          );\n        return result;\n      },\n      TTL.TWENTY_FOUR_HOURS\n    );\n  }\n\n  async getRandomVerse(translationId?: string): Promise<BibleVerse | undefined> {\n    // Get default translation if not specified\n    if (!translationId) {\n      const defaultTranslation = await this.getDefaultTranslation();\n      if (!defaultTranslation) {\n        throw new Error(\"No default translation found\");\n      }\n      translationId = defaultTranslation.id;\n    }\n    \n    const [result] = await db\n      .select()\n      .from(bibleVerses)\n      .where(eq(bibleVerses.translationId, translationId))\n      .orderBy(sql`RANDOM()`)\n      .limit(1);\n    return result;\n  }\n\n  async getChapterVerses(bookId: string, chapter: number, translationId?: string): Promise<BibleVerse[]> {\n    // Get default translation if not specified\n    if (!translationId) {\n      const defaultTranslation = await this.getDefaultTranslation();\n      if (!defaultTranslation) {\n        throw new Error(\"No default translation found\");\n      }\n      translationId = defaultTranslation.id;\n    }\n    \n    const cacheKey = `chapterVerses:${bookId}:${chapter}:${translationId}`;\n    \n    return await cache.getOrSet(\n      cacheKey,\n      async () => {\n        return await db\n          .select()\n          .from(bibleVerses)\n          .where(\n            and(\n              eq(bibleVerses.bookId, bookId),\n              eq(bibleVerses.chapter, chapter),\n              eq(bibleVerses.translationId, translationId)\n            )\n          )\n          .orderBy(bibleVerses.verse);\n      },\n      TTL.TWENTY_FOUR_HOURS\n    );\n  }\n\n  async getMaxChapterForBook(bookId: string, translationId?: string): Promise<number> {\n    // Get default translation if not specified\n    if (!translationId) {\n      const defaultTranslation = await this.getDefaultTranslation();\n      if (!defaultTranslation) {\n        throw new Error(\"No default translation found\");\n      }\n      translationId = defaultTranslation.id;\n    }\n    \n    const cacheKey = `maxChapter:${bookId}:${translationId}`;\n    \n    return await cache.getOrSet(\n      cacheKey,\n      async () => {\n        const result = await db\n          .select({ maxChapter: sql<number>`MAX(${bibleVerses.chapter})` })\n          .from(bibleVerses)\n          .where(\n            and(\n              eq(bibleVerses.bookId, bookId),\n              eq(bibleVerses.translationId, translationId)\n            )\n          );\n        \n        return result[0]?.maxChapter || 1;\n      },\n      TTL.TWENTY_FOUR_HOURS\n    );\n  }\n\n  // Language and translation operations\n  async getLanguages(): Promise<Language[]> {\n    const cacheKey = 'languages:all';\n    \n    return await cache.getOrSet(\n      cacheKey,\n      async () => {\n        return await db.select().from(languages).orderBy(languages.name);\n      },\n      TTL.TWENTY_FOUR_HOURS\n    );\n  }\n\n  async getTranslationsByLanguage(languageCode: string): Promise<Translation[]> {\n    const cacheKey = `translations:language:${languageCode}`;\n    \n    return await cache.getOrSet(\n      cacheKey,\n      async () => {\n        return await db\n          .select()\n          .from(translations)\n          .innerJoin(languages, eq(translations.languageId, languages.id))\n          .where(eq(languages.code, languageCode))\n          .then(results => results.map(result => result.translations));\n      },\n      TTL.TWENTY_FOUR_HOURS\n    );\n  }\n\n  // 번들 API: 첫 로딩에 필요한 모든 데이터를 한 번에 가져오기\n  async getBibleInitialData(includePrefetch: boolean = false): Promise<{\n    languages: Language[];\n    koreanTranslations: Translation[];\n    books: BibleBook[];\n    defaultVerse: BibleVerse | null;\n    defaultTranslation: Translation | null;\n    popularChapters: BibleVerse[][];\n  }> {\n    const cacheKey = includePrefetch ? 'bible:initial-data-full' : 'bible:initial-data-lite';\n    \n    return await cache.getOrSet(\n      cacheKey,\n      async () => {\n        console.log(`📦 번들 API 실행: ${includePrefetch ? '프리페칭 포함' : '필수 데이터만'}`);\n        \n        // 병렬로 데이터 가져오기\n        const [languages, books, defaultTranslation] = await Promise.all([\n          this.getLanguages(),\n          this.getBibleBooks(),\n          this.getDefaultTranslation(),\n        ]);\n\n        // 한국어 번역본들 가져오기\n        const koreanTranslations = await this.getTranslationsByLanguage('ko');\n\n        // 기본 구절 가져오기 (창세기 1:1)\n        let defaultVerse: BibleVerse | null = null;\n        if (defaultTranslation && books.length > 0) {\n          const genesisBook = books.find(book => book.bookOrder === 1); // 창세기\n          if (genesisBook) {\n            const verse = await this.getBibleVerse(genesisBook.id, 1, 1, defaultTranslation.id);\n            defaultVerse = verse || null;\n          }\n        }\n\n        // 🚀 선택적 인기 구절들 프리페칭 (성능 최적화)\n        const popularChapters: BibleVerse[][] = [];\n        if (includePrefetch && defaultTranslation && books.length > 0) {\n          console.log('🚀 인기 구절 프리페칭 시작...');\n          const popularChapterRefs = [\n            { bookOrder: 1, chapter: 1 },   // 창세기 1장\n            { bookOrder: 19, chapter: 23 },  // 시편 23편\n            { bookOrder: 19, chapter: 1 },   // 시편 1편\n            { bookOrder: 43, chapter: 3 },   // 요한복음 3장\n            { bookOrder: 40, chapter: 5 },   // 마태복음 5장 (산상수훈)\n            { bookOrder: 46, chapter: 13 },  // 고린도전서 13장 (사랑장)\n          ];\n\n          const chapterPromises = popularChapterRefs.map(async (ref) => {\n            const book = books.find(b => b.bookOrder === ref.bookOrder);\n            if (book) {\n              try {\n                return await this.getChapterVerses(book.id, ref.chapter, defaultTranslation.id);\n              } catch (error) {\n                console.warn(`Failed to prefetch ${book.bookNameKr} ${ref.chapter}장:`, error);\n                return [];\n              }\n            }\n            return [];\n          });\n\n          const chapters = await Promise.all(chapterPromises);\n          popularChapters.push(...chapters.filter(chapter => chapter.length > 0));\n          console.log(`✅ 인기 구절 프리페칭 완료: ${popularChapters.length}개 장`);\n        }\n\n        return {\n          languages,\n          koreanTranslations,\n          books,\n          defaultVerse,\n          defaultTranslation: defaultTranslation || null,\n          popularChapters,\n        };\n      },\n      TTL.ONE_HOUR // 1시간 캐시 (데이터가 크므로 조금 짧게)\n    );\n  }\n\n  async getDefaultTranslation(): Promise<Translation | undefined> {\n    const cacheKey = 'translation:default';\n    \n    return await cache.getOrSet(\n      cacheKey,\n      async () => {\n        // Find the 개역개정 translation (Korean Revised Version) - most complete translation\n        const [result] = await db\n          .select()\n          .from(translations)\n          .where(eq(translations.code, \"GAEREVIS\"))\n          .limit(1);\n        \n        if (result) {\n          return result;\n        }\n        \n        // Fallback to GAE if GAEREVIS not found\n        const [fallback] = await db\n          .select()\n          .from(translations)\n          .where(eq(translations.code, \"GAE\"))\n          .limit(1);\n        return fallback;\n      },\n      TTL.PERMANENT // Permanent cache for default translation\n    );\n  }\n\n  // Typing session operations\n  async createTypingSession(sessionData: InsertTypingSession): Promise<TypingSession> {\n    return await db.transaction(async (tx) => {\n      // Create the typing session\n      const [session] = await tx.insert(typingSessions).values(sessionData).returning();\n      \n      // Update user stats after creating session\n      await this.updateUserStats(sessionData.userId);\n      \n      // Update challenge progress for this session\n      await this.updateChallengesAfterSession(sessionData.userId, session);\n      \n      return session;\n    });\n  }\n\n  async getUserTypingSessions(userId: string, limit: number = 20): Promise<TypingSession[]> {\n    return await db\n      .select()\n      .from(typingSessions)\n      .where(eq(typingSessions.userId, userId))\n      .orderBy(desc(typingSessions.completedAt))\n      .limit(limit);\n  }\n\n  async getUserStats(userId: string): Promise<{\n    totalWords: number;\n    averageWpm: number;\n    averageAccuracy: number;\n    totalSessions: number;\n  }> {\n    const [result] = await db\n      .select({\n        totalWords: sql<number>`COALESCE(SUM(${typingSessions.wordsTyped}), 0)`,\n        averageWpm: sql<number>`COALESCE(AVG(${typingSessions.wpm}), 0)`,\n        averageAccuracy: sql<number>`COALESCE(AVG(${typingSessions.accuracy}), 0)`,\n        totalSessions: sql<number>`COUNT(*)`,\n      })\n      .from(typingSessions)\n      .where(eq(typingSessions.userId, userId));\n    \n    return result || { totalWords: 0, averageWpm: 0, averageAccuracy: 0, totalSessions: 0 };\n  }\n\n  async updateUserStats(userId: string): Promise<void> {\n    const stats = await this.getUserStats(userId);\n    \n    await db\n      .update(users)\n      .set({\n        totalWords: stats.totalWords,\n        averageWpm: stats.averageWpm,\n        totalAccuracy: stats.averageAccuracy,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Leaderboard operations\n  async getPersonalLeaderboard(limit: number = 10): Promise<Array<User & { churchName: string | null }>> {\n    const result = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        password: users.password,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        age: users.age,\n        region: users.region,\n        authProvider: users.authProvider,\n        authProviderId: users.authProviderId,\n        churchId: users.churchId,\n        totalWords: users.totalWords,\n        totalAccuracy: users.totalAccuracy,\n        averageWpm: users.averageWpm,\n        practiceStreak: users.practiceStreak,\n        totalPoints: users.totalPoints,\n        isAdmin: users.isAdmin,\n        phone: users.phone,\n        address: users.address,\n        interests: users.interests,\n        emailVerified: users.emailVerified,\n        phoneVerified: users.phoneVerified,\n        profileCompleted: users.profileCompleted,\n        privacyConsent: users.privacyConsent,\n        marketingConsent: users.marketingConsent,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        churchName: sql<string | null>`${churches.name}`,\n      })\n      .from(users)\n      .leftJoin(churches, eq(users.churchId, churches.id))\n      .orderBy(desc(users.averageWpm))\n      .limit(limit);\n    \n    return result;\n  }\n\n  // Enhanced leaderboard operations\n  async getGlobalLeaderboard(\n    sortBy: 'totalPoints' | 'averageWpm' | 'totalAccuracy' = 'totalPoints',\n    timeRange: 'daily' | 'weekly' | 'monthly' | 'all' = 'all',\n    limit: number = 20,\n    offset: number = 0\n  ): Promise<{\n    users: Array<User & { \n      churchName: string | null; \n      rank: number;\n      recentSessions?: number;\n    }>;\n    total: number;\n  }> {\n    // Build time-based WHERE clause for recent sessions\n    let timeFilter = sql`1=1`; // Default: no filter\n    if (timeRange !== 'all') {\n      const now = new Date();\n      let startDate: Date;\n      \n      switch (timeRange) {\n        case 'daily':\n          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n          break;\n        case 'weekly':\n          startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n          break;\n        case 'monthly':\n          startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n          break;\n      }\n      timeFilter = sql`${typingSessions.completedAt} >= ${startDate}`;\n    }\n\n    // Determine sort column\n    let sortColumn;\n    switch (sortBy) {\n      case 'averageWpm':\n        sortColumn = desc(users.averageWpm);\n        break;\n      case 'totalAccuracy':\n        sortColumn = desc(users.totalAccuracy);\n        break;\n      default:\n        sortColumn = desc(users.totalPoints);\n    }\n\n    // Get the ranked users\n    const rankedUsers = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        password: users.password,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        age: users.age,\n        region: users.region,\n        authProvider: users.authProvider,\n        authProviderId: users.authProviderId,\n        churchId: users.churchId,\n        totalWords: users.totalWords,\n        totalAccuracy: users.totalAccuracy,\n        averageWpm: users.averageWpm,\n        practiceStreak: users.practiceStreak,\n        totalPoints: users.totalPoints,\n        isAdmin: users.isAdmin,\n        phone: users.phone,\n        address: users.address,\n        interests: users.interests,\n        emailVerified: users.emailVerified,\n        phoneVerified: users.phoneVerified,\n        profileCompleted: users.profileCompleted,\n        privacyConsent: users.privacyConsent,\n        marketingConsent: users.marketingConsent,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        churchName: sql<string | null>`${churches.name}`,\n        rank: sql<number>`ROW_NUMBER() OVER (ORDER BY ${sortBy === 'averageWpm' ? users.averageWpm : sortBy === 'totalAccuracy' ? users.totalAccuracy : users.totalPoints} DESC)`,\n        recentSessions: timeRange !== 'all' ? sql<number>`COUNT(DISTINCT ${typingSessions.id})` : sql<number>`NULL`,\n      })\n      .from(users)\n      .leftJoin(churches, eq(users.churchId, churches.id))\n      .leftJoin(typingSessions, timeRange !== 'all' ? and(eq(typingSessions.userId, users.id), timeFilter) : eq(typingSessions.userId, users.id))\n      .groupBy(users.id, churches.name)\n      .orderBy(sortColumn)\n      .limit(limit)\n      .offset(offset);\n\n    // Get total count\n    const totalResult = await db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(users);\n    \n    const total = totalResult[0]?.count || 0;\n\n    return {\n      users: rankedUsers,\n      total\n    };\n  }\n\n  async getChurchMemberLeaderboard(\n    churchId: string, \n    sortBy: 'totalPoints' | 'averageWpm' | 'totalAccuracy' = 'totalPoints',\n    limit: number = 20,\n    offset: number = 0\n  ): Promise<{\n    users: Array<User & { rank: number }>;\n    total: number;\n    churchInfo: Church;\n  }> {\n    // Get church info\n    const churchInfo = await this.getChurch(churchId);\n    if (!churchInfo) {\n      throw new Error('Church not found');\n    }\n\n    // Determine sort column\n    let sortColumn;\n    switch (sortBy) {\n      case 'averageWpm':\n        sortColumn = desc(users.averageWpm);\n        break;\n      case 'totalAccuracy':\n        sortColumn = desc(users.totalAccuracy);\n        break;\n      default:\n        sortColumn = desc(users.totalPoints);\n    }\n\n    // Get ranked church members\n    const rankedMembers = await db\n      .select({\n        id: users.id,\n        email: users.email,\n        password: users.password,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        age: users.age,\n        region: users.region,\n        authProvider: users.authProvider,\n        authProviderId: users.authProviderId,\n        churchId: users.churchId,\n        totalWords: users.totalWords,\n        totalAccuracy: users.totalAccuracy,\n        averageWpm: users.averageWpm,\n        practiceStreak: users.practiceStreak,\n        totalPoints: users.totalPoints,\n        isAdmin: users.isAdmin,\n        phone: users.phone,\n        address: users.address,\n        interests: users.interests,\n        emailVerified: users.emailVerified,\n        phoneVerified: users.phoneVerified,\n        profileCompleted: users.profileCompleted,\n        privacyConsent: users.privacyConsent,\n        marketingConsent: users.marketingConsent,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        rank: sql<number>`ROW_NUMBER() OVER (ORDER BY ${sortBy === 'averageWpm' ? users.averageWpm : sortBy === 'totalAccuracy' ? users.totalAccuracy : users.totalPoints} DESC)`,\n      })\n      .from(users)\n      .where(eq(users.churchId, churchId))\n      .orderBy(sortColumn)\n      .limit(limit)\n      .offset(offset);\n\n    // Get total count of church members\n    const totalResult = await db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(users)\n      .where(eq(users.churchId, churchId));\n    \n    const total = totalResult[0]?.count || 0;\n\n    return {\n      users: rankedMembers,\n      total,\n      churchInfo\n    };\n  }\n\n  async getUserRankInfo(userId: string): Promise<{\n    globalRank: number;\n    churchRank: number | null;\n    totalUsers: number;\n    totalChurchMembers: number | null;\n    percentile: number;\n    churchPercentile: number | null;\n  }> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Get global rank\n    const globalRankResult = await db\n      .select({ \n        rank: sql<number>`COUNT(*) + 1` \n      })\n      .from(users)\n      .where(sql`${users.totalPoints} > ${user.totalPoints}`);\n    \n    const globalRank = globalRankResult[0]?.rank || 1;\n\n    // Get total users\n    const totalUsersResult = await db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(users);\n    \n    const totalUsers = totalUsersResult[0]?.count || 1;\n\n    // Calculate global percentile\n    const percentile = Math.round((1 - (globalRank - 1) / totalUsers) * 100);\n\n    let churchRank: number | null = null;\n    let totalChurchMembers: number | null = null;\n    let churchPercentile: number | null = null;\n\n    // If user belongs to a church, calculate church rank\n    if (user.churchId) {\n      const churchRankResult = await db\n        .select({ \n          rank: sql<number>`COUNT(*) + 1` \n        })\n        .from(users)\n        .where(\n          and(\n            eq(users.churchId, user.churchId),\n            sql`${users.totalPoints} > ${user.totalPoints}`\n          )\n        );\n      \n      churchRank = churchRankResult[0]?.rank || 1;\n\n      const totalChurchMembersResult = await db\n        .select({ count: sql<number>`COUNT(*)` })\n        .from(users)\n        .where(eq(users.churchId, user.churchId));\n      \n      totalChurchMembers = totalChurchMembersResult[0]?.count || 1;\n      churchPercentile = Math.round((1 - (churchRank - 1) / totalChurchMembers) * 100);\n    }\n\n    return {\n      globalRank,\n      churchRank,\n      totalUsers,\n      totalChurchMembers,\n      percentile,\n      churchPercentile,\n    };\n  }\n\n  async getEnhancedChurchLeaderboard(\n    sortBy: 'totalPoints' | 'averageWpm' | 'memberCount' = 'totalPoints',\n    limit: number = 20,\n    offset: number = 0\n  ): Promise<{\n    churches: Array<Church & { \n      averageWpm: number; \n      memberCount: number;\n      totalPoints: number;\n      rank: number;\n      activeMembers: number;\n    }>;\n    total: number;\n  }> {\n    // Calculate last 7 days for active members\n    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n\n    // Determine sort column\n    let sortColumn;\n    switch (sortBy) {\n      case 'averageWpm':\n        sortColumn = desc(sql`COALESCE(AVG(${users.averageWpm}), 0)`);\n        break;\n      case 'memberCount':\n        sortColumn = desc(sql`COUNT(${users.id})`);\n        break;\n      default:\n        sortColumn = desc(sql`COALESCE(SUM(${users.totalPoints}), 0)`);\n    }\n\n    const rankedChurches = await db\n      .select({\n        id: churches.id,\n        name: churches.name,\n        description: churches.description,\n        adminId: churches.adminId,\n        churchCode: churches.churchCode,\n        totalMembers: churches.totalMembers,\n        totalPoints: sql<number>`COALESCE(SUM(${users.totalPoints}), 0)`,\n        createdAt: churches.createdAt,\n        averageWpm: sql<number>`COALESCE(AVG(${users.averageWpm}), 0)`,\n        memberCount: sql<number>`COUNT(${users.id})`,\n        activeMembers: sql<number>`COUNT(DISTINCT CASE WHEN ${typingSessions.completedAt} >= ${sevenDaysAgo} THEN ${users.id} END)`,\n        rank: sql<number>`ROW_NUMBER() OVER (ORDER BY ${sortBy === 'averageWpm' ? sql`COALESCE(AVG(${users.averageWpm}), 0)` : sortBy === 'memberCount' ? sql`COUNT(${users.id})` : sql`COALESCE(SUM(${users.totalPoints}), 0)`} DESC)`,\n      })\n      .from(churches)\n      .leftJoin(users, eq(users.churchId, churches.id))\n      .leftJoin(typingSessions, eq(typingSessions.userId, users.id))\n      .groupBy(churches.id)\n      .orderBy(sortColumn)\n      .limit(limit)\n      .offset(offset);\n\n    // Get total count of churches\n    const totalResult = await db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(churches);\n    \n    const total = totalResult[0]?.count || 0;\n\n    return {\n      churches: rankedChurches,\n      total\n    };\n  }\n\n  // Challenge operations\n  async getActiveChallenges(): Promise<Challenge[]> {\n    const now = new Date();\n    return await db\n      .select()\n      .from(challenges)\n      .where(\n        and(\n          eq(challenges.isActive, true),\n          lte(challenges.startDate, now),\n          gte(challenges.endDate, now)\n        )\n      )\n      .orderBy(challenges.endDate);\n  }\n\n  async joinChallenge(participationData: InsertChallengeParticipation): Promise<ChallengeParticipation> {\n    const [participation] = await db\n      .insert(challengeParticipations)\n      .values(participationData)\n      .returning();\n\n    // Update participant count\n    await db\n      .update(challenges)\n      .set({\n        participantCount: sql`${challenges.participantCount} + 1`\n      })\n      .where(eq(challenges.id, participationData.challengeId));\n\n    return participation;\n  }\n\n  async getUserChallengeProgress(userId: string, challengeId: string): Promise<ChallengeParticipation | undefined> {\n    const [result] = await db\n      .select()\n      .from(challengeParticipations)\n      .where(\n        and(\n          eq(challengeParticipations.userId, userId),\n          eq(challengeParticipations.challengeId, challengeId)\n        )\n      );\n    return result;\n  }\n\n  async updateChallengeProgress(userId: string, challengeId: string, progress: number): Promise<void> {\n    await db\n      .update(challengeParticipations)\n      .set({\n        progress,\n        isCompleted: progress >= 100,\n        completedAt: progress >= 100 ? new Date() : null,\n      })\n      .where(\n        and(\n          eq(challengeParticipations.userId, userId),\n          eq(challengeParticipations.challengeId, challengeId)\n        )\n      );\n  }\n\n  async getUserActiveChallengeParticipations(userId: string): Promise<Array<ChallengeParticipation & { challenge: Challenge }>> {\n    const now = new Date();\n    const result = await db\n      .select({\n        id: challengeParticipations.id,\n        userId: challengeParticipations.userId,\n        challengeId: challengeParticipations.challengeId,\n        progress: challengeParticipations.progress,\n        isCompleted: challengeParticipations.isCompleted,\n        pointsEarned: challengeParticipations.pointsEarned,\n        joinedAt: challengeParticipations.joinedAt,\n        completedAt: challengeParticipations.completedAt,\n        challenge: {\n          id: challenges.id,\n          title: challenges.title,\n          description: challenges.description,\n          type: challenges.type,\n          targetVerseIds: challenges.targetVerseIds,\n          requiredAccuracy: challenges.requiredAccuracy,\n          requiredWpm: challenges.requiredWpm,\n          pointsReward: challenges.pointsReward,\n          startDate: challenges.startDate,\n          endDate: challenges.endDate,\n          isActive: challenges.isActive,\n          participantCount: challenges.participantCount,\n        }\n      })\n      .from(challengeParticipations)\n      .innerJoin(challenges, eq(challengeParticipations.challengeId, challenges.id))\n      .where(\n        and(\n          eq(challengeParticipations.userId, userId),\n          eq(challengeParticipations.isCompleted, false),\n          eq(challenges.isActive, true),\n          lte(challenges.startDate, now),\n          gte(challenges.endDate, now)\n        )\n      );\n    \n    return result;\n  }\n\n  private calculateChallengeProgress(\n    session: TypingSession,\n    challenge: Challenge,\n    existingProgress: number,\n    userSessions: TypingSession[]\n  ): number {\n    // Check if session meets basic requirements\n    if (session.wpm < (challenge.requiredWpm || 0) || session.accuracy < (challenge.requiredAccuracy || 0)) {\n      return existingProgress; // No progress if requirements not met\n    }\n\n    // Check if challenge has target verses and session matches\n    if (challenge.targetVerseIds) {\n      try {\n        const targetVerses: string[] = JSON.parse(challenge.targetVerseIds);\n        if (targetVerses.length > 0 && !targetVerses.includes(session.verseId)) {\n          return existingProgress; // No progress if not typing target verse\n        }\n      } catch (error) {\n        console.error(\"Error parsing targetVerseIds:\", error);\n      }\n    }\n\n    // Calculate progress based on challenge type\n    const challengeStart = new Date(challenge.startDate);\n    const challengeEnd = new Date(challenge.endDate);\n    const now = new Date();\n\n    // Filter sessions within challenge timeframe that meet requirements\n    const relevantSessions = userSessions.filter(s => \n      s.completedAt !== null &&\n      new Date(s.completedAt) >= challengeStart &&\n      new Date(s.completedAt) <= challengeEnd &&\n      s.wpm >= (challenge.requiredWpm || 0) &&\n      s.accuracy >= (challenge.requiredAccuracy || 0) &&\n      (!challenge.targetVerseIds || this.sessionMatchesTargetVerses(s, challenge.targetVerseIds))\n    );\n\n    let targetGoal: number;\n    let currentProgress: number;\n\n    switch (challenge.type) {\n      case 'daily':\n        // Daily challenge: Complete at least 1 qualifying session\n        targetGoal = 1;\n        currentProgress = relevantSessions.length >= 1 ? 1 : 0;\n        break;\n      \n      case 'weekly':\n        // Weekly challenge: Complete at least 5 qualifying sessions\n        targetGoal = 5;\n        currentProgress = Math.min(relevantSessions.length, targetGoal);\n        break;\n      \n      case 'monthly':\n        // Monthly challenge: Complete at least 20 qualifying sessions\n        targetGoal = 20;\n        currentProgress = Math.min(relevantSessions.length, targetGoal);\n        break;\n      \n      default:\n        // Default: treat as daily\n        targetGoal = 1;\n        currentProgress = relevantSessions.length >= 1 ? 1 : 0;\n        break;\n    }\n\n    // Calculate percentage\n    const progressPercentage = (currentProgress / targetGoal) * 100;\n    return Math.min(progressPercentage, 100);\n  }\n\n  private sessionMatchesTargetVerses(session: TypingSession, targetVerseIds: string): boolean {\n    try {\n      const targetVerses: string[] = JSON.parse(targetVerseIds);\n      return targetVerses.length === 0 || targetVerses.includes(session.verseId);\n    } catch (error) {\n      console.error(\"Error parsing targetVerseIds:\", error);\n      return true; // If parsing fails, assume it matches\n    }\n  }\n\n  async updateChallengesAfterSession(userId: string, session: TypingSession): Promise<void> {\n    return await db.transaction(async (tx) => {\n      // Get user's active challenge participations\n      const participations = await this.getUserActiveChallengeParticipations(userId);\n      \n      if (participations.length === 0) {\n        return; // No active challenges to update\n      }\n\n      // Get user's recent sessions for progress calculation\n      const challengeStart = Math.min(...participations.map(p => new Date(p.challenge.startDate).getTime()));\n      const userRecentSessions = await tx\n        .select()\n        .from(typingSessions)\n        .where(\n          and(\n            eq(typingSessions.userId, userId),\n            gte(typingSessions.completedAt, new Date(challengeStart))\n          )\n        )\n        .orderBy(desc(typingSessions.completedAt));\n\n      // Update progress for each active challenge\n      for (const participation of participations) {\n        const newProgress = this.calculateChallengeProgress(\n          session,\n          participation.challenge,\n          participation.progress || 0,\n          userRecentSessions\n        );\n\n        // Only update if progress changed\n        if (newProgress !== participation.progress) {\n          const isCompleted = newProgress >= 100;\n          const pointsEarned = isCompleted && !participation.isCompleted \n            ? participation.challenge.pointsReward || 0 \n            : participation.pointsEarned || 0;\n\n          await tx\n            .update(challengeParticipations)\n            .set({\n              progress: newProgress,\n              isCompleted,\n              pointsEarned,\n              completedAt: isCompleted && !participation.isCompleted ? new Date() : participation.completedAt,\n            })\n            .where(eq(challengeParticipations.id, participation.id));\n\n          // If challenge was just completed, update user's total points\n          if (isCompleted && !participation.isCompleted && pointsEarned > 0) {\n            await tx\n              .update(users)\n              .set({\n                totalPoints: sql`${users.totalPoints} + ${pointsEarned}`,\n                updatedAt: new Date(),\n              })\n              .where(eq(users.id, userId));\n          }\n        }\n      }\n    });\n  }\n\n  // Admin operations implementation\n  async getAdminStats(): Promise<{\n    totalUsers: number;\n    totalChurches: number;\n    totalTypingSessions: number;\n    averageWpm: number;\n    averageAccuracy: number;\n    newUsersThisWeek: number;\n    activeUsersToday: number;\n    usersByAge: Array<{ ageRange: string; count: number }>;\n    usersByRegion: Array<{ region: string; count: number }>;\n    churchMemberStats: Array<{ churchName: string; memberCount: number; averageWpm: number }>;\n    recentActivity: Array<{ date: string; sessions: number; newUsers: number }>;\n  }> {\n    const now = new Date();\n    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n    // Get basic counts\n    const [totalUsersResult] = await db.select({ count: count() }).from(users);\n    const [totalChurchesResult] = await db.select({ count: count() }).from(churches);\n    const [totalSessionsResult] = await db.select({ count: count() }).from(typingSessions);\n\n    // Get average WPM and accuracy\n    const [avgStatsResult] = await db\n      .select({\n        avgWpm: avg(typingSessions.wpm),\n        avgAccuracy: avg(typingSessions.accuracy),\n      })\n      .from(typingSessions)\n      .where(sql`${typingSessions.completedAt} IS NOT NULL`);\n\n    // Get new users this week\n    const [newUsersResult] = await db\n      .select({ count: count() })\n      .from(users)\n      .where(gte(users.createdAt, oneWeekAgo));\n\n    // Get active users today (users with sessions today)\n    const [activeUsersResult] = await db\n      .select({ count: sql<number>`COUNT(DISTINCT ${users.id})` })\n      .from(users)\n      .innerJoin(typingSessions, eq(users.id, typingSessions.userId))\n      .where(gte(typingSessions.completedAt, today));\n\n    // Get users by age range\n    const usersByAge = await db\n      .select({\n        ageRange: sql<string>`\n          CASE \n            WHEN ${users.age} < 20 THEN '10-19세'\n            WHEN ${users.age} < 30 THEN '20-29세'\n            WHEN ${users.age} < 40 THEN '30-39세'\n            WHEN ${users.age} < 50 THEN '40-49세'\n            WHEN ${users.age} < 60 THEN '50-59세'\n            WHEN ${users.age} >= 60 THEN '60세 이상'\n            ELSE '미등록'\n          END\n        `,\n        count: count(),\n      })\n      .from(users)\n      .groupBy(sql`\n        CASE \n          WHEN ${users.age} < 20 THEN '10-19세'\n          WHEN ${users.age} < 30 THEN '20-29세'\n          WHEN ${users.age} < 40 THEN '30-39세'\n          WHEN ${users.age} < 50 THEN '40-49세'\n          WHEN ${users.age} < 60 THEN '50-59세'\n          WHEN ${users.age} >= 60 THEN '60세 이상'\n          ELSE '미등록'\n        END\n      `)\n      .orderBy(sql`\n        CASE \n          WHEN ${users.age} < 20 THEN 1\n          WHEN ${users.age} < 30 THEN 2\n          WHEN ${users.age} < 40 THEN 3\n          WHEN ${users.age} < 50 THEN 4\n          WHEN ${users.age} < 60 THEN 5\n          WHEN ${users.age} >= 60 THEN 6\n          ELSE 7\n        END\n      `);\n\n    // Get users by region\n    const usersByRegion = await db\n      .select({\n        region: sql<string>`COALESCE(${users.region}, '미등록')`,\n        count: count(),\n      })\n      .from(users)\n      .groupBy(users.region)\n      .orderBy(desc(count()));\n\n    // Get church member stats\n    const churchMemberStats = await db\n      .select({\n        churchName: churches.name,\n        memberCount: count(users.id),\n        averageWpm: sql<number>`ROUND(AVG(${users.averageWpm}), 1)`,\n      })\n      .from(churches)\n      .leftJoin(users, eq(churches.id, users.churchId))\n      .groupBy(churches.id, churches.name)\n      .orderBy(desc(count(users.id)));\n\n    // Get recent activity (last 7 days)\n    const recentActivity = await db.execute(sql`\n      WITH date_series AS (\n        SELECT generate_series(\n          CURRENT_DATE - INTERVAL '6 days',\n          CURRENT_DATE,\n          INTERVAL '1 day'\n        )::date AS date\n      ),\n      session_counts AS (\n        SELECT \n          DATE(${typingSessions.completedAt}) as session_date,\n          COUNT(*) as sessions\n        FROM ${typingSessions}\n        WHERE ${typingSessions.completedAt} >= CURRENT_DATE - INTERVAL '6 days'\n          AND ${typingSessions.completedAt} IS NOT NULL\n        GROUP BY DATE(${typingSessions.completedAt})\n      ),\n      user_counts AS (\n        SELECT \n          DATE(${users.createdAt}) as user_date,\n          COUNT(*) as new_users\n        FROM ${users}\n        WHERE ${users.createdAt} >= CURRENT_DATE - INTERVAL '6 days'\n        GROUP BY DATE(${users.createdAt})\n      )\n      SELECT \n        ds.date::text as date,\n        COALESCE(sc.sessions, 0) as sessions,\n        COALESCE(uc.new_users, 0) as new_users\n      FROM date_series ds\n      LEFT JOIN session_counts sc ON ds.date = sc.session_date\n      LEFT JOIN user_counts uc ON ds.date = uc.user_date\n      ORDER BY ds.date\n    `);\n\n    return {\n      totalUsers: totalUsersResult.count,\n      totalChurches: totalChurchesResult.count,\n      totalTypingSessions: totalSessionsResult.count,\n      averageWpm: Math.round(((avgStatsResult.avgWpm ?? 0) as number) * 10) / 10,\n      averageAccuracy: Math.round(((avgStatsResult.avgAccuracy ?? 0) as number) * 10) / 10,\n      newUsersThisWeek: newUsersResult.count,\n      activeUsersToday: activeUsersResult.count,\n      usersByAge,\n      usersByRegion,\n      churchMemberStats: churchMemberStats.map(stat => ({\n        churchName: stat.churchName,\n        memberCount: stat.memberCount,\n        averageWpm: stat.averageWpm || 0,\n      })),\n      recentActivity: recentActivity.rows.map((row: any) => ({\n        date: row.date,\n        sessions: parseInt(row.sessions),\n        newUsers: parseInt(row.new_users),\n      })),\n    };\n  }\n\n  async makeUserAdmin(userId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const user = await this.getUser(userId);\n      if (!user) {\n        return { success: false, message: \"사용자를 찾을 수 없습니다.\" };\n      }\n\n      if (user.isAdmin) {\n        return { success: false, message: \"이미 관리자입니다.\" };\n      }\n\n      await db\n        .update(users)\n        .set({ \n          isAdmin: true, \n          updatedAt: new Date() \n        })\n        .where(eq(users.id, userId));\n\n      return { success: true, message: \"사용자가 관리자로 승격되었습니다.\" };\n    } catch (error) {\n      console.error(\"Error making user admin:\", error);\n      return { success: false, message: \"관리자 승격에 실패했습니다.\" };\n    }\n  }\n\n  async removeUserAdmin(userId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const user = await this.getUser(userId);\n      if (!user) {\n        return { success: false, message: \"사용자를 찾을 수 없습니다.\" };\n      }\n\n      if (!user.isAdmin) {\n        return { success: false, message: \"이미 일반 사용자입니다.\" };\n      }\n\n      await db\n        .update(users)\n        .set({ \n          isAdmin: false, \n          updatedAt: new Date() \n        })\n        .where(eq(users.id, userId));\n\n      return { success: true, message: \"관리자 권한이 해제되었습니다.\" };\n    } catch (error) {\n      console.error(\"Error removing user admin:\", error);\n      return { success: false, message: \"관리자 권한 해제에 실패했습니다.\" };\n    }\n  }\n\n  // Dashboard operations\n  async getUserDashboard(userId: string): Promise<{\n    user: User;\n    stats: {\n      totalWords: number;\n      averageWpm: number;\n      averageAccuracy: number;\n      totalSessions: number;\n      practiceStreak: number;\n      totalPoints: number;\n    };\n    rankings: {\n      globalRank: number;\n      churchRank: number | null;\n      totalUsers: number;\n      percentile: number;\n    };\n    recentSessions: TypingSession[];\n    achievements: Array<{\n      id: string;\n      name: string;\n      description: string;\n      icon: string;\n      unlockedAt: Date | null;\n      progress: number;\n      total: number;\n    }>;\n    weeklyProgress: Array<{\n      date: string;\n      sessions: number;\n      wordsTyped: number;\n      avgWpm: number;\n    }>;\n  }> {\n    try {\n      // Get user info\n      const user = await this.getUser(userId);\n      if (!user) {\n        throw new Error(\"User not found\");\n      }\n\n      // Get user stats\n      const stats = await this.getUserStats(userId);\n      const enhancedStats = {\n        ...stats,\n        practiceStreak: user.practiceStreak ?? 0,\n        totalPoints: user.totalPoints ?? 0,\n      };\n\n      // Get user rankings\n      const rankInfo = await this.getUserRankInfo(userId);\n      const rankings = {\n        globalRank: rankInfo.globalRank,\n        churchRank: rankInfo.churchRank,\n        totalUsers: rankInfo.totalUsers,\n        percentile: rankInfo.percentile,\n      };\n\n      // Get recent sessions (limit 5 for dashboard)\n      const recentSessions = await this.getUserTypingSessions(userId, 5);\n\n      // Get user achievements\n      const achievements = await this.getUserAchievements(userId);\n\n      // Get weekly progress (last 7 days)\n      const weeklyProgress = await this.getWeeklyProgress(userId);\n\n      return {\n        user,\n        stats: enhancedStats,\n        rankings,\n        recentSessions,\n        achievements,\n        weeklyProgress,\n      };\n    } catch (error) {\n      console.error(\"Error getting user dashboard:\", error);\n      throw error;\n    }\n  }\n\n  async getUserRecentSessions(userId: string, limit: number = 10): Promise<Array<TypingSession & {\n    bookName: string;\n    chapter: number;\n    verse: number;\n  }>> {\n    try {\n      const sessions = await db\n        .select({\n          id: typingSessions.id,\n          userId: typingSessions.userId,\n          wpm: typingSessions.wpm,\n          accuracy: typingSessions.accuracy,\n          wordsTyped: typingSessions.wordsTyped,\n          timeSpent: typingSessions.timeSpent,\n          pointsEarned: typingSessions.pointsEarned,\n          completedAt: typingSessions.completedAt,\n          verseId: typingSessions.verseId,\n          bookName: bibleBooks.bookNameKr,\n          chapter: bibleVerses.chapter,\n          verse: bibleVerses.verse,\n        })\n        .from(typingSessions)\n        .leftJoin(bibleVerses, eq(typingSessions.verseId, bibleVerses.id))\n        .leftJoin(bibleBooks, eq(bibleVerses.bookId, bibleBooks.id))\n        .where(eq(typingSessions.userId, userId))\n        .orderBy(desc(typingSessions.completedAt))\n        .limit(limit);\n\n      return sessions.map(session => ({\n        ...session,\n        bookName: session.bookName || \"알 수 없음\",\n        chapter: session.chapter || 0,\n        verse: session.verse || 0,\n      }));\n    } catch (error) {\n      console.error(\"Error getting user recent sessions:\", error);\n      return [];\n    }\n  }\n\n  async getUserProgress(userId: string): Promise<{\n    bibleProgress: Array<{\n      bookId: string;\n      bookName: string;\n      chaptersCompleted: number;\n      totalChapters: number;\n      progressPercentage: number;\n    }>;\n    dailyGoal: {\n      targetSessions: number;\n      targetWords: number;\n      currentSessions: number;\n      currentWords: number;\n    };\n    weeklyGoal: {\n      targetSessions: number;\n      targetWords: number;\n      currentSessions: number;\n      currentWords: number;\n    };\n  }> {\n    try {\n      // Get bible progress by calculating unique chapters completed per book\n      const bibleProgressQuery = await db\n        .select({\n          bookId: bibleBooks.id,\n          bookName: bibleBooks.bookNameKr,\n          chaptersCompleted: count(sql`DISTINCT ${bibleVerses.chapter}`),\n        })\n        .from(typingSessions)\n        .innerJoin(bibleVerses, eq(typingSessions.verseId, bibleVerses.id))\n        .innerJoin(bibleBooks, eq(bibleVerses.bookId, bibleBooks.id))\n        .where(eq(typingSessions.userId, userId))\n        .groupBy(bibleBooks.id, bibleBooks.bookNameKr)\n        .orderBy(bibleBooks.bookOrder);\n\n      // Get total chapters for each book (simplified assumption)\n      const totalChaptersMap: Record<string, number> = {\n        // 구약 39권\n        \"1\": 50, \"2\": 40, \"3\": 27, \"4\": 36, \"5\": 34, \"6\": 24, \"7\": 21, \"8\": 4, \"9\": 31, \"10\": 24,\n        \"11\": 22, \"12\": 25, \"13\": 29, \"14\": 36, \"15\": 10, \"16\": 13, \"17\": 10, \"18\": 42, \"19\": 150, \"20\": 31,\n        \"21\": 12, \"22\": 8, \"23\": 66, \"24\": 52, \"25\": 5, \"26\": 48, \"27\": 12, \"28\": 14, \"29\": 3, \"30\": 9,\n        \"31\": 1, \"32\": 4, \"33\": 7, \"34\": 3, \"35\": 3, \"36\": 3, \"37\": 2, \"38\": 14, \"39\": 4,\n        // 신약 27권\n        \"40\": 28, \"41\": 16, \"42\": 24, \"43\": 21, \"44\": 28, \"45\": 16, \"46\": 16, \"47\": 13, \"48\": 6, \"49\": 6,\n        \"50\": 4, \"51\": 5, \"52\": 3, \"53\": 6, \"54\": 4, \"55\": 4, \"56\": 3, \"57\": 1, \"58\": 13, \"59\": 5,\n        \"60\": 5, \"61\": 3, \"62\": 5, \"63\": 1, \"64\": 1, \"65\": 1, \"66\": 22\n      };\n\n      const bibleProgress = bibleProgressQuery.map(book => ({\n        bookId: book.bookId,\n        bookName: book.bookName,\n        chaptersCompleted: book.chaptersCompleted,\n        totalChapters: totalChaptersMap[book.bookId] || 1,\n        progressPercentage: Math.round((book.chaptersCompleted / (totalChaptersMap[book.bookId] || 1)) * 100),\n      }));\n\n      // Get daily progress (today)\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const todayEnd = new Date(today);\n      todayEnd.setHours(23, 59, 59, 999);\n\n      const dailyProgress = await db\n        .select({\n          sessions: count(typingSessions.id),\n          words: sum(typingSessions.wordsTyped),\n        })\n        .from(typingSessions)\n        .where(\n          and(\n            eq(typingSessions.userId, userId),\n            gte(typingSessions.completedAt, today),\n            lte(typingSessions.completedAt, todayEnd)\n          )\n        );\n\n      // Get weekly progress (last 7 days)\n      const weekStart = new Date();\n      weekStart.setDate(weekStart.getDate() - 7);\n      weekStart.setHours(0, 0, 0, 0);\n\n      const weeklyProgress = await db\n        .select({\n          sessions: count(typingSessions.id),\n          words: sum(typingSessions.wordsTyped),\n        })\n        .from(typingSessions)\n        .where(\n          and(\n            eq(typingSessions.userId, userId),\n            gte(typingSessions.completedAt, weekStart)\n          )\n        );\n\n      return {\n        bibleProgress,\n        dailyGoal: {\n          targetSessions: 3, // Default daily goal\n          targetWords: 500,  // Default daily goal\n          currentSessions: Number(dailyProgress[0]?.sessions) || 0,\n          currentWords: Number(dailyProgress[0]?.words) || 0,\n        },\n        weeklyGoal: {\n          targetSessions: 20, // Default weekly goal\n          targetWords: 3500, // Default weekly goal\n          currentSessions: Number(weeklyProgress[0]?.sessions) || 0,\n          currentWords: Number(weeklyProgress[0]?.words) || 0,\n        },\n      };\n    } catch (error) {\n      console.error(\"Error getting user progress:\", error);\n      return {\n        bibleProgress: [],\n        dailyGoal: { targetSessions: 3, targetWords: 500, currentSessions: 0, currentWords: 0 },\n        weeklyGoal: { targetSessions: 20, targetWords: 3500, currentSessions: 0, currentWords: 0 },\n      };\n    }\n  }\n\n  async getUserAchievements(userId: string): Promise<Array<{\n    id: string;\n    name: string;\n    description: string;\n    icon: string;\n    category: 'typing' | 'speed' | 'accuracy' | 'streak' | 'bible';\n    unlockedAt: Date | null;\n    progress: number;\n    total: number;\n    isUnlocked: boolean;\n  }>> {\n    try {\n      const user = await this.getUser(userId);\n      const stats = await this.getUserStats(userId);\n      \n      if (!user) return [];\n\n      // Define achievements\n      const achievementDefinitions = [\n        // Typing achievements\n        { id: 'first_session', name: '첫 발걸음', description: '첫 번째 연습 완료', icon: '🎯', category: 'typing' as const, target: 1, current: stats.totalSessions },\n        { id: 'sessions_10', name: '꾸준함', description: '10회 연습 완료', icon: '📚', category: 'typing' as const, target: 10, current: stats.totalSessions },\n        { id: 'sessions_50', name: '열정적', description: '50회 연습 완료', icon: '🔥', category: 'typing' as const, target: 50, current: stats.totalSessions },\n        { id: 'sessions_100', name: '헌신자', description: '100회 연습 완료', icon: '👑', category: 'typing' as const, target: 100, current: stats.totalSessions },\n        \n        // Speed achievements\n        { id: 'wpm_30', name: '속도의 기초', description: '평균 30 WPM 달성', icon: '⚡', category: 'speed' as const, target: 30, current: stats.averageWpm },\n        { id: 'wpm_50', name: '빠른 손가락', description: '평균 50 WPM 달성', icon: '🚀', category: 'speed' as const, target: 50, current: stats.averageWpm },\n        { id: 'wpm_80', name: '타자 고수', description: '평균 80 WPM 달성', icon: '⭐', category: 'speed' as const, target: 80, current: stats.averageWpm },\n        \n        // Accuracy achievements\n        { id: 'accuracy_95', name: '정확한 손', description: '평균 95% 정확도 달성', icon: '🎯', category: 'accuracy' as const, target: 95, current: stats.averageAccuracy },\n        { id: 'accuracy_98', name: '완벽주의자', description: '평균 98% 정확도 달성', icon: '💯', category: 'accuracy' as const, target: 98, current: stats.averageAccuracy },\n        \n        // Streak achievements\n        { id: 'streak_7', name: '일주일 도전', description: '7일 연속 연습', icon: '📅', category: 'streak' as const, target: 7, current: user.practiceStreak },\n        { id: 'streak_30', name: '한 달 마라톤', description: '30일 연속 연습', icon: '🏆', category: 'streak' as const, target: 30, current: user.practiceStreak },\n        \n        // Words achievements\n        { id: 'words_1000', name: '천 단어', description: '1,000 단어 입력', icon: '📝', category: 'typing' as const, target: 1000, current: stats.totalWords },\n        { id: 'words_10000', name: '만 단어', description: '10,000 단어 입력', icon: '📖', category: 'typing' as const, target: 10000, current: stats.totalWords },\n      ];\n\n      return achievementDefinitions.map(achievement => ({\n        ...achievement,\n        progress: Math.min(achievement.current ?? 0, achievement.target),\n        total: achievement.target,\n        isUnlocked: (achievement.current ?? 0) >= achievement.target,\n        unlockedAt: (achievement.current ?? 0) >= achievement.target ? new Date() : null,\n      }));\n    } catch (error) {\n      console.error(\"Error getting user achievements:\", error);\n      return [];\n    }\n  }\n\n  // Helper method for weekly progress\n  private async getWeeklyProgress(userId: string): Promise<Array<{\n    date: string;\n    sessions: number;\n    wordsTyped: number;\n    avgWpm: number;\n  }>> {\n    try {\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      \n      const weeklyData = await db\n        .select({\n          date: sql<string>`DATE(${typingSessions.completedAt})`,\n          sessions: count(typingSessions.id),\n          totalWords: sum(typingSessions.wordsTyped),\n          avgWpm: avg(typingSessions.wpm),\n        })\n        .from(typingSessions)\n        .where(\n          and(\n            eq(typingSessions.userId, userId),\n            gte(typingSessions.completedAt, weekAgo)\n          )\n        )\n        .groupBy(sql`DATE(${typingSessions.completedAt})`)\n        .orderBy(sql`DATE(${typingSessions.completedAt})`);\n\n      return weeklyData.map(day => ({\n        date: day.date,\n        sessions: Number(day.sessions),\n        wordsTyped: Number(day.totalWords) || 0,\n        avgWpm: Math.round(Number(day.avgWpm) || 0),\n      }));\n    } catch (error) {\n      console.error(\"Error getting weekly progress:\", error);\n      return [];\n    }\n  }\n\n  // Email authentication operations implementation\n  async createEmailUser(email: string, hashedPassword: string, firstName: string): Promise<User> {\n    const [newUser] = await db\n      .insert(users)\n      .values({\n        email,\n        password: hashedPassword,\n        firstName,\n        authProvider: 'email',\n        emailVerified: false, // 이메일 인증 전까지 false\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    \n    return newUser;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n    \n    return user;\n  }\n\n  async verifyUserPassword(email: string, password: string): Promise<User | undefined> {\n    const bcrypt = await import('bcrypt');\n    const user = await this.getUserByEmail(email);\n    \n    if (!user || !user.password) {\n      return undefined;\n    }\n    \n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    \n    if (!isPasswordValid) {\n      return undefined;\n    }\n    \n    // 이메일이 인증되지 않은 경우 로그인 불가\n    if (!user.emailVerified) {\n      return undefined;\n    }\n    \n    return user;\n  }\n\n  async createVerificationToken(email: string, hashedToken: string, expiresAt: Date): Promise<EmailVerificationToken> {\n    // 같은 이메일의 기존 토큰 삭제 (최신 토큰만 유효)\n    await db\n      .delete(emailVerificationTokens)\n      .where(eq(emailVerificationTokens.email, email));\n    \n    const [newToken] = await db\n      .insert(emailVerificationTokens)\n      .values({\n        email,\n        token: hashedToken, // 해시된 토큰 저장\n        expiresAt,\n        isUsed: false,\n        createdAt: new Date(),\n      })\n      .returning();\n    \n    return newToken;\n  }\n\n  async getVerificationToken(hashedToken: string): Promise<EmailVerificationToken | undefined> {\n    const [tokenRecord] = await db\n      .select()\n      .from(emailVerificationTokens)\n      .where(eq(emailVerificationTokens.token, hashedToken))\n      .limit(1);\n    \n    return tokenRecord;\n  }\n\n  async markTokenAsUsed(hashedToken: string): Promise<void> {\n    await db\n      .update(emailVerificationTokens)\n      .set({ \n        isUsed: true,\n      })\n      .where(eq(emailVerificationTokens.token, hashedToken));\n  }\n\n  async activateUserEmail(email: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        emailVerified: true,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.email, email));\n  }\n\n  async cleanupExpiredTokens(): Promise<void> {\n    const now = new Date();\n    await db\n      .delete(emailVerificationTokens)\n      .where(\n        or(\n          lte(emailVerificationTokens.expiresAt, now),\n          eq(emailVerificationTokens.isUsed, true)\n        )\n      );\n  }\n\n  // Password reset operations\n  async createPasswordResetToken(email: string, token: string, expiresAt: Date): Promise<PasswordResetToken> {\n    const crypto = await import('crypto');\n    const hashedToken = crypto.createHash('sha256').update(token).digest('hex');\n    \n    // 같은 이메일의 기존 토큰 삭제 (최신 토큰만 유효)\n    await db\n      .delete(passwordResetTokens)\n      .where(eq(passwordResetTokens.email, email));\n    \n    const [newToken] = await db\n      .insert(passwordResetTokens)\n      .values({\n        email,\n        token: hashedToken, // 해시된 토큰 저장\n        expiresAt,\n        isUsed: false,\n        createdAt: new Date(),\n      })\n      .returning();\n    \n    return newToken;\n  }\n\n  async getPasswordResetToken(token: string): Promise<PasswordResetToken | undefined> {\n    const crypto = await import('crypto');\n    const hashedToken = crypto.createHash('sha256').update(token).digest('hex');\n    \n    const [tokenRecord] = await db\n      .select()\n      .from(passwordResetTokens)\n      .where(\n        and(\n          eq(passwordResetTokens.token, hashedToken),\n          eq(passwordResetTokens.isUsed, false),\n          gte(passwordResetTokens.expiresAt, new Date())\n        )\n      );\n    \n    return tokenRecord;\n  }\n\n  async markPasswordResetTokenAsUsed(token: string): Promise<void> {\n    const crypto = await import('crypto');\n    const hashedToken = crypto.createHash('sha256').update(token).digest('hex');\n    \n    await db\n      .update(passwordResetTokens)\n      .set({ \n        isUsed: true,\n      })\n      .where(eq(passwordResetTokens.token, hashedToken));\n  }\n\n  async updateUserPassword(email: string, hashedPassword: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        password: hashedPassword,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.email, email));\n  }\n\n  async cleanupExpiredPasswordResetTokens(): Promise<void> {\n    const now = new Date();\n    await db\n      .delete(passwordResetTokens)\n      .where(\n        or(\n          lte(passwordResetTokens.expiresAt, now),\n          eq(passwordResetTokens.isUsed, true)\n        )\n      );\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":77983},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  real,\n  boolean,\n  unique,\n  foreignKey,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Email verification tokens table\nexport const emailVerificationTokens = pgTable(\"email_verification_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  token: varchar(\"token\", { length: 64 }).notNull().unique(), // 안전한 랜덤 토큰\n  expiresAt: timestamp(\"expires_at\").notNull(), // 24시간 만료\n  isUsed: boolean(\"is_used\").default(false), // 토큰 사용 여부\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  // Performance indexes\n  index(\"idx_email_verification_token\").on(table.token),\n  index(\"idx_email_verification_email\").on(table.email),\n  index(\"idx_email_verification_expires\").on(table.expiresAt),\n]);\n\n// Password reset tokens table\nexport const passwordResetTokens = pgTable(\"password_reset_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  token: varchar(\"token\", { length: 64 }).notNull().unique(), // 안전한 랜덤 토큰\n  expiresAt: timestamp(\"expires_at\").notNull(), // 1시간 만료 (보안상 짧게)\n  isUsed: boolean(\"is_used\").default(false), // 토큰 사용 여부\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  // Performance indexes\n  index(\"idx_password_reset_token\").on(table.token),\n  index(\"idx_password_reset_email\").on(table.email),\n  index(\"idx_password_reset_expires\").on(table.expiresAt),\n]);\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  password: varchar(\"password\", { length: 255 }), // 이메일 인증용 해시된 패스워드\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  age: integer(\"age\"), // 사용자 연령\n  region: varchar(\"region\", { length: 100 }), // 사용자 지역 (시/도)\n  authProvider: varchar(\"auth_provider\", { length: 50 }), // 소셜 로그인 제공업체 (google, kakao, naver, etc.)\n  authProviderId: varchar(\"auth_provider_id\", { length: 255 }), // 소셜 로그인 제공업체별 사용자 ID\n  churchId: varchar(\"church_id\"),\n  totalWords: integer(\"total_words\").default(0),\n  totalAccuracy: real(\"total_accuracy\").default(0),\n  averageWpm: real(\"average_wpm\").default(0),\n  practiceStreak: integer(\"practice_streak\").default(0),\n  totalPoints: integer(\"total_points\").default(0),\n  isAdmin: boolean(\"is_admin\").default(false), // 관리자 권한\n  \n  // 추가된 필드들 (새로운 요구사항)\n  phone: varchar(\"phone\", { length: 20 }), // 전화번호 저장\n  address: text(\"address\"), // 상세 주소 (기존 region과 별도)\n  interests: jsonb(\"interests\").$type<string[]>(), // 관심사 배열 (JSON)\n  emailVerified: boolean(\"email_verified\").default(false), // 이메일 인증 여부\n  phoneVerified: boolean(\"phone_verified\").default(false), // 전화번호 인증 여부\n  profileCompleted: boolean(\"profile_completed\").default(false), // 프로필 완성 여부\n  privacyConsent: boolean(\"privacy_consent\").default(false), // 개인정보 동의 여부\n  marketingConsent: boolean(\"marketing_consent\").default(false), // 마케팅 동의 여부 (선택)\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  // Unique constraint to prevent duplicate OAuth accounts\n  unique(\"users_auth_provider_id_unique\").on(table.authProvider, table.authProviderId),\n]);\n\n// Churches table\nexport const churches = pgTable(\"churches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  adminId: varchar(\"admin_id\").notNull(),\n  churchCode: varchar(\"church_code\", { length: 8 }).notNull().unique(), // 고유 교회 코드 (예: ABC12345)\n  totalMembers: integer(\"total_members\").default(0),\n  totalPoints: integer(\"total_points\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  // Performance indexes\n  index(\"idx_churches_code\").on(table.churchCode),\n  index(\"idx_churches_admin\").on(table.adminId),\n  // Foreign key constraint\n  foreignKey({\n    columns: [table.adminId],\n    foreignColumns: [users.id],\n  }),\n]);\n\n// Languages table\nexport const languages = pgTable(\"languages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 10 }).notNull().unique(), // ko, en, zh_CN, etc.\n  name: varchar(\"name\", { length: 100 }).notNull(), // Korean, English, etc.\n  encoding: varchar(\"encoding\", { length: 20 }), // utf-8, cp949, etc.\n  direction: varchar(\"direction\", { length: 3 }).default(\"ltr\"), // ltr or rtl\n});\n\n// Bible translations table\nexport const translations = pgTable(\"translations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 20 }).notNull().unique(), // GAE, NIV, KJV, etc.\n  name: varchar(\"name\", { length: 200 }).notNull(), // 개역성경, New International Version, etc.\n  languageId: varchar(\"language_id\").notNull(), // foreign key to languages\n  fullName: varchar(\"full_name\", { length: 300 }), // Full name of translation\n  year: integer(\"year\"), // Publication year\n  publisher: varchar(\"publisher\", { length: 200 }), // Publisher name\n}, (table) => [\n  foreignKey({\n    columns: [table.languageId],\n    foreignColumns: [languages.id],\n  }),\n]);\n\n// Bible books table\nexport const bibleBooks = pgTable(\"bible_books\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookCode: varchar(\"book_code\", { length: 20 }).notNull().unique(), // Genesis, Exodus, etc.\n  bookNameKr: varchar(\"book_name_kr\", { length: 100 }).notNull(), // 창세기, 출애굽기, etc.\n  bookNameEn: varchar(\"book_name_en\", { length: 100 }).notNull(), // Genesis, Exodus, etc.\n  bookOrder: integer(\"book_order\").notNull(), // 1, 2, 3, etc.\n  testament: varchar(\"testament\", { length: 2 }).notNull(), // OT or NT\n  chapters: integer(\"chapters\").notNull(),\n  verses: integer(\"verses\").notNull(), // Total verses in this book\n});\n\n// Bible verses table\nexport const bibleVerses = pgTable(\"bible_verses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookId: varchar(\"book_id\").notNull(),\n  translationId: varchar(\"translation_id\").notNull(), // foreign key to translations\n  languageId: varchar(\"language_id\").notNull(), // foreign key to languages\n  bookCode: varchar(\"book_code\"),\n  chapter: integer(\"chapter\").notNull(),\n  verse: integer(\"verse\").notNull(),\n  content: text(\"content\").notNull(), // The actual verse text\n}, (table) => [\n  // Data integrity: unique constraint to prevent duplicate verses\n  unique().on(table.translationId, table.bookId, table.chapter, table.verse),\n  // Performance indexes\n  index(\"idx_bible_verses_book_chapter_verse\").on(table.bookId, table.chapter, table.verse),\n  index(\"idx_bible_verses_translation\").on(table.translationId),\n  // Foreign key constraints\n  foreignKey({\n    columns: [table.bookId],\n    foreignColumns: [bibleBooks.id],\n  }),\n  foreignKey({\n    columns: [table.translationId],\n    foreignColumns: [translations.id],\n  }),\n]);\n\n// Bible dictionary table\nexport const bibleDictionary = pgTable(\"bible_dictionary\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  word: varchar(\"word\", { length: 200 }).notNull(),\n  wordEn: varchar(\"word_en\", { length: 200 }),\n  wordKo: varchar(\"word_ko\", { length: 200 }),\n  wordZh: varchar(\"word_zh\", { length: 200 }),\n  wordJa: varchar(\"word_ja\", { length: 200 }),\n  definitionKo: text(\"definition_ko\"),\n  definitionEn: text(\"definition_en\"),\n  definitionZh: text(\"definition_zh\"),\n  definitionJa: text(\"definition_ja\"),\n  category: varchar(\"category\", { length: 100 }), // person, place, concept, etc.\n  relatedVerses: text(\"related_verses\"), // JSON array of verse references\n});\n\n// Hymns table\nexport const hymns = pgTable(\"hymns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  number: integer(\"number\").notNull(), // hymn number\n  titleKo: varchar(\"title_ko\", { length: 300 }),\n  titleEn: varchar(\"title_en\", { length: 300 }),\n  titleZh: varchar(\"title_zh\", { length: 300 }),\n  titleJa: varchar(\"title_ja\", { length: 300 }),\n  lyricsKo: text(\"lyrics_ko\"),\n  lyricsEn: text(\"lyrics_en\"),\n  lyricsZh: text(\"lyrics_zh\"),\n  lyricsJa: text(\"lyrics_ja\"),\n  composer: varchar(\"composer\", { length: 200 }),\n  lyricist: varchar(\"lyricist\", { length: 200 }),\n  category: varchar(\"category\", { length: 100 }), // worship, praise, prayer, etc.\n  key: varchar(\"key\", { length: 10 }), // musical key\n  tempo: varchar(\"tempo\", { length: 50 }),\n});\n\n// Typing sessions table\nexport const typingSessions = pgTable(\"typing_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  verseId: varchar(\"verse_id\").notNull(),\n  // Removed language field - access through verse -> translation -> language relation\n  wpm: real(\"wpm\").notNull(),\n  accuracy: real(\"accuracy\").notNull(),\n  wordsTyped: integer(\"words_typed\").notNull(),\n  timeSpent: integer(\"time_spent\").notNull(), // in seconds\n  pointsEarned: integer(\"points_earned\").default(0),\n  completedAt: timestamp(\"completed_at\").defaultNow(),\n}, (table) => [\n  // Foreign key constraints\n  foreignKey({\n    columns: [table.userId],\n    foreignColumns: [users.id],\n  }),\n  foreignKey({\n    columns: [table.verseId],\n    foreignColumns: [bibleVerses.id],\n  }),\n]);\n\n// Challenges table\nexport const challenges = pgTable(\"challenges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  type: varchar(\"type\", { length: 20 }).notNull(), // daily, weekly, monthly\n  targetVerseIds: text(\"target_verse_ids\"), // JSON array of verse IDs\n  requiredAccuracy: real(\"required_accuracy\").default(95),\n  requiredWpm: real(\"required_wpm\").default(30),\n  pointsReward: integer(\"points_reward\").default(100),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  participantCount: integer(\"participant_count\").default(0),\n});\n\n// Challenge participations table\nexport const challengeParticipations = pgTable(\"challenge_participations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  challengeId: varchar(\"challenge_id\").notNull(),\n  progress: real(\"progress\").default(0), // percentage\n  isCompleted: boolean(\"is_completed\").default(false),\n  pointsEarned: integer(\"points_earned\").default(0),\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n}, (table) => [\n  unique().on(table.userId, table.challengeId)\n]);\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  church: one(churches, {\n    fields: [users.churchId],\n    references: [churches.id],\n  }),\n  typingSessions: many(typingSessions),\n  challengeParticipations: many(challengeParticipations),\n}));\n\nexport const churchesRelations = relations(churches, ({ one, many }) => ({\n  admin: one(users, {\n    fields: [churches.adminId],\n    references: [users.id],\n  }),\n  members: many(users),\n}));\n\nexport const languagesRelations = relations(languages, ({ many }) => ({\n  translations: many(translations),\n}));\n\nexport const translationsRelations = relations(translations, ({ one, many }) => ({\n  language: one(languages, {\n    fields: [translations.languageId],\n    references: [languages.id],\n  }),\n  verses: many(bibleVerses),\n}));\n\nexport const bibleBooksRelations = relations(bibleBooks, ({ many }) => ({\n  verses: many(bibleVerses),\n}));\n\nexport const bibleVersesRelations = relations(bibleVerses, ({ one, many }) => ({\n  book: one(bibleBooks, {\n    fields: [bibleVerses.bookId],\n    references: [bibleBooks.id],\n  }),\n  translation: one(translations, {\n    fields: [bibleVerses.translationId],\n    references: [translations.id],\n  }),\n  typingSessions: many(typingSessions),\n}));\n\nexport const typingSessionsRelations = relations(typingSessions, ({ one }) => ({\n  user: one(users, {\n    fields: [typingSessions.userId],\n    references: [users.id],\n  }),\n  verse: one(bibleVerses, {\n    fields: [typingSessions.verseId],\n    references: [bibleVerses.id],\n  }),\n}));\n\nexport const challengesRelations = relations(challenges, ({ many }) => ({\n  participations: many(challengeParticipations),\n}));\n\nexport const challengeParticipationsRelations = relations(challengeParticipations, ({ one }) => ({\n  user: one(users, {\n    fields: [challengeParticipations.userId],\n    references: [users.id],\n  }),\n  challenge: one(challenges, {\n    fields: [challengeParticipations.challengeId],\n    references: [challenges.id],\n  }),\n}));\n\nexport const bibleDictionaryRelations = relations(bibleDictionary, ({ one }) => ({\n  // Dictionary entries are standalone, no direct relations needed\n}));\n\nexport const hymnsRelations = relations(hymns, ({ one }) => ({\n  // Hymns are standalone, no direct relations needed\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// SECURITY: Safe user schema for authentication - only allows safe profile fields, no statistics\n// NOTE: churchId removed for security - church membership should be managed separately\nexport const safeAuthUserSchema = createInsertSchema(users).pick({\n  id: true,  // Optional for OAuth flow, required for Replit auth\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  age: true,\n  region: true,\n  authProvider: true,\n  authProviderId: true,\n  \n  // 새로 추가된 필드들 (인증과 프로필 관련)\n  phone: true,\n  address: true,\n  interests: true,\n  emailVerified: true,\n  phoneVerified: true,\n  profileCompleted: true,\n  privacyConsent: true,\n  marketingConsent: true,\n}).partial(); // All fields optional to support flexible OAuth scenarios\n\nexport const insertChurchSchema = createInsertSchema(churches).omit({\n  id: true,\n  createdAt: true,\n  totalMembers: true,\n  totalPoints: true,\n  churchCode: true, // 교회 코드는 서버에서 자동 생성\n});\n\nexport const insertTypingSessionSchema = createInsertSchema(typingSessions).omit({\n  id: true,\n  completedAt: true,\n});\n\nexport const insertChallengeParticipationSchema = createInsertSchema(challengeParticipations).omit({\n  id: true,\n  joinedAt: true,\n  completedAt: true,\n});\n\nexport const insertBibleDictionarySchema = createInsertSchema(bibleDictionary).omit({\n  id: true,\n});\n\nexport const insertHymnSchema = createInsertSchema(hymns).omit({\n  id: true,\n});\n\nexport const insertLanguageSchema = createInsertSchema(languages).omit({\n  id: true,\n});\n\nexport const insertTranslationSchema = createInsertSchema(translations).omit({\n  id: true,\n});\n\nexport const insertBibleBookSchema = createInsertSchema(bibleBooks).omit({\n  id: true,\n});\n\nexport const insertBibleVerseSchema = createInsertSchema(bibleVerses).omit({\n  id: true,\n});\n\nexport const insertEmailVerificationTokenSchema = createInsertSchema(emailVerificationTokens).omit({\n  id: true,\n  createdAt: true,\n  isUsed: true, // 서버에서 관리\n});\n\nexport const insertPasswordResetTokenSchema = createInsertSchema(passwordResetTokens).omit({\n  id: true,\n  createdAt: true,\n  isUsed: true, // 서버에서 관리\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type SafeAuthUser = z.infer<typeof safeAuthUserSchema>;\nexport type Church = typeof churches.$inferSelect;\nexport type InsertChurch = z.infer<typeof insertChurchSchema>;\nexport type BibleBook = typeof bibleBooks.$inferSelect;\nexport type BibleVerse = typeof bibleVerses.$inferSelect;\nexport type TypingSession = typeof typingSessions.$inferSelect;\nexport type InsertTypingSession = z.infer<typeof insertTypingSessionSchema>;\nexport type Challenge = typeof challenges.$inferSelect;\nexport type ChallengeParticipation = typeof challengeParticipations.$inferSelect;\nexport type InsertChallengeParticipation = z.infer<typeof insertChallengeParticipationSchema>;\nexport type BibleDictionary = typeof bibleDictionary.$inferSelect;\nexport type InsertBibleDictionary = z.infer<typeof insertBibleDictionarySchema>;\nexport type Hymn = typeof hymns.$inferSelect;\nexport type InsertHymn = z.infer<typeof insertHymnSchema>;\nexport type Language = typeof languages.$inferSelect;\nexport type InsertLanguage = z.infer<typeof insertLanguageSchema>;\nexport type Translation = typeof translations.$inferSelect;\nexport type InsertTranslation = z.infer<typeof insertTranslationSchema>;\nexport type InsertBibleBook = z.infer<typeof insertBibleBookSchema>;\nexport type InsertBibleVerse = z.infer<typeof insertBibleVerseSchema>;\nexport type EmailVerificationToken = typeof emailVerificationTokens.$inferSelect;\nexport type InsertEmailVerificationToken = z.infer<typeof insertEmailVerificationTokenSchema>;\nexport type PasswordResetToken = typeof passwordResetTokens.$inferSelect;\nexport type InsertPasswordResetToken = z.infer<typeof insertPasswordResetTokenSchema>;\n","size_bytes":17812},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Practice from \"@/pages/practice\";\nimport Leaderboard from \"@/pages/leaderboard\";\nimport Challenges from \"@/pages/challenges\";\nimport Profile from \"@/pages/profile\";\nimport Churches from \"@/pages/churches\";\nimport ChurchDetail from \"@/pages/church-detail\";\nimport ChurchRegister from \"@/pages/church-register\";\nimport CompleteProfile from \"@/pages/complete-profile\";\nimport VerifyEmail from \"@/pages/verify-email\";\nimport ForgotPassword from \"@/pages/forgot-password\";\nimport ResetPassword from \"@/pages/reset-password\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport Header from \"@/components/header\";\nimport { useEffect } from \"react\";\nimport type { User } from \"@shared/schema\";\n\nfunction Router() {\n  const authData = useAuth();\n  const { user, isAuthenticated, isLoading } = authData;\n  const [location, navigate] = useLocation();\n\n  // 로그인한 사용자의 프로필 완성 상태 확인\n  useEffect(() => {\n    if (isAuthenticated && user && location !== \"/complete-profile\") {\n      const typedUser = user as User;\n      \n      // 프로필 완성 상태 확인 (profileCompleted 플래그를 우선적으로 확인)\n      const isProfileIncomplete = !typedUser.profileCompleted;\n\n      if (isProfileIncomplete) {\n        navigate(\"/complete-profile\");\n      }\n    }\n  }, [isAuthenticated, user, location, navigate]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* complete-profile, verify-email, forgot-password, reset-password 페이지에서는 헤더 숨김 */}\n      {(() => {\n        const pathsToHideHeader = [\"/complete-profile\", \"/verify-email\", \"/forgot-password\", \"/reset-password\"];\n        const shouldHideHeader = pathsToHideHeader.some(path => location.startsWith(path));\n        return !shouldHideHeader && <Header />;\n      })()}\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/practice\" component={Practice} />\n        <Route path=\"/leaderboard\" component={Leaderboard} />\n        <Route path=\"/challenges\" component={Challenges} />\n        <Route path=\"/churches/register\" component={ChurchRegister} />\n        <Route path=\"/churches/:id\" component={ChurchDetail} />\n        <Route path=\"/churches\" component={Churches} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/complete-profile\" component={CompleteProfile} />\n        <Route path=\"/verify-email\" component={VerifyEmail} />\n        <Route path=\"/forgot-password\" component={ForgotPassword} />\n        <Route path=\"/reset-password\" component={ResetPassword} />\n        <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3653},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Noto+Serif+KR:wght@400;500;600;700&family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(42, 47%, 97%);\n  --foreground: hsl(30, 27%, 25%);\n  --card: hsl(45, 43%, 95%);\n  --card-foreground: hsl(30, 27%, 25%);\n  --popover: hsl(45, 43%, 95%);\n  --popover-foreground: hsl(30, 27%, 25%);\n  --primary: hsl(43, 74%, 45%);\n  --primary-foreground: hsl(45, 43%, 95%);\n  --secondary: hsl(40, 31%, 87%);\n  --secondary-foreground: hsl(30, 27%, 35%);\n  --muted: hsl(42, 32%, 92%);\n  --muted-foreground: hsl(30, 15%, 45%);\n  --accent: hsl(43, 74%, 45%);\n  --accent-foreground: hsl(45, 43%, 95%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(40, 18%, 82%);\n  --input: hsl(40, 18%, 82%);\n  --ring: hsl(43, 74%, 45%);\n  --radius: 0.75rem;\n  --chart-1: hsl(43, 74%, 45%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(45, 43%, 95%);\n  --sidebar-foreground: hsl(30, 27%, 25%);\n  --sidebar-primary: hsl(43, 74%, 45%);\n  --sidebar-primary-foreground: hsl(45, 43%, 95%);\n  --sidebar-accent: hsl(43, 74%, 45%);\n  --sidebar-accent-foreground: hsl(45, 43%, 95%);\n  --sidebar-border: hsl(40, 18%, 82%);\n  --sidebar-ring: hsl(43, 74%, 45%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: \"Noto Serif KR\", serif;\n  --font-mono: \"JetBrains Mono\", monospace;\n  --shadow-2xs: 0px 1px 2px 0px hsl(30, 27%, 25%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(30, 27%, 25%, 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(30, 27%, 25%, 0.1), 0px 1px 2px 0px hsl(30, 27%, 25%, 0.06);\n  --shadow: 0px 1px 3px 0px hsl(30, 27%, 25%, 0.1), 0px 1px 2px 0px hsl(30, 27%, 25%, 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(30, 27%, 25%, 0.1), 0px 2px 4px -1px hsl(30, 27%, 25%, 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(30, 27%, 25%, 0.1), 0px 4px 6px -2px hsl(30, 27%, 25%, 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(30, 27%, 25%, 0.1), 0px 10px 10px -5px hsl(30, 27%, 25%, 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(30, 27%, 25%, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(30, 27%, 15%);\n  --foreground: hsl(42, 47%, 90%);\n  --card: hsl(30, 27%, 18%);\n  --card-foreground: hsl(42, 47%, 90%);\n  --popover: hsl(30, 27%, 18%);\n  --popover-foreground: hsl(42, 47%, 90%);\n  --primary: hsl(43, 74%, 55%);\n  --primary-foreground: hsl(30, 27%, 15%);\n  --secondary: hsl(30, 27%, 25%);\n  --secondary-foreground: hsl(42, 47%, 90%);\n  --muted: hsl(30, 27%, 22%);\n  --muted-foreground: hsl(42, 20%, 65%);\n  --accent: hsl(43, 74%, 55%);\n  --accent-foreground: hsl(30, 27%, 15%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(30, 20%, 30%);\n  --input: hsl(30, 20%, 30%);\n  --ring: hsl(43, 74%, 55%);\n  --chart-1: hsl(43, 74%, 55%);\n  --chart-2: hsl(159, 100%, 46%);\n  --chart-3: hsl(42, 93%, 66%);\n  --chart-4: hsl(147, 79%, 52%);\n  --chart-5: hsl(341, 75%, 61%);\n  --sidebar: hsl(30, 27%, 18%);\n  --sidebar-foreground: hsl(42, 47%, 90%);\n  --sidebar-primary: hsl(43, 74%, 55%);\n  --sidebar-primary-foreground: hsl(30, 27%, 15%);\n  --sidebar-accent: hsl(43, 74%, 55%);\n  --sidebar-accent-foreground: hsl(30, 27%, 15%);\n  --sidebar-border: hsl(30, 20%, 30%);\n  --sidebar-ring: hsl(43, 74%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-serif antialiased bg-background text-foreground;\n    background-image: \n      radial-gradient(circle at 25% 25%, hsl(45, 43%, 98%) 0%, transparent 50%),\n      radial-gradient(circle at 75% 75%, hsl(42, 47%, 96%) 0%, transparent 50%);\n  }\n\n  .dark body {\n    background-image: \n      radial-gradient(circle at 25% 25%, hsl(30, 27%, 20%) 0%, transparent 50%),\n      radial-gradient(circle at 75% 75%, hsl(30, 27%, 18%) 0%, transparent 50%);\n  }\n}\n\n@layer components {\n  /* Bible Book Styling */\n  .bible-book {\n    background: linear-gradient(\n      145deg,\n      hsl(45, 43%, 96%) 0%,\n      hsl(42, 40%, 94%) 50%,\n      hsl(40, 35%, 92%) 100%\n    );\n    box-shadow: \n      0 8px 32px rgba(0, 0, 0, 0.1),\n      0 4px 16px rgba(0, 0, 0, 0.05),\n      inset 0 1px 0 rgba(255, 255, 255, 0.7);\n    border: 2px solid hsl(35, 30%, 85%);\n    position: relative;\n  }\n  \n  .bible-book::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: \n      radial-gradient(circle at 25% 25%, rgba(212, 175, 55, 0.03) 0%, transparent 50%),\n      radial-gradient(circle at 75% 75%, rgba(139, 69, 19, 0.02) 0%, transparent 50%),\n      linear-gradient(90deg, transparent 48%, rgba(139, 69, 19, 0.02) 49%, rgba(139, 69, 19, 0.02) 51%, transparent 52%);\n    pointer-events: none;\n    border-radius: inherit;\n  }\n  \n  .dark .bible-book {\n    background: linear-gradient(\n      145deg,\n      hsl(30, 27%, 22%) 0%,\n      hsl(30, 25%, 20%) 50%,\n      hsl(30, 23%, 18%) 100%\n    );\n    border: 2px solid hsl(30, 20%, 25%);\n  }\n  \n  .bible-page {\n    background: linear-gradient(\n      to bottom,\n      hsl(45, 50%, 98%) 0%,\n      hsl(42, 45%, 96%) 100%\n    );\n    border: 1px solid hsl(40, 25%, 88%);\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .bible-page::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: \n      repeating-linear-gradient(\n        0deg,\n        transparent,\n        transparent 23px,\n        rgba(200, 180, 140, 0.05) 24px,\n        rgba(200, 180, 140, 0.05) 25px\n      );\n    pointer-events: none;\n  }\n  \n  .dark .bible-page {\n    background: linear-gradient(\n      to bottom,\n      hsl(30, 27%, 25%) 0%,\n      hsl(30, 25%, 23%) 100%\n    );\n    border: 1px solid hsl(30, 20%, 30%);\n  }\n  \n  .bible-binding {\n    background: linear-gradient(\n      to bottom,\n      hsl(35, 40%, 75%) 0%,\n      hsl(30, 35%, 65%) 50%,\n      hsl(25, 30%, 55%) 100%\n    );\n    box-shadow: \n      inset 2px 0 4px rgba(0, 0, 0, 0.2),\n      inset -2px 0 4px rgba(0, 0, 0, 0.2),\n      0 0 8px rgba(0, 0, 0, 0.1);\n    position: relative;\n  }\n  \n  .bible-binding::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 50%;\n    bottom: 0;\n    width: 1px;\n    background: linear-gradient(\n      to bottom,\n      transparent 0%,\n      rgba(0, 0, 0, 0.2) 50%,\n      transparent 100%\n    );\n    transform: translateX(-50%);\n  }\n  \n  .dark .bible-binding {\n    background: linear-gradient(\n      to bottom,\n      hsl(30, 20%, 35%) 0%,\n      hsl(30, 18%, 30%) 50%,\n      hsl(30, 16%, 25%) 100%\n    );\n  }\n  \n  .chapter-header {\n    @apply font-serif font-bold text-amber-800 dark:text-amber-200 mb-4 pb-2;\n    border-bottom: 2px solid hsl(43, 74%, 45%);\n    position: relative;\n  }\n  \n  .chapter-header::after {\n    content: '';\n    position: absolute;\n    bottom: -2px;\n    left: 0;\n    right: 0;\n    height: 1px;\n    background: linear-gradient(\n      to right,\n      transparent 0%,\n      hsl(43, 74%, 65%) 50%,\n      transparent 100%\n    );\n  }\n  \n  .verse-line {\n    @apply mb-3;\n    line-height: 1.6;\n  }\n  \n  .verse-number {\n    @apply font-serif font-bold text-amber-700 dark:text-amber-300;\n    font-size: 0.8rem;\n    vertical-align: super;\n    line-height: 1;\n  }\n  \n  .bible-texture {\n    background-image: \n      radial-gradient(circle at 30% 30%, rgba(212, 175, 55, 0.05) 0%, transparent 50%),\n      linear-gradient(45deg, transparent 49%, rgba(139, 69, 19, 0.02) 50%, transparent 51%);\n  }\n  \n  .typing-correct {\n    @apply bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200;\n  }\n  \n  .typing-incorrect {\n    @apply bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200;\n  }\n  \n  .typing-cursor {\n    @apply border-l-2 border-primary;\n  }\n\n  /* Bible Book Styles */\n  .bible-book {\n    background: linear-gradient(135deg, \n      hsl(45, 43%, 98%) 0%, \n      hsl(42, 47%, 96%) 30%, \n      hsl(40, 35%, 94%) 100%);\n    box-shadow: \n      0 10px 25px -5px rgba(139, 69, 19, 0.25),\n      0 4px 6px -2px rgba(139, 69, 19, 0.1),\n      inset 0 1px 0 rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(139, 69, 19, 0.2);\n  }\n\n  .dark .bible-book {\n    background: linear-gradient(135deg, \n      hsl(30, 27%, 20%) 0%, \n      hsl(30, 27%, 18%) 30%, \n      hsl(30, 27%, 16%) 100%);\n    box-shadow: \n      0 10px 25px -5px rgba(0, 0, 0, 0.5),\n      0 4px 6px -2px rgba(0, 0, 0, 0.3),\n      inset 0 1px 0 rgba(255, 255, 255, 0.05);\n    border: 1px solid rgba(139, 69, 19, 0.3);\n  }\n\n  .bible-page {\n    background: \n      radial-gradient(circle at 20% 20%, rgba(212, 175, 55, 0.03) 0%, transparent 40%),\n      radial-gradient(circle at 80% 80%, rgba(139, 69, 19, 0.02) 0%, transparent 40%),\n      linear-gradient(90deg, transparent 0%, rgba(139, 69, 19, 0.01) 50%, transparent 100%);\n    border-right: 1px solid rgba(139, 69, 19, 0.1);\n  }\n\n  .dark .bible-page {\n    background: \n      radial-gradient(circle at 20% 20%, rgba(212, 175, 55, 0.05) 0%, transparent 40%),\n      radial-gradient(circle at 80% 80%, rgba(139, 69, 19, 0.03) 0%, transparent 40%),\n      linear-gradient(90deg, transparent 0%, rgba(139, 69, 19, 0.02) 50%, transparent 100%);\n    border-right: 1px solid rgba(139, 69, 19, 0.2);\n  }\n\n  .bible-binding {\n    background: linear-gradient(to right, \n      transparent 0%, \n      rgba(139, 69, 19, 0.1) 30%, \n      rgba(139, 69, 19, 0.15) 50%, \n      rgba(139, 69, 19, 0.1) 70%, \n      transparent 100%);\n    box-shadow: \n      inset 2px 0 4px rgba(139, 69, 19, 0.2),\n      inset -2px 0 4px rgba(139, 69, 19, 0.2);\n  }\n\n  .dark .bible-binding {\n    background: linear-gradient(to right, \n      transparent 0%, \n      rgba(139, 69, 19, 0.2) 30%, \n      rgba(139, 69, 19, 0.3) 50%, \n      rgba(139, 69, 19, 0.2) 70%, \n      transparent 100%);\n  }\n\n  .verse-clickable {\n    @apply cursor-pointer rounded px-1;\n  }\n\n  .verse-selected {\n    @apply bg-amber-100 dark:bg-amber-900/50 border-l-2 border-amber-500 pl-1;\n  }\n\n  .chapter-header {\n    @apply text-center font-serif font-bold text-lg text-amber-800 dark:text-amber-200 mb-4 pb-2 border-b border-amber-200 dark:border-amber-800;\n  }\n}\n","size_bytes":10203},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link, useLocation } from \"wouter\";\nimport { BookOpen, Trophy, Calendar, User, Menu, Users, Shield, BarChart3 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport AuthModal from \"@/components/AuthModal\";\nimport SignupModal from \"@/components/SignupModal\";\n\nexport default function Header() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);\n  const [isSignupModalOpen, setIsSignupModalOpen] = useState(false);\n\n  const navItems = [\n    { path: \"/dashboard\", label: \"대시보드\", icon: BarChart3 },\n    { path: \"/practice\", label: \"필사하기\", icon: BookOpen },\n    { path: \"/leaderboard\", label: \"리더보드\", icon: Trophy },\n    { path: \"/challenges\", label: \"챌린지\", icon: Calendar },\n    { path: \"/churches\", label: \"교회\", icon: Users },\n    { path: \"/profile\", label: \"프로필\", icon: User },\n  ];\n\n  // Add admin menu item if user is admin\n  const adminNavItems = [\n    ...navItems,\n    ...(isAuthenticated && (user as any)?.isAdmin ? [\n      { path: \"/admin/dashboard\", label: \"관리자\", icon: Shield }\n    ] : [])\n  ];\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container flex h-16 items-center justify-between px-4 mx-auto max-w-7xl\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n            <BookOpen className=\"h-6 w-6 text-primary\" />\n            <h1 className=\"text-xl font-bold text-foreground\">홀리넷 성경필사</h1>\n          </Link>\n          \n          {isAuthenticated && (\n            <nav className=\"hidden md:flex items-center space-x-6 ml-8\">\n              {adminNavItems.map((item) => {\n                const Icon = item.icon;\n                const isAdminItem = item.label === \"관리자\";\n                return (\n                  <Link\n                    key={item.path}\n                    href={item.path}\n                    className={`text-sm font-medium transition-colors hover:text-foreground flex items-center space-x-1 ${\n                      isActive(item.path) ? \"text-primary\" : \"text-muted-foreground\"\n                    } ${isAdminItem ? \"text-orange-600 hover:text-orange-700\" : \"\"}`}\n                    data-testid={`link-${item.label.toLowerCase()}`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    <span>{item.label}</span>\n                  </Link>\n                );\n              })}\n            </nav>\n          )}\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          {!isAuthenticated ? (\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                variant=\"outline\"\n                onClick={() => setIsLoginModalOpen(true)} \n                className=\"border-primary text-primary hover:bg-primary hover:text-primary-foreground\" \n                data-testid=\"button-login\"\n              >\n                로그인\n              </Button>\n              <Button \n                onClick={() => setIsSignupModalOpen(true)} \n                className=\"bg-primary hover:bg-primary/90 text-primary-foreground\" \n                data-testid=\"button-signup\"\n              >\n                회원가입\n              </Button>\n            </div>\n          ) : (\n            <>\n              <div className=\"hidden md:flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">\n                  {(user as any)?.firstName || (user as any)?.email}님\n                </span>\n                <a href=\"/api/logout\">\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-logout\">\n                    로그아웃\n                  </Button>\n                </a>\n              </div>\n              \n              {/* Mobile Menu */}\n              <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden\" data-testid=\"button-mobile-menu\">\n                    <Menu className=\"h-5 w-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-[250px]\">\n                  <SheetHeader>\n                    <SheetTitle className=\"text-left\">메뉴</SheetTitle>\n                  </SheetHeader>\n                  <nav className=\"flex flex-col space-y-4 mt-8\">\n                    {adminNavItems.map((item) => {\n                      const Icon = item.icon;\n                      const isAdminItem = item.label === \"관리자\";\n                      return (\n                        <Link\n                          key={item.path}\n                          href={item.path}\n                          onClick={() => setMobileMenuOpen(false)}\n                          className={`flex items-center space-x-2 text-sm font-medium transition-colors hover:text-foreground p-2 rounded-md ${\n                            isActive(item.path) \n                              ? \"text-primary bg-primary/10\" \n                              : \"text-muted-foreground hover:bg-accent\"\n                          } ${isAdminItem ? \"text-orange-600 hover:text-orange-700 border border-orange-200\" : \"\"}`}\n                          data-testid={`mobile-link-${item.label.toLowerCase()}`}\n                        >\n                          <Icon className=\"h-4 w-4\" />\n                          <span>{item.label}</span>\n                        </Link>\n                      );\n                    })}\n                    <div className=\"border-t pt-4\">\n                      <div className=\"text-sm text-muted-foreground mb-2\">\n                        {(user as any)?.firstName || (user as any)?.email}님\n                      </div>\n                      <a href=\"/api/logout\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"mobile-button-logout\">\n                          로그아웃\n                        </Button>\n                      </a>\n                    </div>\n                  </nav>\n                </SheetContent>\n              </Sheet>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* 로그인 모달 */}\n      <AuthModal \n        open={isLoginModalOpen} \n        onOpenChange={setIsLoginModalOpen}\n        onSwitchToSignup={() => {\n          setIsLoginModalOpen(false);\n          setIsSignupModalOpen(true);\n        }}\n      />\n      \n      {/* 회원가입 모달 */}\n      <SignupModal \n        open={isSignupModalOpen} \n        onOpenChange={setIsSignupModalOpen}\n        onSwitchToLogin={() => {\n          setIsSignupModalOpen(false);\n          setIsLoginModalOpen(true);\n        }}\n      />\n    </header>\n  );\n}\n","size_bytes":7269},"client/src/components/stats-display.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { TrendingUp, Target, Clock, Award } from \"lucide-react\";\n\ninterface StatsDisplayProps {\n  stats: {\n    totalWords: number;\n    averageWpm: number;\n    averageAccuracy: number;\n    totalSessions: number;\n  } | undefined;\n}\n\nexport default function StatsDisplay({ stats }: StatsDisplayProps) {\n  if (!stats) {\n    return (\n      <div className=\"grid grid-cols-2 gap-4\">\n        {[1, 2, 3, 4].map((i) => (\n          <div key={i} className=\"p-3 bg-muted/30 rounded-lg\">\n            <div className=\"h-4 bg-muted rounded animate-pulse mb-2\"></div>\n            <div className=\"h-6 bg-muted rounded animate-pulse\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  const statItems = [\n    {\n      icon: TrendingUp,\n      label: \"평균 속도\",\n      value: `${Math.round(stats.averageWpm)} WPM`,\n      color: \"text-blue-500\",\n    },\n    {\n      icon: Target,\n      label: \"평균 정확도\",\n      value: `${Math.round(stats.averageAccuracy)}%`,\n      color: \"text-green-500\",\n    },\n    {\n      icon: Award,\n      label: \"총 단어\",\n      value: stats.totalWords.toLocaleString(),\n      color: \"text-yellow-500\",\n    },\n    {\n      icon: Clock,\n      label: \"총 세션\",\n      value: stats.totalSessions.toString(),\n      color: \"text-purple-500\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-2 gap-3\">\n      {statItems.map((item, index) => {\n        const Icon = item.icon;\n        return (\n          <div key={item.label} className=\"p-3 bg-muted/30 rounded-lg\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              <Icon className={`h-4 w-4 ${item.color}`} />\n              <span className=\"text-xs text-muted-foreground\">{item.label}</span>\n            </div>\n            <div className=\"font-semibold text-foreground\" data-testid={`stat-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {item.value}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2008},"client/src/components/typing-practice.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { RotateCcw, CheckCircle } from \"lucide-react\";\nimport type { BibleVerse } from \"@shared/schema\";\n\ninterface TypingPracticeProps {\n  verse: BibleVerse;\n  language: string;\n  bookName: string;\n  onComplete: (wpm: number, accuracy: number, wordsTyped: number, timeSpent: number) => void;\n}\n\nconst languageOptions = [\n  { code: \"ko\", name: \"한국어\", field: \"textKo\" },\n  { code: \"en\", name: \"English\", field: \"textEn\" },\n  { code: \"zh\", name: \"中文\", field: \"textZh\" },\n  { code: \"ja\", name: \"日本語\", field: \"textJa\" },\n];\n\nexport default function TypingPractice({ verse, language, bookName, onComplete }: TypingPracticeProps) {\n  const [userInput, setUserInput] = useState(\"\");\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [currentWpm, setCurrentWpm] = useState(0);\n  const [currentAccuracy, setCurrentAccuracy] = useState(100);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const getText = () => {\n    // All translations use the 'content' field from the database\n    return verse.content || \"\";\n  };\n\n  const targetText = getText();\n  const progress = targetText ? (userInput.length / targetText.length) * 100 : 0;\n\n  const calculateStats = useCallback(() => {\n    if (!targetText || !startTime) return { wpm: 0, accuracy: 100 };\n\n    const timeElapsed = (Date.now() - startTime) / 1000 / 60; // minutes\n    const wordsTyped = userInput.length / 5; // standard word length\n    const wpm = timeElapsed > 0 ? Math.round(wordsTyped / timeElapsed) : 0;\n\n    let correctChars = 0;\n    for (let i = 0; i < userInput.length; i++) {\n      if (i < targetText.length && userInput[i] === targetText[i]) {\n        correctChars++;\n      }\n    }\n    const accuracy = userInput.length > 0 ? Math.round((correctChars / userInput.length) * 100) : 100;\n\n    return { wpm, accuracy };\n  }, [userInput, targetText, startTime]);\n\n  useEffect(() => {\n    const stats = calculateStats();\n    setCurrentWpm(stats.wpm);\n    setCurrentAccuracy(stats.accuracy);\n  }, [calculateStats]);\n\n  useEffect(() => {\n    if (userInput === targetText && targetText && !isCompleted) {\n      setIsCompleted(true);\n      const timeSpent = startTime ? Math.round((Date.now() - startTime) / 1000) : 0;\n      const stats = calculateStats();\n      const wordsTyped = Math.round(userInput.length / 5);\n      onComplete(stats.wpm, stats.accuracy, wordsTyped, timeSpent);\n    }\n  }, [userInput, targetText, isCompleted, startTime, calculateStats, onComplete]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    \n    if (!startTime) {\n      setStartTime(Date.now());\n    }\n\n    // Prevent typing beyond target text length\n    if (value.length <= targetText.length) {\n      setUserInput(value);\n    }\n  };\n\n  const handleReset = () => {\n    setUserInput(\"\");\n    setStartTime(null);\n    setIsCompleted(false);\n    setCurrentWpm(0);\n    setCurrentAccuracy(100);\n    textareaRef.current?.focus();\n  };\n\n  const renderTextWithHighlight = () => {\n    if (!targetText) return null;\n\n    return (\n      <div className=\"font-mono text-lg leading-relaxed p-4 bg-muted/30 rounded-lg border min-h-[120px]\" data-testid=\"text-target\">\n        {targetText.split('').map((char: string, index: number) => {\n          let className = \"\";\n          \n          if (index < userInput.length) {\n            className = userInput[index] === char ? \"typing-correct\" : \"typing-incorrect\";\n          } else if (index === userInput.length) {\n            className = \"typing-cursor\";\n          }\n          \n          return (\n            <span key={index} className={className}>\n              {char}\n            </span>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Verse Header */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-2xl font-bold text-foreground\">\n                {bookName} {verse.chapter}:{verse.verse}\n              </CardTitle>\n              <Badge variant=\"secondary\" className=\"mt-2\">\n                {languageOptions.find(l => l.code === language)?.name}\n              </Badge>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleReset}\n              disabled={!userInput}\n              data-testid=\"button-reset\"\n            >\n              <RotateCcw className=\"h-4 w-4 mr-2\" />\n              다시 시작\n            </Button>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Progress */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">진행률</span>\n              <span className=\"font-medium text-foreground\">{Math.round(progress)}%</span>\n            </div>\n            <Progress value={progress} className=\"h-2\" />\n            \n            <div className=\"grid grid-cols-2 gap-4 text-center\">\n              <div className=\"space-y-1\">\n                <div className=\"text-2xl font-bold text-primary\" data-testid=\"stat-wpm\">\n                  {currentWpm}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">WPM</div>\n              </div>\n              <div className=\"space-y-1\">\n                <div className=\"text-2xl font-bold text-accent\" data-testid=\"stat-accuracy\">\n                  {currentAccuracy}%\n                </div>\n                <div className=\"text-sm text-muted-foreground\">정확도</div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Typing Area */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            필사 영역\n            {isCompleted && (\n              <CheckCircle className=\"h-5 w-5 ml-2 text-green-500\" />\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Target Text */}\n          <div>\n            <h4 className=\"text-sm font-medium text-foreground mb-2\">대상 텍스트:</h4>\n            {renderTextWithHighlight()}\n          </div>\n\n          <Separator />\n\n          {/* Input Area */}\n          <div>\n            <h4 className=\"text-sm font-medium text-foreground mb-2\">여기에 타이핑하세요:</h4>\n            <textarea\n              ref={textareaRef}\n              value={userInput}\n              onChange={handleInputChange}\n              className=\"w-full h-32 p-4 border border-input rounded-lg bg-background text-foreground font-mono text-lg resize-none focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n              placeholder=\"위 텍스트를 정확히 입력하세요...\"\n              disabled={isCompleted}\n              autoFocus\n              data-testid=\"textarea-input\"\n            />\n          </div>\n\n          {isCompleted && (\n            <div className=\"p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg\">\n              <div className=\"flex items-center space-x-2 text-green-800 dark:text-green-200\">\n                <CheckCircle className=\"h-5 w-5\" />\n                <span className=\"font-medium\">완료!</span>\n              </div>\n              <p className=\"text-sm text-green-700 dark:text-green-300 mt-1\">\n                성경 필사를 완료하셨습니다. 결과가 자동으로 저장됩니다.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8088},"client/src/data/bible-verses.ts":{"content":"// Sample Bible verses data for initial population\n// This should be used to seed the database with actual Bible content\n\nexport interface BibleVerseData {\n  book: string;\n  bookKo: string;\n  bookEn: string;\n  bookZh?: string;\n  bookJa?: string;\n  testament: 'OT' | 'NT';\n  bookNumber: number;\n  chapter: number;\n  verse: number;\n  textKo: string;\n  textEn: string;\n  textZh?: string;\n  textJa?: string;\n  version?: string;\n}\n\nexport const sampleBibleVerses: BibleVerseData[] = [\n  // Genesis\n  {\n    book: \"Genesis\",\n    bookKo: \"창세기\",\n    bookEn: \"Genesis\",\n    bookZh: \"創世記\",\n    bookJa: \"創世記\",\n    testament: \"OT\",\n    bookNumber: 1,\n    chapter: 1,\n    verse: 1,\n    textKo: \"태초에 하나님이 천지를 창조하시니라\",\n    textEn: \"In the beginning God created the heavens and the earth.\",\n    textZh: \"起初，神创造天地。\",\n    textJa: \"はじめに神は天と地とを創造された。\",\n    version: \"NIV\"\n  },\n  {\n    book: \"Genesis\",\n    bookKo: \"창세기\",\n    bookEn: \"Genesis\",\n    testament: \"OT\",\n    bookNumber: 1,\n    chapter: 1,\n    verse: 3,\n    textKo: \"하나님이 이르시되 빛이 있으라 하시니 빛이 있었고\",\n    textEn: \"And God said, \\\"Let there be light,\\\" and there was light.\",\n    textZh: \"神说：要有光，就有了光。\",\n    textJa: \"神は「光あれ」と言われた。すると光があった。\",\n    version: \"NIV\"\n  },\n  \n  // Psalms\n  {\n    book: \"Psalms\",\n    bookKo: \"시편\",\n    bookEn: \"Psalms\",\n    bookZh: \"詩篇\",\n    bookJa: \"詩篇\",\n    testament: \"OT\",\n    bookNumber: 19,\n    chapter: 23,\n    verse: 1,\n    textKo: \"여호와는 나의 목자시니 내게 부족함이 없으리로다\",\n    textEn: \"The Lord is my shepherd, I lack nothing.\",\n    textZh: \"耶和华是我的牧者，我必不致缺乏。\",\n    textJa: \"主はわたしの羊飼い、わたしには何も欠けることがない。\",\n    version: \"NIV\"\n  },\n  {\n    book: \"Psalms\",\n    bookKo: \"시편\",\n    bookEn: \"Psalms\",\n    testament: \"OT\",\n    bookNumber: 19,\n    chapter: 23,\n    verse: 2,\n    textKo: \"그가 나를 푸른 풀밭에 누이시며 쉴 만한 물 가로 인도하시는도다\",\n    textEn: \"He makes me lie down in green pastures, he leads me beside quiet waters,\",\n    textZh: \"他使我躺卧在青草地上，领我在可安歇的水边。\",\n    textJa: \"主はわたしを青草の原に休ませ、憩いの水のほとりに伴い\",\n    version: \"NIV\"\n  },\n  {\n    book: \"Psalms\",\n    bookKo: \"시편\",\n    bookEn: \"Psalms\",\n    testament: \"OT\",\n    bookNumber: 19,\n    chapter: 23,\n    verse: 3,\n    textKo: \"내 영혼을 소생시키시고 자기 이름을 위하여 의의 길로 인도하시는도다\",\n    textEn: \"he refreshes my soul. He guides me along the right paths for his name's sake.\",\n    textZh: \"他使我的灵魂苏醒，为自己的名引导我走义路。\",\n    textJa: \"魂を生き返らせてくださる。主は御名にふさわしく、わたしを正しい道に導かれる。\",\n    version: \"NIV\"\n  },\n\n  // John\n  {\n    book: \"John\",\n    bookKo: \"요한복음\",\n    bookEn: \"John\",\n    bookZh: \"約翰福音\",\n    bookJa: \"ヨハネによる福音書\",\n    testament: \"NT\",\n    bookNumber: 43,\n    chapter: 3,\n    verse: 16,\n    textKo: \"하나님이 세상을 이처럼 사랑하사 독생자를 주셨으니 이는 그를 믿는 자마다 멸망하지 않고 영생을 얻게 하려 하심이라\",\n    textEn: \"For God so loved the world that he gave his one and only Son, that whoever believes in him shall not perish but have eternal life.\",\n    textZh: \"神爱世人，甚至将他的独生子赐给他们，叫一切信他的，不致灭亡，反得永生。\",\n    textJa: \"神は、実に、そのひとり子をお与えになったほどに、世を愛された。それは御子を信じる者が、ひとりとして滅びることなく、永遠のいのちを持つためである。\",\n    version: \"NIV\"\n  },\n  {\n    book: \"John\",\n    bookKo: \"요한복음\",\n    bookEn: \"John\",\n    testament: \"NT\",\n    bookNumber: 43,\n    chapter: 1,\n    verse: 1,\n    textKo: \"태초에 말씀이 계시니라 이 말씀이 하나님과 함께 계셨으니 이 말씀은 곧 하나님이시니라\",\n    textEn: \"In the beginning was the Word, and the Word was with God, and the Word was God.\",\n    textZh: \"太初有道，道与神同在，道就是神。\",\n    textJa: \"初めに、ことばがあった。ことばは神とともにあった。ことばは神であった。\",\n    version: \"NIV\"\n  },\n\n  // Matthew\n  {\n    book: \"Matthew\",\n    bookKo: \"마태복음\",\n    bookEn: \"Matthew\",\n    bookZh: \"馬太福音\",\n    bookJa: \"マタイによる福音書\",\n    testament: \"NT\",\n    bookNumber: 40,\n    chapter: 5,\n    verse: 3,\n    textKo: \"심령이 가난한 자는 복이 있나니 천국이 그들의 것임이요\",\n    textEn: \"Blessed are the poor in spirit, for theirs is the kingdom of heaven.\",\n    textZh: \"虚心的人有福了！因为天国是他们的。\",\n    textJa: \"心の貧しい者は幸いです。天の御国はその人たちのものだから。\",\n    version: \"NIV\"\n  },\n  {\n    book: \"Matthew\",\n    bookKo: \"마태복음\",\n    bookEn: \"Matthew\",\n    testament: \"NT\",\n    bookNumber: 40,\n    chapter: 5,\n    verse: 4,\n    textKo: \"애통하는 자는 복이 있나니 그들이 위로를 받을 것임이요\",\n    textEn: \"Blessed are those who mourn, for they will be comforted.\",\n    textZh: \"哀恸的人有福了！因为他们必得安慰。\",\n    textJa: \"悲しむ者は幸いです。その人たちは慰められるから。\",\n    version: \"NIV\"\n  },\n\n  // Romans\n  {\n    book: \"Romans\",\n    bookKo: \"로마서\",\n    bookEn: \"Romans\",\n    bookZh: \"羅馬書\",\n    bookJa: \"ローマ人への手紙\",\n    testament: \"NT\",\n    bookNumber: 45,\n    chapter: 8,\n    verse: 28,\n    textKo: \"우리가 알거니와 하나님을 사랑하는 자 곧 그의 뜻대로 부르심을 입은 자들에게는 모든 것이 합력하여 선을 이루느니라\",\n    textEn: \"And we know that in all things God works for the good of those who love him, who have been called according to his purpose.\",\n    textZh: \"我们晓得万事都互相效力，叫爱神的人得益处，就是按他旨意被召的人。\",\n    textJa: \"神を愛する人々、すなわち、神のご計画に従って召された人々のためには、神がすべてのことを働かせて益としてくださることを、私たちは知っています。\",\n    version: \"NIV\"\n  },\n\n  // Philippians\n  {\n    book: \"Philippians\",\n    bookKo: \"빌립보서\",\n    bookEn: \"Philippians\",\n    bookZh: \"腓立比書\",\n    bookJa: \"ピリピ人への手紙\",\n    testament: \"NT\",\n    bookNumber: 50,\n    chapter: 4,\n    verse: 13,\n    textKo: \"내게 능력 주시는 자 안에서 내가 모든 것을 할 수 있느니라\",\n    textEn: \"I can do all this through him who gives me strength.\",\n    textZh: \"我靠着那加给我力量的，凡事都能做。\",\n    textJa: \"私は、私を強くしてくださる方によって、どんなことでもできるのです。\",\n    version: \"NIV\"\n  },\n\n  // Proverbs\n  {\n    book: \"Proverbs\",\n    bookKo: \"잠언\",\n    bookEn: \"Proverbs\",\n    bookZh: \"箴言\",\n    bookJa: \"箴言\",\n    testament: \"OT\",\n    bookNumber: 20,\n    chapter: 3,\n    verse: 5,\n    textKo: \"너는 마음을 다하여 여호와를 신뢰하고 네 명철을 의지하지 말라\",\n    textEn: \"Trust in the Lord with all your heart and lean not on your own understanding;\",\n    textZh: \"你要专心仰赖耶和华，不可倚靠自己的聪明，\",\n    textJa: \"心を尽くして主に拠り頼め。自分の悟りにたよるな。\",\n    version: \"NIV\"\n  },\n  {\n    book: \"Proverbs\",\n    bookKo: \"잠언\",\n    bookEn: \"Proverbs\",\n    testament: \"OT\",\n    bookNumber: 20,\n    chapter: 3,\n    verse: 6,\n    textKo: \"너는 범사에 그를 인정하라 그리하면 네 길을 지도하시리라\",\n    textEn: \"in all your ways submit to him, and he will make your paths straight.\",\n    textZh: \"在你一切所行的事上都要认定他，他必指引你的路。\",\n    textJa: \"あなたの行く所どこにおいても、主を認めよ。そうすれば、主があなたの道をまっすぐにされる。\",\n    version: \"NIV\"\n  },\n\n  // Isaiah\n  {\n    book: \"Isaiah\",\n    bookKo: \"이사야\",\n    bookEn: \"Isaiah\",\n    bookZh: \"以賽亞書\",\n    bookJa: \"イザヤ書\",\n    testament: \"OT\",\n    bookNumber: 23,\n    chapter: 40,\n    verse: 31,\n    textKo: \"오직 여호와를 앙망하는 자는 새 힘을 얻으리니 독수리가 날개치며 올라감 같을 것이요 달음박질하여도 곤비하지 아니하며 걸어가도 피곤하지 아니하리로다\",\n    textEn: \"but those who hope in the Lord will renew their strength. They will soar on wings like eagles; they will run and not grow weary, they will walk and not be faint.\",\n    textZh: \"但那等候耶和华的必从新得力。他们必如鹰展翅上腾；他们奔跑却不困倦，行走却不疲乏。\",\n    textJa: \"しかし、主を待ち望む者は新しく力を得、鷲のように翼をかって上ることができる。走ってもたゆまず、歩いても疲れない。\",\n    version: \"NIV\"\n  }\n];\n\n// Helper function to get unique books from the sample data\nexport const getBibleBooks = () => {\n  const books = new Map();\n  \n  sampleBibleVerses.forEach(verse => {\n    if (!books.has(verse.book)) {\n      books.set(verse.book, {\n        name: verse.book,\n        nameKo: verse.bookKo,\n        nameEn: verse.bookEn,\n        nameZh: verse.bookZh,\n        nameJa: verse.bookJa,\n        testament: verse.testament,\n        bookNumber: verse.bookNumber,\n        chapters: 1 // This would need to be calculated properly\n      });\n    }\n    \n    // Update chapter count if this verse has a higher chapter number\n    const book = books.get(verse.book);\n    if (verse.chapter > book.chapters) {\n      book.chapters = verse.chapter;\n    }\n  });\n  \n  return Array.from(books.values()).sort((a, b) => a.bookNumber - b.bookNumber);\n};\n\n// Helper function to create sample challenges\nexport const sampleChallenges = [\n  {\n    title: \"오늘의 말씀\",\n    description: \"매일 새로운 성경 구절을 필사하며 하나님의 말씀을 마음에 새겨보세요\",\n    type: \"daily\",\n    requiredAccuracy: 95,\n    requiredWpm: 30,\n    pointsReward: 50,\n    startDate: new Date(),\n    endDate: new Date(Date.now() + 24 * 60 * 60 * 1000), // 1 day\n    isActive: true,\n    participantCount: 1234\n  },\n  {\n    title: \"시편 23편 완주\",\n    description: \"다윗의 시편 23편 전체를 일주일 동안 완성해보세요\",\n    type: \"weekly\",\n    requiredAccuracy: 90,\n    requiredWpm: 25,\n    pointsReward: 200,\n    startDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n    endDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 days\n    isActive: true,\n    participantCount: 856\n  },\n  {\n    title: \"사랑의 장 마라톤\",\n    description: \"고린도전서 13장 사랑 장을 한 달 동안 완벽히 암송해보세요\",\n    type: \"monthly\",\n    requiredAccuracy: 98,\n    requiredWpm: 35,\n    pointsReward: 1000,\n    startDate: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000), // 10 days ago\n    endDate: new Date(Date.now() + 20 * 24 * 60 * 60 * 1000), // 20 days\n    isActive: true,\n    participantCount: 2341\n  }\n];\n","size_bytes":11418},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading, isError } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    retryOnMount: false,\n  });\n\n  return {\n    user,\n    isLoading: isLoading && !isError, // Stop loading if there's an error\n    isAuthenticated: !!user,\n    isError,\n  };\n}\n","size_bytes":413},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/challenges.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Calendar, Trophy, Users, Target, Clock, Award, CheckCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\n\nexport default function Challenges() {\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: challenges, isLoading: challengesLoading } = useQuery({\n    queryKey: [\"/api/challenges\"],\n  });\n\n  const joinChallengeMutation = useMutation({\n    mutationFn: async (challengeId: string) => {\n      await apiRequest(\"POST\", `/api/challenges/${challengeId}/join`, {});\n    },\n    onSuccess: (_, challengeId) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\", challengeId, \"progress\"] });\n      toast({\n        title: \"성공!\",\n        description: \"챌린지에 참여하셨습니다.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"로그인 필요\",\n          description: \"로그인 후 다시 시도해주세요.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"오류\",\n        description: \"챌린지 참여 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getChallengeIcon = (type: string) => {\n    switch (type) {\n      case 'daily':\n        return <Calendar className=\"h-5 w-5\" />;\n      case 'weekly':\n        return <Trophy className=\"h-5 w-5\" />;\n      case 'monthly':\n        return <Award className=\"h-5 w-5\" />;\n      default:\n        return <Target className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getChallengeTypeColor = (type: string) => {\n    switch (type) {\n      case 'daily':\n        return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300';\n      case 'weekly':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300';\n      case 'monthly':\n        return 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300';\n    }\n  };\n\n  const getChallengeTypeLabel = (type: string) => {\n    switch (type) {\n      case 'daily':\n        return '일일 챌린지';\n      case 'weekly':\n        return '주간 챌린지';\n      case 'monthly':\n        return '월간 챌린지';\n      default:\n        return '챌린지';\n    }\n  };\n\n  if (challengesLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"container mx-auto px-4 py-8 max-w-6xl\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-2 flex items-center\">\n              <Target className=\"h-8 w-8 mr-3 text-primary\" />\n              챌린지\n            </h1>\n            <p className=\"text-lg text-muted-foreground\">로딩 중...</p>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-6 bg-muted rounded\"></div>\n                  <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"h-4 bg-muted rounded\"></div>\n                    <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-2 bg-muted rounded\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-2 flex items-center\">\n            <Target className=\"h-8 w-8 mr-3 text-primary\" />\n            챌린지\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            일일, 주간, 월간 챌린지에 참여하여 꾸준한 말씀 묵상 습관을 만드세요\n          </p>\n        </div>\n\n        {!challenges || challenges.length === 0 ? (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <Calendar className=\"h-16 w-16 text-muted-foreground mx-auto mb-6\" />\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">활성화된 챌린지가 없습니다</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                새로운 챌린지가 곧 시작될 예정입니다. 조금만 기다려주세요!\n              </p>\n              <Link href=\"/practice\">\n                <Button data-testid=\"button-practice-while-waiting\">\n                  지금 필사 연습하기\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {challenges.map((challenge: any) => (\n              <Card key={challenge.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Badge className={getChallengeTypeColor(challenge.type)}>\n                      {getChallengeTypeLabel(challenge.type)}\n                    </Badge>\n                    <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                      challenge.type === 'daily' ? 'bg-green-100 text-green-600 dark:bg-green-900/30' :\n                      challenge.type === 'weekly' ? 'bg-blue-100 text-blue-600 dark:bg-blue-900/30' :\n                      'bg-purple-100 text-purple-600 dark:bg-purple-900/30'\n                    }`}>\n                      {getChallengeIcon(challenge.type)}\n                    </div>\n                  </div>\n                  <CardTitle className=\"text-lg font-semibold text-foreground\" data-testid={`challenge-title-${challenge.id}`}>\n                    {challenge.title}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    {challenge.description}\n                  </p>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">요구 조건</span>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Target className=\"h-3 w-3 text-muted-foreground\" />\n                        <span className=\"text-muted-foreground\">정확도:</span>\n                        <span className=\"font-medium text-foreground\">{challenge.requiredAccuracy}%</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Clock className=\"h-3 w-3 text-muted-foreground\" />\n                        <span className=\"text-muted-foreground\">속도:</span>\n                        <span className=\"font-medium text-foreground\">{challenge.requiredWpm} WPM</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Users className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-muted-foreground\">\n                        참여자: {(challenge.participantCount || 0).toLocaleString()}명\n                      </span>\n                    </div>\n                    <div className=\"flex items-center space-x-1 text-primary font-medium\">\n                      <Trophy className=\"h-4 w-4\" />\n                      <span>+{challenge.pointsReward} 포인트</span>\n                    </div>\n                  </div>\n\n                  <div className=\"text-xs text-muted-foreground\">\n                    {challenge.endDate && (\n                      <p>\n                        종료: {format(new Date(challenge.endDate), \"yyyy년 MM월 dd일\")}\n                      </p>\n                    )}\n                  </div>\n\n                  {isAuthenticated ? (\n                    <Button\n                      className=\"w-full\"\n                      onClick={() => joinChallengeMutation.mutate(challenge.id)}\n                      disabled={joinChallengeMutation.isPending}\n                      data-testid={`button-join-challenge-${challenge.id}`}\n                    >\n                      {joinChallengeMutation.isPending ? (\n                        \"참여 중...\"\n                      ) : (\n                        <>\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          챌린지 참여하기\n                        </>\n                      )}\n                    </Button>\n                  ) : (\n                    <a href=\"/api/login\" className=\"block\">\n                      <Button className=\"w-full\" data-testid=\"button-login-to-join\">\n                        로그인하고 참여하기\n                      </Button>\n                    </a>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Challenge Tips */}\n        <Card className=\"mt-12 bible-texture\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Award className=\"h-5 w-5 mr-2 text-primary\" />\n              챌린지 참여 가이드\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold text-foreground mb-3\">챌린지 종류</h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                      <Calendar className=\"h-3 w-3 text-green-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">일일 챌린지</p>\n                      <p className=\"text-sm text-muted-foreground\">매일 새로운 구절로 꾸준한 연습</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                      <Trophy className=\"h-3 w-3 text-blue-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">주간 챌린지</p>\n                      <p className=\"text-sm text-muted-foreground\">일주일 동안 특정 주제 완주</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-purple-100 dark:bg-purple-900/30 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                      <Award className=\"h-3 w-3 text-purple-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">월간 챌린지</p>\n                      <p className=\"text-sm text-muted-foreground\">한 달 간의 장기 도전</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold text-foreground mb-3\">성공 팁</h4>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-primary\">•</span>\n                    <span>정확도를 우선시하고 속도는 자연스럽게 늘려가세요</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-primary\">•</span>\n                    <span>매일 조금씩이라도 꾸준히 참여하세요</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-primary\">•</span>\n                    <span>말씀의 의미를 생각하며 타이핑하세요</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-primary\">•</span>\n                    <span>다른 참가자들과 격려하며 함께 성장하세요</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":13861},"client/src/pages/home.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { BookOpen, TrendingUp, Target, RotateCcw, LogIn, CheckCircle, Trophy, Calendar, Users, Type, Plus, Minus } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport StatsDisplay from \"@/components/stats-display\";\nimport { useState, useEffect, useCallback, useRef, useMemo } from \"react\";\nimport type { BibleVerse, Translation, BibleBook, Language } from \"@shared/schema\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport AuthModal from \"@/components/AuthModal\";\n\nexport default function Home() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n\n  // Demo page states - completely redesigned for broad random selection\n  const [currentLanguage, setCurrentLanguage] = useState<Language | null>(null);\n  const [currentTranslation, setCurrentTranslation] = useState<Translation | null>(null);\n  const [currentBook, setCurrentBook] = useState<BibleBook | null>(null);\n  const [currentChapter, setCurrentChapter] = useState<number>(1);\n  const [verseInputs, setVerseInputs] = useState<{[key: number]: string}>({});\n  const [startTime, setStartTime] = useState<number | null>(null);\n  const [stats, setStats] = useState({ wpm: 0, accuracy: 100, completed: 0 });\n\n  // Font settings states\n  const [fontFamily, setFontFamily] = useState<string>('노토 산스');\n  const [fontSize, setFontSize] = useState<number>(14);\n  \n  // Modal states\n  const [isLoginModalOpen, setIsLoginModalOpen] = useState<boolean>(false);\n  \n  // Debouncing for getNewChapter to prevent server overload\n  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null);\n  \n  // Cleanup debounce timer on unmount\n  useEffect(() => {\n    return () => {\n      if (debounceTimerRef.current) {\n        clearTimeout(debounceTimerRef.current);\n      }\n    };\n  }, []);\n\n  // Available fonts (Korean-optimized Google Fonts - Free License)\n  const availableFonts = useMemo(() => [\n    { name: '노토 산스', family: 'Noto Sans KR, sans-serif', original: 'Noto Sans KR' },\n    { name: '노토 세리프', family: 'Noto Serif KR, serif', original: 'Noto Serif KR' },\n    { name: '나눔고딕', family: 'Nanum Gothic, sans-serif', original: 'Nanum Gothic' },\n    { name: '나눔명조', family: 'Nanum Myeongjo, serif', original: 'Nanum Myeongjo' },\n    { name: '도현체', family: 'Do Hyeon, sans-serif', original: 'Do Hyeon' },\n    { name: '주아체', family: 'Jua, sans-serif', original: 'Jua' },\n    { name: '감자꽃체', family: 'Gamja Flower, cursive', original: 'Gamja Flower' },\n    { name: '싱글데이', family: 'Single Day, cursive', original: 'Single Day' },\n    { name: '고운돋움', family: 'Gowun Dodum, sans-serif', original: 'Gowun Dodum' },\n    { name: '고운바탕', family: 'Gowun Batang, serif', original: 'Gowun Batang' }\n  ], []);\n\n  // Font settings management\n  const saveFontSettings = useCallback((family: string, size: number) => {\n    localStorage.setItem('bible-font-settings', JSON.stringify({ fontFamily: family, fontSize: size }));\n  }, []);\n\n  const loadFontSettings = useCallback(() => {\n    try {\n      const saved = localStorage.getItem('bible-font-settings');\n      if (saved) {\n        const { fontFamily: savedFamily, fontSize: savedSize } = JSON.parse(saved);\n        if (savedFamily) {\n          // Convert original font name to Korean name for display\n          const matchedFont = availableFonts.find(font => font.original === savedFamily);\n          const displayName = matchedFont ? matchedFont.name : savedFamily;\n          setFontFamily(displayName);\n        }\n        if (savedSize && savedSize >= 10 && savedSize <= 24) setFontSize(savedSize);\n      }\n    } catch (error) {\n      console.error('Failed to load font settings:', error);\n    }\n  }, [availableFonts]);\n\n  const handleFontFamilyChange = useCallback((newFamily: string) => {\n    setFontFamily(newFamily);\n    // Find the original font name to save to localStorage\n    const selectedFont = availableFonts.find(font => font.name === newFamily);\n    const originalName = selectedFont ? selectedFont.original : newFamily;\n    saveFontSettings(originalName, fontSize);\n  }, [fontSize, saveFontSettings, availableFonts]);\n\n  const handleFontSizeChange = useCallback((newSize: number) => {\n    const clampedSize = Math.max(10, Math.min(24, newSize)); // 10px to 24px range\n    setFontSize(clampedSize);\n    // Find the original font name to save to localStorage\n    const selectedFont = availableFonts.find(font => font.name === fontFamily);\n    const originalName = selectedFont ? selectedFont.original : fontFamily;\n    saveFontSettings(originalName, clampedSize);\n  }, [fontFamily, saveFontSettings, availableFonts]);\n\n  // Refs for perfect scroll synchronization\n  const leftScrollRef = useRef<HTMLDivElement>(null);\n  const rightScrollRef = useRef<HTMLDivElement>(null);\n  const isSyncing = useRef(false);\n\n  // Authenticated user queries\n  const { data: challenges } = useQuery<any[]>({\n    queryKey: [\"/api/challenges\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: userStats } = useQuery<any>({\n    queryKey: [\"/api/user/stats\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: personalLeaderboard } = useQuery<any[]>({\n    queryKey: [\"/api/leaderboard/personal\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: userChurch } = useQuery<any>({\n    queryKey: [\"/api/user/church\"],\n    enabled: isAuthenticated,\n  });\n\n  // 📦 클라이언트 캐싱 시스템\n  const saveBibleDataToCache = useCallback((data: any) => {\n    try {\n      const cacheData = {\n        data,\n        timestamp: Date.now(),\n        version: '1.0', // 데이터 구조 변경 시 버전 업\n      };\n      localStorage.setItem('bible-cache', JSON.stringify(cacheData));\n      console.log('✅ 성경 데이터 캐시 저장됨');\n    } catch (error) {\n      console.warn('캐시 저장 실패:', error);\n    }\n  }, []);\n\n  const loadBibleDataFromCache = useCallback(() => {\n    try {\n      const cached = localStorage.getItem('bible-cache');\n      if (cached) {\n        const { data, timestamp, version } = JSON.parse(cached);\n        const isExpired = Date.now() - timestamp > 1000 * 60 * 60 * 24; // 24시간\n        const isOldVersion = version !== '1.0';\n        \n        if (!isExpired && !isOldVersion) {\n          console.log('⚡ 캐시된 데이터로 즉시 로딩!');\n          return data;\n        } else {\n          localStorage.removeItem('bible-cache');\n          console.log('⚠️ 만료된 캐시 삭제됨');\n        }\n      }\n    } catch (error) {\n      console.warn('캐시 로드 실패:', error);\n      localStorage.removeItem('bible-cache');\n    }\n    return null;\n  }, []);\n\n  // 🚀 캐시 우선 전략: 캐시가 있으면 즉시 사용하고 네트워크 호출 건너뛰기\n  const [cachedData] = useState<{\n    languages: Language[];\n    koreanTranslations: Translation[];\n    books: BibleBook[];\n    defaultVerse: BibleVerse | null;\n    defaultTranslation: Translation | null;\n    popularChapters: BibleVerse[][];\n  } | null>(() => {\n    // 컴포넌트 마운트 시 즉시 캐시 확인\n    if (typeof window !== 'undefined') {\n      const cached = loadBibleDataFromCache();\n      if (cached) {\n        console.log('🚀 캐시 발견! 즉시 화면 렌더링');\n        return cached;\n      }\n    }\n    return null;\n  });\n\n  // ⚡ 캐시 우선 전략: 캐시가 있으면 네트워크 호출 건너뛰기\n  const { data: initialData, isLoading: loadingInitialData } = useQuery<{\n    languages: Language[];\n    koreanTranslations: Translation[];\n    books: BibleBook[];\n    defaultVerse: BibleVerse | null;\n    defaultTranslation: Translation | null;\n    popularChapters: BibleVerse[][];\n  }>({\n    queryKey: ['/api/bible/initial-data'],\n    enabled: !isAuthenticated && !cachedData, // 캐시가 있으면 네트워크 호출 건너뛰기\n    initialData: cachedData || undefined, // 캐시된 데이터를 초기값으로 사용\n    staleTime: 1000 * 60 * 60, // 1시간 캐시\n  });\n\n  // 기본값으로 즉시 설정하여 추가 API 호출 방지\n  const languages = initialData?.languages;\n  const translations = initialData?.koreanTranslations;\n  const books = initialData?.books;\n\n  const { data: chapterVerses, isLoading: loadingChapter } = useQuery<BibleVerse[]>({\n    queryKey: ['/api/bible/chapter', currentBook?.id, currentChapter, currentTranslation?.id],\n    queryFn: () => {\n      // 번역본 ID가 확실히 있을 때만 API 호출\n      if (!currentTranslation?.id) {\n        throw new Error(\"번역본 ID가 필요합니다\");\n      }\n      console.log(`🔍 API 호출: 책=${currentBook?.bookNameKr}, 장=${currentChapter}, 번역본=${currentTranslation.name} (${currentTranslation.id})`);\n      return fetch(`/api/bible/chapter/${currentBook?.id}/${currentChapter}?translationId=${currentTranslation.id}`).then(res => res.json());\n    },\n    enabled: !isAuthenticated && \n             !!currentBook && \n             !!currentTranslation && \n             !!currentTranslation.id && \n             currentTranslation.code === 'GAEREVIS', // 개역개정만 허용\n    staleTime: 1000 * 60 * 60 * 24, // 24시간 캐시\n  });\n\n\n  // Load font settings on component mount\n  useEffect(() => {\n    loadFontSettings();\n  }, [loadFontSettings]);\n\n  // ⚡ 캐시 또는 서버 데이터를 통합하여 즉시 기본값 설정\n  const effectiveData = cachedData || initialData;\n  \n  useEffect(() => {\n    if (!isAuthenticated && effectiveData) {\n      const { languages, koreanTranslations, books, defaultTranslation, popularChapters } = effectiveData as {\n        languages: Language[];\n        koreanTranslations: Translation[];\n        books: BibleBook[];\n        defaultTranslation: Translation | null;\n        popularChapters: BibleVerse[][];\n      };\n      \n      // 📦 새로운 서버 데이터만 캐시 저장 (캐시에서 온 데이터는 이미 저장됨)\n      if (!cachedData && initialData) {\n        saveBibleDataToCache(initialData);\n      }\n      \n      // 1. 한국어 언어 설정\n      if (!currentLanguage && languages.length > 0) {\n        const koreanLanguage = languages.find((lang: Language) => lang.code === 'ko');\n        if (koreanLanguage) {\n          setCurrentLanguage(koreanLanguage);\n          console.log(cachedData ? '⚡ 캐시: 한국어 설정됨' : '✅ 서버: 한국어 설정됨', koreanLanguage.name);\n        } else {\n          setCurrentLanguage(languages[0]);\n        }\n      }\n\n      // 2. 개역개정 번역본 즉시 설정\n      if (!currentTranslation && koreanTranslations.length > 0) {\n        if (defaultTranslation) {\n          setCurrentTranslation(defaultTranslation);\n          console.log(cachedData ? '⚡ 캐시: 번역본 설정됨' : '✅ 서버: 번역본 설정됨', defaultTranslation.name);\n        } else {\n          const gaerevisTranslation = koreanTranslations.find((t: Translation) => t.code === 'GAEREVIS');\n          const fallback = gaerevisTranslation || koreanTranslations[0];\n          if (fallback) {\n            setCurrentTranslation(fallback);\n            console.log(cachedData ? '⚡ 캐시: 폴백 번역본 설정됨' : '✅ 서버: 폴백 번역본 설정됨', fallback.name);\n          }\n        }\n      }\n\n      // 3. 랜덤 책과 장 선택 (창세기~요한계시록)\n      if (!currentBook && books.length > 0) {\n        const canonicalBooks = books.filter((book: BibleBook) => book.bookOrder >= 1 && book.bookOrder <= 66);\n        \n        if (canonicalBooks.length > 0) {\n          const randomBook = canonicalBooks[Math.floor(Math.random() * canonicalBooks.length)];\n          const randomChapter = Math.floor(Math.random() * 10) + 1;\n          \n          setCurrentBook(randomBook);\n          setCurrentChapter(randomChapter);\n          console.log(cachedData ? '⚡ 캐시: 랜덤 책 설정됨' : '✅ 서버: 랜덤 책 설정됨', randomBook.bookNameKr, randomChapter + '장');\n        } else {\n          setCurrentBook(books[0]);\n          setCurrentChapter(1);\n        }\n      }\n\n      // 🚀 프리페칭된 인기 구절들 로그\n      if (popularChapters && popularChapters.length > 0) {\n        console.log(cachedData ? '⚡ 캐시:' : '🚀 서버:', `${popularChapters.length}개 인기 장 로드됨`);\n      }\n    }\n  }, [effectiveData, currentLanguage, currentTranslation, currentBook, isAuthenticated, cachedData, initialData, saveBibleDataToCache]);\n\n  // Calculate typing stats\n  const calculateStats = useCallback(() => {\n    if (!chapterVerses || !startTime) return;\n\n    const now = Date.now();\n    const timeMinutes = (now - startTime) / 60000;\n    let totalChars = 0;\n    let correctChars = 0;\n    let completedVerses = 0;\n\n    chapterVerses.forEach(verse => {\n      const input = verseInputs[verse.verse] || '';\n      totalChars += input.length;\n      \n      for (let i = 0; i < input.length; i++) {\n        if (input[i] === verse.content[i]) correctChars++;\n      }\n      \n      if (input === verse.content) completedVerses++;\n    });\n\n    const wpm = timeMinutes > 0 ? Math.round((totalChars / 5) / timeMinutes) : 0;\n    const accuracy = totalChars > 0 ? Math.round((correctChars / totalChars) * 100) : 100;\n    const completed = Math.round((completedVerses / chapterVerses.length) * 100);\n\n    setStats({ wpm, accuracy, completed });\n  }, [chapterVerses, verseInputs, startTime]);\n\n  useEffect(() => {\n    calculateStats();\n  }, [calculateStats]);\n\n  // Handle verse input\n  const handleVerseInput = (verseNumber: number, value: string) => {\n    if (!startTime) setStartTime(Date.now());\n    \n    const verse = chapterVerses?.find(v => v.verse === verseNumber);\n    if (!verse || value.length > verse.content.length) return;\n\n    setVerseInputs(prev => ({ ...prev, [verseNumber]: value }));\n  };\n\n  // Debounced version of getNewChapter to prevent server overload\n  const debouncedGetNewChapter = () => {\n    // Clear previous timer if exists\n    if (debounceTimerRef.current) {\n      clearTimeout(debounceTimerRef.current);\n    }\n    \n    // Set new timer - execute after 1 second\n    debounceTimerRef.current = setTimeout(() => {\n      getNewChapter();\n    }, 1000);\n  };\n\n  // Get new random chapter - FIXED: 한국어/개역개정으로 고정, 실제 장 범위 동적 확인\n  const getNewChapter = async () => {\n    if (!languages || !books || !translations) return;\n    \n    // Reset input states only\n    setVerseInputs({});\n    setStartTime(null);\n    setStats({ wpm: 0, accuracy: 100, completed: 0 });\n    \n    // 1. 한국어 언어 유지 (고정)\n    const koreanLanguage = languages.find(lang => lang.code === 'ko');\n    if (!koreanLanguage) return;\n    \n    // 2. 개역개정 번역본 유지 (고정)  \n    const gaerevisTranslation = translations.find(t => t.code === 'GAEREVIS');\n    if (!gaerevisTranslation) return;\n    \n    // 3. 창세기~요한계시록(1-66) 중 랜덤 책 선택\n    const canonicalBooks = books.filter(book => \n      book.bookOrder >= 1 && book.bookOrder <= 66\n    );\n    \n    if (canonicalBooks.length === 0) return;\n    \n    // 4. 유효한 책과 장을 찾을 때까지 시도 (최대 10번)\n    let attempts = 0;\n    while (attempts < 10) {\n      const randomBook = canonicalBooks[Math.floor(Math.random() * canonicalBooks.length)];\n      \n      try {\n        // 5. 실제 데이터베이스에서 해당 책의 최대 장수 확인\n        const maxChapterResponse = await fetch(`/api/bible/book/${randomBook.id}/max-chapter?translationId=${gaerevisTranslation.id}`);\n        const maxChapterData = await maxChapterResponse.json();\n        \n        const maxChapter = maxChapterData.maxChapter || 1;\n        const randomChapter = Math.floor(Math.random() * maxChapter) + 1;\n        \n        // 6. 해당 장에 실제 구절이 있는지 확인\n        const verseCheckResponse = await fetch(`/api/bible/chapter/${randomBook.id}/${randomChapter}?translationId=${gaerevisTranslation.id}`);\n        const verses = await verseCheckResponse.json();\n        \n        if (verses && verses.length > 0) {\n          // 유효한 장을 찾았으므로 상태 업데이트\n          console.log(`✅ 유효한 장 발견: ${randomBook.bookNameKr} ${randomChapter}장 (${verses.length}개 구절)`);\n          setCurrentLanguage(koreanLanguage);\n          setCurrentTranslation(gaerevisTranslation); \n          setCurrentBook(randomBook);\n          setCurrentChapter(randomChapter);\n          return;\n        }\n      } catch (error) {\n        console.error(`❌ 장 확인 실패: ${randomBook.bookNameKr}`, error);\n      }\n      \n      attempts++;\n    }\n    \n    // 10번 시도해도 못 찾으면 기본값으로 창세기 1장\n    console.log('⚠️ 유효한 장을 찾지 못해 창세기 1장으로 기본 설정');\n    const genesisBook = books.find(book => book.bookCode === 'gen');\n    if (genesisBook) {\n      setCurrentLanguage(koreanLanguage);\n      setCurrentTranslation(gaerevisTranslation); \n      setCurrentBook(genesisBook);\n      setCurrentChapter(1);\n    }\n  };\n\n  // Synchronize scrolling between left and right pages\n  const handleLeftScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    if (isSyncing.current || !rightScrollRef.current) return;\n    isSyncing.current = true;\n    rightScrollRef.current.scrollTop = e.currentTarget.scrollTop;\n    setTimeout(() => { isSyncing.current = false; }, 0);\n  };\n\n  const handleRightScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    if (isSyncing.current || !leftScrollRef.current) return;\n    isSyncing.current = true;\n    leftScrollRef.current.scrollTop = e.currentTarget.scrollTop;\n    setTimeout(() => { isSyncing.current = false; }, 0);\n  };\n\n  // Show loading\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">로딩 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Demo page for unauthenticated users\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-100 dark:from-amber-950 dark:via-orange-950 dark:to-yellow-950\">\n        {/* Simple Header */}\n        <div className=\"bg-gradient-to-r from-amber-600 to-orange-600 text-white shadow-lg\">\n          <div className=\"max-w-7xl mx-auto px-4 py-4\">\n            <div className=\"flex justify-between items-center\">\n              <div className=\"flex items-center space-x-3\">\n                <BookOpen className=\"h-8 w-8\" />\n                <div>\n                  <h1 className=\"text-2xl font-bold font-serif\">성경 필사 체험</h1>\n                  <p className=\"text-amber-100 text-sm\">\n                    {currentBook && currentTranslation ? \n                      `${currentBook.bookNameKr} ${currentChapter}장 (${currentTranslation.name})` : \n                      '성경을 불러오는 중...'}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3 text-sm\">\n                {/* Stats */}\n                {startTime && (\n                  <div className=\"flex items-center gap-4 bg-white/10 px-3 py-1 rounded-lg\">\n                    <span><TrendingUp className=\"h-4 w-4 inline mr-1\" />속도 {stats.wpm}</span>\n                    <span><Target className=\"h-4 w-4 inline mr-1\" />정확도 {stats.accuracy}%</span>\n                    <span><CheckCircle className=\"h-4 w-4 inline mr-1\" />진행률 {stats.completed}%</span>\n                  </div>\n                )}\n                \n                {/* Font Settings */}\n                <div className=\"flex items-center gap-2 bg-white/10 px-3 py-1 rounded-lg\">\n                  <Type className=\"h-3 w-3\" />\n                  <Select \n                    value={fontFamily} \n                    onValueChange={handleFontFamilyChange}\n                  >\n                    <SelectTrigger className=\"h-6 w-32 text-xs bg-transparent border-white/30 text-white hover:bg-white/10\" data-testid=\"select-font-family\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-white border border-orange-200 shadow-lg\">\n                      {availableFonts.map(font => (\n                        <SelectItem \n                          key={font.name} \n                          value={font.name} \n                          className=\"text-orange-900 hover:bg-orange-100 focus:bg-orange-100 hover:text-orange-900 focus:text-orange-900\"\n                          data-testid={`font-option-${font.name.replace(/\\s+/g, '-').toLowerCase()}`}\n                        >\n                          <span style={{ fontFamily: font.family }}>\n                            {font.name}\n                          </span>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    <Button\n                      onClick={() => handleFontSizeChange(fontSize - 1)}\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"h-6 w-6 p-0 text-white hover:bg-white/10\"\n                      disabled={fontSize <= 10}\n                      data-testid=\"button-decrease-font-size\"\n                    >\n                      <Minus className=\"h-3 w-3\" />\n                    </Button>\n                    <span className=\"text-xs min-w-[2rem] text-center\" data-testid=\"text-font-size\">\n                      {fontSize}px\n                    </span>\n                    <Button\n                      onClick={() => handleFontSizeChange(fontSize + 1)}\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"h-6 w-6 p-0 text-white hover:bg-white/10\"\n                      disabled={fontSize >= 24}\n                      data-testid=\"button-increase-font-size\"\n                    >\n                      <Plus className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n                \n                {/* Buttons */}\n                <Button\n                  onClick={debouncedGetNewChapter}\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  className=\"h-8 text-xs\"\n                  data-testid=\"button-new-chapter\"\n                >\n                  <RotateCcw className=\"h-3 w-3 mr-1\" />새로운 필사\n                </Button>\n                \n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Bible Book */}\n        <div className=\"flex justify-center py-8 px-4\">\n          <div className=\"bible-book rounded-lg max-w-6xl w-full mx-auto\">\n            \n            {!currentBook || !chapterVerses || !currentTranslation ? (\n              <div className=\"h-full flex items-center justify-center\">\n                <div className=\"text-center\">\n                  {loadingChapter ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-amber-600 mx-auto mb-4\"></div>\n                      <p className=\"text-amber-700 dark:text-amber-300\">성경을 불러오는 중...</p>\n                    </>\n                  ) : (\n                    <>\n                      <BookOpen className=\"h-16 w-16 text-amber-400 mx-auto mb-4\" />\n                      <p className=\"text-amber-700 dark:text-amber-300 text-lg\">성경을 준비하는 중입니다...</p>\n                    </>\n                  )}\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex h-full\">\n                {/* Left Page - Bible Text */}\n                <div className=\"flex-1 bible-page p-8 h-full overflow-hidden\">\n                  <div className=\"h-full flex flex-col\">\n                    <div className=\"chapter-header text-center mb-6\">\n                      <h2 className=\"text-xl font-bold text-amber-800 dark:text-amber-200 font-serif\">\n                        {currentBook.bookNameKr} {currentChapter}장\n                      </h2>\n                      <p className=\"text-xs text-amber-600 dark:text-amber-400 mt-1\">\n                        {currentTranslation.name} ({currentLanguage?.name})\n                      </p>\n                    </div>\n                    \n                    <div \n                      ref={leftScrollRef}\n                      className=\"flex-1\"\n                    >\n                      {chapterVerses.map(verse => {\n                        const selectedFont = availableFonts.find(font => font.name === fontFamily);\n                        const fontFamilyStyle = selectedFont?.family || 'Noto Sans KR, sans-serif';\n                        \n                        return (\n                          <div key={verse.id ?? `${verse.bookId}-${verse.chapter}-${verse.verse}`} className=\"verse-container\" data-testid={`verse-display-${verse.verse}`}>\n                            <div className=\"verse-line flex items-start text-gray-800 dark:text-gray-200\" style={{\n                              lineHeight: '1.8',\n                              paddingTop: '2px',\n                              paddingBottom: '2px',\n                              minHeight: 'calc(1.8em + 4px)',\n                              fontFamily: fontFamilyStyle,\n                              fontSize: `${fontSize}px`\n                            }}>\n                              <span className=\"verse-number flex-shrink-0 font-medium text-amber-600 dark:text-amber-400\" style={{\n                                width: '32px',\n                                marginRight: '12px',\n                                paddingTop: '2px',\n                                fontFamily: fontFamilyStyle,\n                                fontSize: `${fontSize}px`\n                              }}>\n                                {verse.verse}\n                              </span>\n                              <div className=\"verse-content flex-1\" style={{\n                                wordBreak: 'break-word',\n                                whiteSpace: 'pre-wrap',\n                                lineHeight: '1.8',\n                                fontFamily: fontFamilyStyle,\n                                fontSize: `${fontSize}px`\n                              }}>\n                                {verse.content}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Center Binding */}\n                <div className=\"bible-binding w-4 flex-shrink-0\"></div>\n\n                {/* Right Page - Input with Perfect Alignment */}\n                <div className=\"flex-1 bible-page p-8 h-full overflow-hidden\">\n                  <div className=\"h-full flex flex-col\">\n                    <div className=\"chapter-header text-center mb-6\">\n                      <h2 className=\"text-xl font-bold text-amber-800 dark:text-amber-200 font-serif\">\n                        필사 연습\n                      </h2>\n                      <p className=\"text-xs text-amber-600 dark:text-amber-400 mt-1\">\n                        정확히 입력하세요\n                      </p>\n                    </div>\n                    \n                    <div \n                      ref={rightScrollRef}\n                      className=\"flex-1\"\n                    >\n                      {chapterVerses.map(verse => {\n                        const userInput = verseInputs[verse.verse] || '';\n                        const verseHeight = 'calc(1.8em + 4px)';\n                        const selectedFont = availableFonts.find(font => font.name === fontFamily);\n                        const fontFamilyStyle = selectedFont?.family || 'Noto Sans KR, sans-serif';\n                        \n                        return (\n                          <div key={verse.id ?? `${verse.bookId}-${verse.chapter}-${verse.verse}`} className=\"verse-container\" data-testid={`verse-input-${verse.verse}`}>\n                            <div className=\"verse-line flex items-start\" style={{\n                              lineHeight: '1.8',\n                              paddingTop: '2px',\n                              paddingBottom: '2px',\n                              minHeight: verseHeight,\n                              fontFamily: fontFamilyStyle,\n                              fontSize: `${fontSize}px`\n                            }}>\n                              <span className=\"verse-number flex-shrink-0 font-medium text-amber-600 dark:text-amber-400\" style={{\n                                width: '32px',\n                                marginRight: '12px',\n                                paddingTop: '2px',\n                                fontFamily: fontFamilyStyle,\n                                fontSize: `${fontSize}px`\n                              }}>\n                                {verse.verse}\n                              </span>\n                              <div className=\"verse-input-area flex-1 relative\">\n                                {/* Perfect sizing reference - invisible background */}\n                                <div \n                                  className=\"sizing-reference text-transparent select-none pointer-events-none\"\n                                  style={{\n                                    wordBreak: 'break-word',\n                                    whiteSpace: 'pre-wrap',\n                                    lineHeight: '1.8',\n                                    fontFamily: fontFamilyStyle,\n                                    fontSize: `${fontSize}px`\n                                  }}\n                                >\n                                  {verse.content}\n                                </div>\n                                \n                                {/* Character-by-character feedback overlay - BEHIND textarea */}\n                                {userInput && (\n                                  <div \n                                    className=\"feedback-overlay absolute pointer-events-none\"\n                                    style={{\n                                      top: '2px',\n                                      left: '2px',\n                                      right: '2px',\n                                      bottom: '2px',\n                                      wordBreak: 'break-word',\n                                      whiteSpace: 'pre-wrap',\n                                      lineHeight: '1.8',\n                                      fontFamily: fontFamilyStyle,\n                                      fontSize: `${fontSize}px`,\n                                      zIndex: 1\n                                    }}\n                                  >\n                                    {verse.content.split('').map((char, i) => {\n                                      const userChar = userInput[i];\n                                      let bgColor = 'transparent';\n                                      \n                                      if (i < userInput.length) {\n                                        bgColor = userChar === char ? \n                                          'rgba(34, 197, 94, 0.3)' : // green for correct\n                                          'rgba(239, 68, 68, 0.3)';   // red for incorrect\n                                      } else if (i === userInput.length) {\n                                        bgColor = 'rgba(59, 130, 246, 0.4)'; // blue cursor\n                                      }\n                                      \n                                      return (\n                                        <span key={`${verse.id || 'verse'}-${verse.verse || 'v'}-char-${i}`} style={{ backgroundColor: bgColor, color: 'transparent' }}>\n                                          {char}\n                                        </span>\n                                      );\n                                    })}\n                                  </div>\n                                )}\n                                \n                                {/* Input textarea with OPAQUE background to hide original text */}\n                                <textarea\n                                  value={userInput}\n                                  onChange={(e) => handleVerseInput(verse.verse, e.target.value)}\n                                  onPaste={(e) => e.preventDefault()}\n                                  onDrop={(e) => e.preventDefault()}\n                                  onDragOver={(e) => e.preventDefault()}\n                                  onContextMenu={(e) => e.preventDefault()}\n                                  placeholder=\"여기에 입력하세요...\"\n                                  className=\"absolute inset-0 w-full h-full border border-amber-200 dark:border-amber-800 rounded-sm text-gray-800 dark:text-gray-200 placeholder-gray-400 dark:placeholder-gray-500 focus:border-amber-400 dark:focus:border-amber-600 focus:outline-none resize-none bg-white dark:bg-gray-900\"\n                                  style={{\n                                    lineHeight: '1.8',\n                                    padding: '2px',\n                                    wordBreak: 'break-word',\n                                    whiteSpace: 'pre-wrap',\n                                    fontFamily: fontFamilyStyle,\n                                    fontSize: `${fontSize}px`,\n                                    zIndex: 2\n                                  }}\n                                  data-testid={`textarea-verse-${verse.verse}`}\n                                />\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Authenticated user home page\n  const activeChallenges = (challenges && Array.isArray(challenges)) ? challenges.slice(0, 3) : [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary/10 via-primary/5 to-background py-16 px-4\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-6\">\n            성경 필사로 말씀을 마음에 새기세요\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n            타이핑을 통해 성경을 읽고, 속도와 정확도를 향상시키며, 교회 공동체와 함께 성장하세요.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/practice\">\n              <Button size=\"lg\" className=\"min-w-40\" data-testid=\"button-start-practice\">\n                <BookOpen className=\"mr-2 h-5 w-5\" />\n                연습 시작하기\n              </Button>\n            </Link>\n            <Link href=\"/challenges\">\n              <Button variant=\"outline\" size=\"lg\" className=\"min-w-40\" data-testid=\"button-view-challenges\">\n                <Trophy className=\"mr-2 h-5 w-5\" />\n                도전과제 보기\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* User Stats */}\n      {userStats && (\n        <section className=\"py-12 px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <h2 className=\"text-2xl font-bold text-center mb-8\">나의 성과</h2>\n            <StatsDisplay stats={userStats} />\n          </div>\n        </section>\n      )}\n\n      {/* Active Challenges */}\n      {activeChallenges.length > 0 && (\n        <section className=\"py-12 px-4 bg-muted/30\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h2 className=\"text-2xl font-bold\">활성 도전과제</h2>\n              <Link href=\"/challenges\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-challenges\">\n                  모든 도전과제 보기\n                </Button>\n              </Link>\n            </div>\n            \n            <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n              {activeChallenges.map((challenge: any, index: number) => (\n                <div key={challenge.id || `challenge-${index}`} className=\"bg-card rounded-lg border p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <h3 className=\"font-semibold text-lg line-clamp-2\">{challenge.title}</h3>\n                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${\n                      challenge.type === 'daily' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400' :\n                      challenge.type === 'weekly' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' :\n                      'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400'\n                    }`}>\n                      {challenge.type === 'daily' ? '일간' : challenge.type === 'weekly' ? '주간' : '월간'}\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-muted-foreground text-sm mb-4 line-clamp-2\">\n                    {challenge.description}\n                  </p>\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center space-x-4 text-muted-foreground\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Target className=\"h-4 w-4\" />\n                        <span>{challenge.requiredAccuracy}%</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <TrendingUp className=\"h-4 w-4\" />\n                        <span>{challenge.requiredWpm} WPM</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-1 text-amber-600 dark:text-amber-400\">\n                      <Trophy className=\"h-4 w-4\" />\n                      <span>{challenge.pointsReward}p</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Personal Leaderboard */}\n      {personalLeaderboard && Array.isArray(personalLeaderboard) && personalLeaderboard.length > 0 && (\n        <section className=\"py-12 px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h2 className=\"text-2xl font-bold\">개인 순위</h2>\n              <Link href=\"/leaderboard\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-leaderboard\">\n                  전체 순위 보기\n                </Button>\n              </Link>\n            </div>\n            \n            <div className=\"bg-card rounded-lg border overflow-hidden\">\n              <div className=\"p-6 border-b\">\n                <h3 className=\"font-semibold\">상위 사용자</h3>\n              </div>\n              <div className=\"divide-y\">\n                {personalLeaderboard.slice(0, 5).map((entry: any, index: number) => (\n                  <div key={entry.userId || entry.id || `leaderboard-${index}`} className=\"p-4 flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm ${\n                        index === 0 ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400' :\n                        index === 1 ? 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400' :\n                        index === 2 ? 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-400' :\n                        'bg-muted text-muted-foreground'\n                      }`}>\n                        {index + 1}\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{entry.firstName || '익명'} {entry.lastName || ''}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {entry.totalWords?.toLocaleString() || 0} 단어\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold\">{entry.totalPoints?.toLocaleString() || 0}점</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {Math.round(entry.averageWpm || 0)} WPM\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Church Section */}\n      {userChurch && typeof userChurch === 'object' && (\n        <section className=\"py-12 px-4 bg-muted/30\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-bold mb-2\">내 교회</h2>\n              <p className=\"text-muted-foreground\">{(userChurch as any).name}</p>\n            </div>\n            \n            <div className=\"grid gap-6 md:grid-cols-3\">\n              <div className=\"bg-card rounded-lg border p-6 text-center\">\n                <Users className=\"h-8 w-8 mx-auto mb-4 text-primary\" />\n                <h3 className=\"font-semibold mb-2\">교인 수</h3>\n                <p className=\"text-2xl font-bold\">{(userChurch as any).totalMembers || 0}</p>\n              </div>\n              \n              <div className=\"bg-card rounded-lg border p-6 text-center\">\n                <Trophy className=\"h-8 w-8 mx-auto mb-4 text-primary\" />\n                <h3 className=\"font-semibold mb-2\">교회 점수</h3>\n                <p className=\"text-2xl font-bold\">{((userChurch as any).totalPoints || 0).toLocaleString()}</p>\n              </div>\n              \n              <div className=\"bg-card rounded-lg border p-6 text-center\">\n                <Calendar className=\"h-8 w-8 mx-auto mb-4 text-primary\" />\n                <h3 className=\"font-semibold mb-2\">생성일</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {(userChurch as any).createdAt ? new Date((userChurch as any).createdAt).toLocaleDateString('ko-KR') : '알 수 없음'}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"text-center mt-8\">\n              <Link href={`/churches/${(userChurch as any).id}`}>\n                <Button variant=\"outline\" data-testid=\"button-view-church\">\n                  교회 상세 보기\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* CTA Section */}\n      <section className=\"py-16 px-4 bg-primary text-primary-foreground\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">지금 시작하세요</h2>\n          <p className=\"text-xl text-primary-foreground/80 mb-8\">\n            매일 조금씩 연습하며 성경 말씀을 마음에 새기고, 타이핑 실력도 함께 향상시켜보세요.\n          </p>\n          <Link href=\"/practice\">\n            <Button size=\"lg\" variant=\"secondary\" data-testid=\"button-cta-practice\">\n              <BookOpen className=\"mr-2 h-5 w-5\" />\n              연습 시작하기\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Authentication Modal */}\n      <AuthModal \n        open={isLoginModalOpen} \n        onOpenChange={setIsLoginModalOpen} \n      />\n    </div>\n  );\n}","size_bytes":44397},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { BookOpen, Globe, Keyboard, Users, ChartLine, Trophy, Calendar } from \"lucide-react\";\nimport { FaGoogle, FaGithub, FaApple } from \"react-icons/fa\";\nimport { SiKakaotalk, SiNaver } from \"react-icons/si\";\n\nexport default function Landing() {\n  const features = [\n    {\n      icon: Globe,\n      title: \"다국어 성경 지원\",\n      description: \"한국어, 영어, 중국어, 일본어 등 다양한 언어로 성경을 필사하며 말씀을 더 깊이 이해하세요\"\n    },\n    {\n      icon: Keyboard,\n      title: \"정확한 타이핑 연습\",\n      description: \"실시간 정확도와 속도 측정을 통해 체계적으로 타이핑 실력을 향상시키며 말씀을 암송하세요\"\n    },\n    {\n      icon: Users,\n      title: \"교회 커뮤니티\",\n      description: \"교회별 그룹을 만들고 함께 성장하며, 건전한 경쟁을 통해 서로 격려하는 신앙공동체를 형성하세요\"\n    },\n    {\n      icon: ChartLine,\n      title: \"개인 통계 대시보드\",\n      description: \"타이핑 기록, 진행률, 성취도를 한눈에 확인하고 개인별 맞춤 학습 계획을 세워보세요\"\n    },\n    {\n      icon: Trophy,\n      title: \"리더보드 & 경쟁\",\n      description: \"개인간, 교회간 리더보드를 통해 건전한 경쟁 의식을 갖고 함께 성장하는 기쁨을 누리세요\"\n    },\n    {\n      icon: Calendar,\n      title: \"일일 챌린지\",\n      description: \"일별, 주별, 월별 챌린지에 참여하여 꾸준한 말씀 묵상 습관을 만들어 나가세요\"\n    }\n  ];\n\n  const socialLogins = [\n    { icon: FaGoogle, name: \"Google\", color: \"text-red-500\" },\n    { icon: FaGithub, name: \"GitHub\", color: \"text-gray-700 dark:text-gray-300\" },\n    { icon: FaApple, name: \"Apple\", color: \"text-gray-800 dark:text-gray-200\" }\n  ];\n\n  const koreanSocialLogins = [\n    { icon: SiKakaotalk, name: \"카카오톡\", nameEn: \"Kakao\", color: \"text-yellow-500\", url: \"/auth/kakao\" },\n    { icon: SiNaver, name: \"네이버\", nameEn: \"Naver\", color: \"text-green-600\", url: \"/auth/naver\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative py-20 md:py-32 bible-texture\">\n        <div className=\"container px-4 mx-auto max-w-6xl\">\n          <div className=\"text-center space-y-8\">\n            <div className=\"space-y-4\">\n              <h2 className=\"text-4xl md:text-6xl font-bold text-foreground tracking-tight\">\n                말씀을 마음에 <span className=\"text-primary\">새기다</span>\n              </h2>\n              <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed\">\n                다국어 성경 타이핑을 통해 하나님의 말씀을 깊이 묵상하고, \n                전 세계 성도들과 함께 성장하세요\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <a href=\"/api/login\">\n                <Button size=\"lg\" className=\"h-12 px-8 text-lg font-semibold\" data-testid=\"button-start\">\n                  <Keyboard className=\"mr-2 h-5 w-5\" />\n                  지금 시작하기\n                </Button>\n              </a>\n              <Button variant=\"outline\" size=\"lg\" className=\"h-12 px-8 text-lg font-medium\" data-testid=\"button-demo\">\n                <BookOpen className=\"mr-2 h-5 w-5\" />\n                데모 보기\n              </Button>\n            </div>\n\n            {/* Korean Social Login Options */}\n            <div className=\"pt-8 space-y-6\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-4\">한국 소셜 계정으로 간편하게 시작하세요</p>\n                <div className=\"flex justify-center gap-4 flex-wrap\">\n                  {koreanSocialLogins.map((social) => {\n                    const Icon = social.icon;\n                    return (\n                      <a key={social.nameEn} href={social.url}>\n                        <Button \n                          size=\"lg\"\n                          className=\"flex items-center px-8 py-4 h-12 text-base font-semibold hover:shadow-md transition-all\"\n                          data-testid={`button-social-${social.nameEn.toLowerCase()}`}\n                        >\n                          <Icon className={`${social.color} mr-3 h-5 w-5`} />\n                          <span>{social.name}으로 시작하기</span>\n                        </Button>\n                      </a>\n                    );\n                  })}\n                </div>\n              </div>\n\n              <div className=\"border-t border-border pt-6\">\n                <p className=\"text-sm text-muted-foreground mb-4\">또는 다른 계정으로 시작하세요</p>\n                <div className=\"flex justify-center gap-4 flex-wrap\">\n                  {socialLogins.map((social) => {\n                    const Icon = social.icon;\n                    return (\n                      <a key={social.name} href=\"/api/login\">\n                        <Button \n                          variant=\"outline\" \n                          className=\"flex items-center px-6 py-3 hover:bg-secondary transition-colors\"\n                          data-testid={`button-social-${social.name.toLowerCase()}`}\n                        >\n                          <Icon className={`${social.color} mr-2 h-4 w-4`} />\n                          <span className=\"text-sm font-medium\">{social.name}</span>\n                        </Button>\n                      </a>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-card/50\">\n        <div className=\"container px-4 mx-auto max-w-6xl\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">주요 기능</h3>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              현대 기술과 전통적인 성경 필사의 영성을 결합한 종합 플랫폼\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                      <Icon className=\"text-primary h-6 w-6\" />\n                    </div>\n                    <h4 className=\"text-xl font-semibold text-foreground mb-3\">{feature.title}</h4>\n                    <p className=\"text-muted-foreground leading-relaxed\">\n                      {feature.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bible-texture\">\n        <div className=\"container px-4 mx-auto max-w-4xl text-center\">\n          <h3 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n            오늘부터 시작하세요\n          </h3>\n          <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            전 세계 성도들과 함께하는 성경 필사 여정에 참여하여 \n            말씀 안에서 더 깊은 성장을 경험하세요\n          </p>\n          <a href=\"/api/login\">\n            <Button size=\"lg\" className=\"h-12 px-8 text-lg font-semibold\" data-testid=\"button-cta-start\">\n              <Trophy className=\"mr-2 h-5 w-5\" />\n              무료로 시작하기\n            </Button>\n          </a>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-secondary/30 border-t border-border py-16\">\n        <div className=\"container px-4 mx-auto max-w-6xl\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <BookOpen className=\"h-6 w-6 text-primary\" />\n                <span className=\"text-xl font-bold text-foreground\">성경필사</span>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                말씀을 마음에 새기는 디지털 성경 필사 플랫폼으로 \n                전 세계 성도들과 함께 성장하세요.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h5 className=\"font-semibold text-foreground\">서비스</h5>\n              <nav className=\"space-y-2\">\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">필사하기</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">리더보드</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">챌린지</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">교회 등록</a>\n              </nav>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h5 className=\"font-semibold text-foreground\">지원</h5>\n              <nav className=\"space-y-2\">\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">도움말</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">문의하기</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">피드백</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">기술 지원</a>\n              </nav>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h5 className=\"font-semibold text-foreground\">회사</h5>\n              <nav className=\"space-y-2\">\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">소개</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">개인정보처리방침</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">서비스 이용약관</a>\n                <a href=\"#\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">채용</a>\n              </nav>\n            </div>\n          </div>\n\n          <div className=\"border-t border-border mt-12 pt-8 text-center\">\n            <p className=\"text-muted-foreground\">\n              © 2024 성경필사. 모든 권리 보유. Made with ❤️ for God's Kingdom\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":11152},"client/src/pages/leaderboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Trophy, Users, Crown, Medal, Award, TrendingUp, ChevronLeft, ChevronRight, Star, Target, Clock, Globe } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Leaderboard() {\n  const { user, isAuthenticated } = useAuth();\n  \n  // State for filters\n  const [globalSortBy, setGlobalSortBy] = useState<'totalPoints' | 'averageWpm' | 'totalAccuracy'>('totalPoints');\n  const [timeRange, setTimeRange] = useState<'daily' | 'weekly' | 'monthly' | 'all'>('all');\n  const [churchSortBy, setChurchSortBy] = useState<'totalPoints' | 'averageWpm' | 'memberCount'>('totalPoints');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 20;\n\n  // Queries\n  const { data: globalLeaderboard, isLoading: globalLoading } = useQuery({\n    queryKey: [\"/api/leaderboard/global\", globalSortBy, timeRange, currentPage],\n    queryFn: ({ queryKey }) => {\n      const [url, sortBy, range, page] = queryKey;\n      const offset = ((page as number) - 1) * itemsPerPage;\n      return fetch(`${url}?sortBy=${sortBy}&timeRange=${range}&limit=${itemsPerPage}&offset=${offset}`)\n        .then(res => res.json());\n    }\n  });\n\n  const { data: personalLeaderboard, isLoading: personalLoading } = useQuery({\n    queryKey: [\"/api/leaderboard/personal\"],\n  });\n\n  const { data: churchLeaderboard, isLoading: churchLoading } = useQuery({\n    queryKey: [\"/api/leaderboard/churches\", churchSortBy, currentPage],\n    queryFn: ({ queryKey }) => {\n      const [url, sortBy, page] = queryKey;\n      const offset = ((page as number) - 1) * itemsPerPage;\n      return fetch(`${url}?sortBy=${sortBy}&limit=${itemsPerPage}&offset=${offset}`)\n        .then(res => res.json());\n    }\n  });\n\n  const { data: userRankInfo } = useQuery({\n    queryKey: [\"/api/leaderboard/personal\", (user as any)?.id],\n    queryFn: () => fetch(`/api/leaderboard/personal/${(user as any)?.id}`).then(res => res.json()),\n    enabled: !!(user as any)?.id,\n  });\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Crown className=\"h-5 w-5 text-yellow-500\" />;\n      case 2:\n        return <Medal className=\"h-5 w-5 text-gray-400\" />;\n      case 3:\n        return <Award className=\"h-5 w-5 text-orange-500\" />;\n      default:\n        return <span className=\"text-sm font-bold text-muted-foreground\">#{rank}</span>;\n    }\n  };\n\n  const getRankBadgeColor = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case 2:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n      case 3:\n        return \"bg-orange-100 text-orange-800 border-orange-200\";\n      default:\n        return \"bg-muted text-muted-foreground border-border\";\n    }\n  };\n\n  const getSortLabel = (sortBy: string) => {\n    switch (sortBy) {\n      case 'totalPoints':\n        return '총 포인트';\n      case 'averageWpm':\n        return '평균 WPM';\n      case 'totalAccuracy':\n        return '정확도';\n      case 'memberCount':\n        return '멤버 수';\n      default:\n        return sortBy;\n    }\n  };\n\n  const getTimeRangeLabel = (range: string) => {\n    switch (range) {\n      case 'daily':\n        return '오늘';\n      case 'weekly':\n        return '이번 주';\n      case 'monthly':\n        return '이번 달';\n      case 'all':\n        return '전체';\n      default:\n        return range;\n    }\n  };\n\n  const LoadingSkeleton = () => (\n    <div className=\"space-y-4\">\n      {[1, 2, 3, 4, 5].map((i) => (\n        <div key={i} className=\"flex items-center space-x-4 p-4 bg-muted/30 rounded-lg animate-pulse\">\n          <div className=\"w-10 h-10 bg-muted rounded-full\"></div>\n          <div className=\"flex-1 space-y-2\">\n            <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n            <div className=\"h-3 bg-muted rounded w-1/3\"></div>\n          </div>\n          <div className=\"space-y-2 text-right\">\n            <div className=\"h-4 bg-muted rounded w-16\"></div>\n            <div className=\"h-3 bg-muted rounded w-12\"></div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const Pagination = ({ total, current, onChange }: { total: number; current: number; onChange: (page: number) => void }) => {\n    const totalPages = Math.ceil(total / itemsPerPage);\n    \n    if (totalPages <= 1) return null;\n\n    return (\n      <div className=\"flex items-center justify-center space-x-2 mt-6\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onChange(current - 1)}\n          disabled={current <= 1}\n          data-testid=\"pagination-prev\"\n        >\n          <ChevronLeft className=\"h-4 w-4\" />\n        </Button>\n        \n        <span className=\"text-sm text-muted-foreground\">\n          {current} / {totalPages} 페이지\n        </span>\n        \n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onChange(current + 1)}\n          disabled={current >= totalPages}\n          data-testid=\"pagination-next\"\n        >\n          <ChevronRight className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    );\n  };\n\n  const UserRankCard = () => {\n    if (!isAuthenticated || !userRankInfo) return null;\n\n    return (\n      <Card className=\"mb-6 bg-gradient-to-r from-primary/10 to-primary/5 border-primary/20\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar className=\"h-10 w-10\">\n                <AvatarImage src={(user as any)?.profileImageUrl} />\n                <AvatarFallback>\n                  {((user as any)?.firstName?.charAt(0) || (user as any)?.email?.charAt(0) || '?').toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h3 className=\"font-medium\">\n                  {(user as any)?.firstName || (user as any)?.email?.split('@')[0] || '익명 사용자'}\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">나의 순위</p>\n              </div>\n            </div>\n            <div className=\"text-right space-y-1\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-primary\">#{userRankInfo.globalRank}</div>\n                  <div className=\"text-xs text-muted-foreground\">전체 순위</div>\n                </div>\n                {userRankInfo.churchRank && (\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold text-secondary\">#{userRankInfo.churchRank}</div>\n                    <div className=\"text-xs text-muted-foreground\">교회 순위</div>\n                  </div>\n                )}\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-green-600\">{userRankInfo.percentile}%</div>\n                  <div className=\"text-xs text-muted-foreground\">상위 퍼센트</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderGlobalLeaderboard = () => {\n    if (globalLoading) return <LoadingSkeleton />;\n\n    if (!globalLeaderboard?.users || globalLeaderboard.users.length === 0) {\n      return (\n        <div className=\"text-center py-12\">\n          <Globe className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">아직 전체 랭킹 데이터가 없습니다</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-4\">\n        {globalLeaderboard.users.map((user: any) => (\n          <div\n            key={user.id}\n            className={`flex items-center space-x-4 p-4 rounded-lg border transition-colors hover:bg-muted/30 ${\n              user.rank <= 3 ? 'bg-muted/20' : 'bg-card'\n            }`}\n            data-testid={`global-rank-${user.rank}`}\n          >\n            <div className={`flex items-center justify-center w-10 h-10 rounded-full border ${getRankBadgeColor(user.rank)}`}>\n              {user.rank <= 3 ? getRankIcon(user.rank) : <span className=\"text-sm font-bold\">#{user.rank}</span>}\n            </div>\n            \n            <Avatar className=\"h-12 w-12\">\n              <AvatarImage src={user.profileImageUrl} />\n              <AvatarFallback>\n                {(user.firstName?.charAt(0) || user.email?.charAt(0) || '?').toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            \n            <div className=\"flex-1\">\n              <h3 className=\"font-medium text-foreground\" data-testid={`user-name-${user.id}`}>\n                {user.firstName || user.email?.split('@')[0] || '익명 사용자'}\n              </h3>\n              {user.churchName && (\n                <p className=\"text-sm text-muted-foreground\" data-testid={`user-church-${user.id}`}>\n                  {user.churchName}\n                </p>\n              )}\n              <div className=\"flex items-center space-x-4 mt-1 text-xs text-muted-foreground\">\n                <span>총 {user.totalWords?.toLocaleString() || 0} 단어</span>\n                <span>•</span>\n                <span>{user.totalPoints || 0} 포인트</span>\n                {timeRange !== 'all' && user.recentSessions && (\n                  <>\n                    <span>•</span>\n                    <span>{user.recentSessions} 세션</span>\n                  </>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              {globalSortBy === 'totalPoints' && (\n                <div className=\"font-bold text-lg text-foreground\" data-testid={`user-points-${user.id}`}>\n                  {user.totalPoints?.toLocaleString() || 0} P\n                </div>\n              )}\n              {globalSortBy === 'averageWpm' && (\n                <div className=\"font-bold text-lg text-foreground\" data-testid={`user-wpm-${user.id}`}>\n                  {Math.round(user.averageWpm || 0)} WPM\n                </div>\n              )}\n              {globalSortBy === 'totalAccuracy' && (\n                <div className=\"font-bold text-lg text-foreground\" data-testid={`user-accuracy-${user.id}`}>\n                  {Math.round(user.totalAccuracy || 0)}%\n                </div>\n              )}\n              <div className=\"text-sm text-muted-foreground\">\n                {globalSortBy !== 'averageWpm' && `${Math.round(user.averageWpm || 0)} WPM`}\n                {globalSortBy !== 'totalAccuracy' && globalSortBy !== 'averageWpm' && ` • ${Math.round(user.totalAccuracy || 0)}%`}\n              </div>\n            </div>\n          </div>\n        ))}\n        \n        <Pagination \n          total={globalLeaderboard.total || 0} \n          current={currentPage} \n          onChange={setCurrentPage} \n        />\n      </div>\n    );\n  };\n\n  const renderPersonalLeaderboard = () => {\n    if (personalLoading) return <LoadingSkeleton />;\n\n    if (!personalLeaderboard || (personalLeaderboard as any[]).length === 0) {\n      return (\n        <div className=\"text-center py-12\">\n          <Trophy className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">아직 개인 랭킹 데이터가 없습니다</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-4\">\n        {(personalLeaderboard as any[]).map((user: any, index: number) => {\n          const rank = index + 1;\n          return (\n            <div\n              key={user.id}\n              className={`flex items-center space-x-4 p-4 rounded-lg border transition-colors hover:bg-muted/30 ${\n                rank <= 3 ? 'bg-muted/20' : 'bg-card'\n              }`}\n              data-testid={`personal-rank-${rank}`}\n            >\n              <div className={`flex items-center justify-center w-10 h-10 rounded-full border ${getRankBadgeColor(rank)}`}>\n                {rank <= 3 ? getRankIcon(rank) : <span className=\"text-sm font-bold\">#{rank}</span>}\n              </div>\n              \n              <Avatar className=\"h-12 w-12\">\n                <AvatarImage src={user.profileImageUrl} />\n                <AvatarFallback>\n                  {(user.firstName?.charAt(0) || user.email?.charAt(0) || '?').toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div className=\"flex-1\">\n                <h3 className=\"font-medium text-foreground\" data-testid={`user-name-${user.id}`}>\n                  {user.firstName || user.email?.split('@')[0] || '익명 사용자'}\n                </h3>\n                {user.churchName && (\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`user-church-${user.id}`}>\n                    {user.churchName}\n                  </p>\n                )}\n                <div className=\"flex items-center space-x-4 mt-1 text-xs text-muted-foreground\">\n                  <span>총 {user.totalWords?.toLocaleString() || 0} 단어</span>\n                  <span>•</span>\n                  <span>{user.totalPoints || 0} 포인트</span>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <div className=\"font-bold text-lg text-foreground\" data-testid={`user-wpm-${user.id}`}>\n                  {Math.round(user.averageWpm || 0)} WPM\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {Math.round(user.totalAccuracy || 0)}% 정확도\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderChurchLeaderboard = () => {\n    if (churchLoading) return <LoadingSkeleton />;\n\n    if (!churchLeaderboard?.churches || churchLeaderboard.churches.length === 0) {\n      return (\n        <div className=\"text-center py-12\">\n          <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">아직 교회 랭킹 데이터가 없습니다</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-4\">\n        {churchLeaderboard.churches.map((church: any) => (\n          <div\n            key={church.id}\n            className={`flex items-center space-x-4 p-4 rounded-lg border transition-colors hover:bg-muted/30 ${\n              church.rank <= 3 ? 'bg-muted/20' : 'bg-card'\n            }`}\n            data-testid={`church-rank-${church.rank}`}\n          >\n            <div className={`flex items-center justify-center w-10 h-10 rounded-full border ${getRankBadgeColor(church.rank)}`}>\n              {church.rank <= 3 ? getRankIcon(church.rank) : <span className=\"text-sm font-bold\">#{church.rank}</span>}\n            </div>\n            \n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <Users className=\"h-6 w-6 text-primary\" />\n            </div>\n            \n            <div className=\"flex-1\">\n              <h3 className=\"font-medium text-foreground\" data-testid={`church-name-${church.id}`}>\n                {church.name}\n              </h3>\n              <div className=\"flex items-center space-x-4 mt-1 text-sm text-muted-foreground\">\n                <span>{church.memberCount || 0}명 참여</span>\n                <span>•</span>\n                <span>{church.activeMembers || 0}명 활성</span>\n                {churchSortBy === 'totalPoints' && (\n                  <>\n                    <span>•</span>\n                    <span>{church.totalPoints?.toLocaleString() || 0} 포인트</span>\n                  </>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              {churchSortBy === 'totalPoints' && (\n                <div className=\"font-bold text-lg text-foreground\" data-testid={`church-points-${church.id}`}>\n                  {church.totalPoints?.toLocaleString() || 0} P\n                </div>\n              )}\n              {churchSortBy === 'averageWpm' && (\n                <div className=\"font-bold text-lg text-foreground\" data-testid={`church-avg-wpm-${church.id}`}>\n                  평균 {Math.round(church.averageWpm || 0)} WPM\n                </div>\n              )}\n              {churchSortBy === 'memberCount' && (\n                <div className=\"font-bold text-lg text-foreground\" data-testid={`church-members-${church.id}`}>\n                  {church.memberCount || 0} 명\n                </div>\n              )}\n              <div className=\"text-sm text-muted-foreground\">\n                {churchSortBy !== 'averageWpm' && `평균 ${Math.round(church.averageWpm || 0)} WPM`}\n              </div>\n            </div>\n          </div>\n        ))}\n        \n        <Pagination \n          total={churchLeaderboard.total || 0} \n          current={currentPage} \n          onChange={setCurrentPage} \n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-2 flex items-center\">\n            <Trophy className=\"h-8 w-8 mr-3 text-primary\" />\n            리더보드\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            전 세계 성도들과 함께 건전한 경쟁을 통해 성장하세요\n          </p>\n        </div>\n\n        <UserRankCard />\n\n        <Tabs defaultValue=\"global\" className=\"space-y-6\" onValueChange={() => setCurrentPage(1)}>\n          <TabsList className=\"grid w-full max-w-md grid-cols-3\">\n            <TabsTrigger value=\"global\" className=\"flex items-center space-x-2\" data-testid=\"tab-global\">\n              <Globe className=\"h-4 w-4\" />\n              <span>전체 랭킹</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"personal\" className=\"flex items-center space-x-2\" data-testid=\"tab-personal\">\n              <TrendingUp className=\"h-4 w-4\" />\n              <span>개인 랭킹</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"church\" className=\"flex items-center space-x-2\" data-testid=\"tab-church\">\n              <Users className=\"h-4 w-4\" />\n              <span>교회 랭킹</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"global\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                  <CardTitle className=\"flex items-center\">\n                    <Globe className=\"h-5 w-5 mr-2 text-primary\" />\n                    전체 리더보드\n                  </CardTitle>\n                  <div className=\"flex flex-col sm:flex-row gap-2\">\n                    <Select value={globalSortBy} onValueChange={(value) => {\n                      setGlobalSortBy(value as any);\n                      setCurrentPage(1);\n                    }}>\n                      <SelectTrigger className=\"w-[140px]\" data-testid=\"select-global-sort\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"totalPoints\">총 포인트</SelectItem>\n                        <SelectItem value=\"averageWpm\">평균 WPM</SelectItem>\n                        <SelectItem value=\"totalAccuracy\">정확도</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    \n                    <Select value={timeRange} onValueChange={(value) => {\n                      setTimeRange(value as any);\n                      setCurrentPage(1);\n                    }}>\n                      <SelectTrigger className=\"w-[100px]\" data-testid=\"select-time-range\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">전체</SelectItem>\n                        <SelectItem value=\"monthly\">이번 달</SelectItem>\n                        <SelectItem value=\"weekly\">이번 주</SelectItem>\n                        <SelectItem value=\"daily\">오늘</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                    <Target className=\"h-3 w-3\" />\n                    {getSortLabel(globalSortBy)} 기준\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                    <Clock className=\"h-3 w-3\" />\n                    {getTimeRangeLabel(timeRange)}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {renderGlobalLeaderboard()}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"personal\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Trophy className=\"h-5 w-5 mr-2 text-primary\" />\n                    개인 리더보드\n                  </div>\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                    <TrendingUp className=\"h-3 w-3\" />\n                    평균 WPM 기준\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {renderPersonalLeaderboard()}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"church\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                  <CardTitle className=\"flex items-center\">\n                    <Users className=\"h-5 w-5 mr-2 text-primary\" />\n                    교회 리더보드\n                  </CardTitle>\n                  <Select value={churchSortBy} onValueChange={(value) => {\n                    setChurchSortBy(value as any);\n                    setCurrentPage(1);\n                  }}>\n                    <SelectTrigger className=\"w-[140px]\" data-testid=\"select-church-sort\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"totalPoints\">총 포인트</SelectItem>\n                      <SelectItem value=\"averageWpm\">평균 WPM</SelectItem>\n                      <SelectItem value=\"memberCount\">멤버 수</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Badge variant=\"outline\" className=\"flex items-center gap-1 w-fit\">\n                  <Star className=\"h-3 w-3\" />\n                  {getSortLabel(churchSortBy)} 기준\n                </Badge>\n              </CardHeader>\n              <CardContent>\n                {renderChurchLeaderboard()}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}","size_bytes":23812},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/practice.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { BookOpen, RotateCcw, Globe, Play, Pause, CheckCircle, Clock } from \"lucide-react\";\nimport TypingPractice from \"@/components/typing-practice\";\nimport type { BibleVerse, BibleBook, Translation } from \"@shared/schema\";\n\nconst languageOptions = [\n  { code: \"ko\", name: \"한국어\" },\n  { code: \"en\", name: \"English\" },\n  { code: \"zh\", name: \"中文\" },\n  { code: \"ja\", name: \"日本語\" },\n];\n\nexport default function Practice() {\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Selection states\n  const [selectedLanguage, setSelectedLanguage] = useState(\"ko\");\n  const [selectedTranslation, setSelectedTranslation] = useState<string>(\"\");\n  const [selectedBook, setSelectedBook] = useState<string>(\"\");\n  const [selectedChapter, setSelectedChapter] = useState<number>(1);\n  const [selectedVerse, setSelectedVerse] = useState<BibleVerse | null>(null);\n  \n  // Debouncing for handleRandomVerse to prevent server overload\n  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null);\n  \n  // Cleanup debounce timer on unmount\n  useEffect(() => {\n    return () => {\n      if (debounceTimerRef.current) {\n        clearTimeout(debounceTimerRef.current);\n      }\n    };\n  }, []);\n  \n  // Typing states\n  const [isTypingMode, setIsTypingMode] = useState(false);\n\n  // Queries\n  const { data: books } = useQuery<BibleBook[]>({\n    queryKey: [\"/api/bible/books\"],\n  });\n\n  const { data: translations } = useQuery<Translation[]>({\n    queryKey: [`/api/bible/translations?language=${selectedLanguage}`],\n    enabled: !!selectedLanguage,\n  });\n\n  const { data: chapterVerses, isLoading: isLoadingChapter } = useQuery<BibleVerse[]>({\n    queryKey: [`/api/bible/chapter/${selectedBook}/${selectedChapter}?translationId=${selectedTranslation}`],\n    enabled: !!selectedBook && !!selectedTranslation,\n  });\n\n  const { data: randomVerse, refetch: refetchRandomVerse } = useQuery<BibleVerse>({\n    queryKey: [`/api/bible/random-verse?translationId=${selectedTranslation}`],\n    enabled: !!selectedTranslation,\n  });\n\n  // Set default translation when translations are loaded\n  useEffect(() => {\n    if (translations && translations.length > 0 && !selectedTranslation) {\n      if (selectedLanguage === \"ko\") {\n        // Try GAEREVIS first (has more complete verse data), then GAE, then fallback to first\n        const defaultTranslation = translations.find((t: Translation) => t.code === \"GAEREVIS\") || \n                                  translations.find((t: Translation) => t.code === \"GAE\") || \n                                  translations[0];\n        setSelectedTranslation(defaultTranslation.id);\n      } else {\n        setSelectedTranslation(translations[0].id);\n      }\n    }\n  }, [translations, selectedLanguage, selectedTranslation]);\n\n  // Session creation mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async (sessionData: any) => {\n      await apiRequest(\"POST\", \"/api/typing/session\", sessionData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/typing/sessions\"] });\n      toast({\n        title: \"완료!\",\n        description: \"타이핑 세션이 성공적으로 기록되었습니다.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"로그인 필요\",\n          description: \"로그인 후 다시 시도해주세요.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"오류\",\n        description: \"세션 저장 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Event handlers\n  const handleLanguageChange = (language: string) => {\n    setSelectedLanguage(language);\n    setSelectedTranslation(\"\");\n    setSelectedBook(\"\");\n    setSelectedVerse(null);\n    setIsTypingMode(false);\n  };\n\n  const handleTranslationChange = (translationId: string) => {\n    setSelectedTranslation(translationId);\n    setSelectedBook(\"\");\n    setSelectedVerse(null);\n    setIsTypingMode(false);\n  };\n\n  const handleBookChange = (bookId: string) => {\n    setSelectedBook(bookId);\n    setSelectedChapter(1);\n    setSelectedVerse(null);\n    setIsTypingMode(false);\n  };\n\n  const handleChapterChange = (chapter: number) => {\n    setSelectedChapter(chapter);\n    setSelectedVerse(null);\n    setIsTypingMode(false);\n  };\n\n  const handleVerseSelect = (verse: BibleVerse) => {\n    setSelectedVerse(verse);\n    setIsTypingMode(false);\n  };\n\n  // Debounced version of handleRandomVerse to prevent server overload\n  const debouncedHandleRandomVerse = () => {\n    // Clear previous timer if exists\n    if (debounceTimerRef.current) {\n      clearTimeout(debounceTimerRef.current);\n    }\n    \n    // Set new timer - execute after 1 second\n    debounceTimerRef.current = setTimeout(() => {\n      handleRandomVerse();\n    }, 1000);\n  };\n\n  const handleRandomVerse = () => {\n    if (randomVerse) {\n      setSelectedVerse(randomVerse);\n      setIsTypingMode(false);\n      refetchRandomVerse();\n    }\n  };\n\n  const handleStartTyping = () => {\n    if (!selectedVerse) return;\n    setIsTypingMode(true);\n  };\n\n  const handleTypingComplete = (wpm: number, accuracy: number, wordsTyped: number, timeSpent: number) => {\n    if (!selectedVerse || !isAuthenticated) return;\n\n    const pointsEarned = Math.round((wpm * accuracy / 100) * 0.1);\n\n    createSessionMutation.mutate({\n      verseId: selectedVerse.id,\n      wpm,\n      accuracy,\n      wordsTyped,\n      timeSpent,\n      pointsEarned,\n    });\n\n    setIsTypingMode(false);\n  };\n\n  const getBookName = (bookId: string) => {\n    if (!books) return \"\";\n    const book = books.find((b: BibleBook) => b.id === bookId);\n    if (!book) return \"\";\n    \n    if (selectedLanguage === \"ko\") return book.bookNameKr || book.bookCode;\n    if (selectedLanguage === \"en\") return book.bookNameEn || book.bookCode;\n    if (selectedLanguage === \"zh\") return book.bookNameEn || book.bookCode;\n    if (selectedLanguage === \"ja\") return book.bookNameEn || book.bookCode;\n    \n    return book.bookCode;\n  };\n\n  const getCurrentBookName = () => {\n    if (!selectedVerse || !books) return \"\";\n    return getBookName(selectedVerse.bookId);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 dark:from-amber-950 dark:via-orange-950 dark:to-yellow-950\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-amber-600 to-orange-600 dark:from-amber-800 dark:to-orange-800 text-white shadow-lg\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <BookOpen className=\"h-8 w-8\" />\n              <h1 className=\"text-2xl md:text-3xl font-bold\">성경필사</h1>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Globe className=\"h-4 w-4\" />\n              <Select value={selectedLanguage} onValueChange={handleLanguageChange}>\n                <SelectTrigger className=\"w-[120px] bg-white/10 border-white/20 text-white\" data-testid=\"select-language\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {languageOptions.map((lang) => (\n                    <SelectItem key={lang.code} value={lang.code}>\n                      {lang.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid lg:grid-cols-2 gap-8 max-w-7xl mx-auto\">\n          {/* Left Panel - Bible Book Style */}\n          <Card className=\"bg-gradient-to-br from-amber-50 to-orange-100 dark:from-amber-950 dark:to-orange-950 border-amber-200 dark:border-amber-800 shadow-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-amber-100 to-orange-100 dark:from-amber-900 dark:to-orange-900 border-b border-amber-200 dark:border-amber-700\">\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <BookOpen className=\"h-5 w-5 text-amber-700 dark:text-amber-300\" />\n                  <span className=\"text-amber-800 dark:text-amber-200\">구절 선택</span>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={debouncedHandleRandomVerse}\n                  className=\"border-amber-300 text-amber-700 hover:bg-amber-100 dark:border-amber-600 dark:text-amber-300 dark:hover:bg-amber-800\"\n                  data-testid=\"button-random-verse\"\n                >\n                  <RotateCcw className=\"h-4 w-4 mr-2\" />\n                  랜덤 구절\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6 space-y-6\">\n              {/* Selection Controls */}\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-amber-800 dark:text-amber-200 mb-2 block\">번역본</label>\n                  {translations && translations.length > 0 && (\n                    <Select value={selectedTranslation} onValueChange={handleTranslationChange}>\n                      <SelectTrigger className=\"border-amber-300 dark:border-amber-600\" data-testid=\"select-translation\">\n                        <SelectValue placeholder=\"번역본 선택\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {translations.map((translation: Translation) => (\n                          <SelectItem key={translation.id} value={translation.id}>\n                            {translation.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-amber-800 dark:text-amber-200 mb-2 block\">성경</label>\n                    <Select value={selectedBook} onValueChange={handleBookChange}>\n                      <SelectTrigger className=\"border-amber-300 dark:border-amber-600\" data-testid=\"select-book\">\n                        <SelectValue placeholder=\"성경 선택\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {books?.map((book: BibleBook) => (\n                          <SelectItem key={book.id} value={book.id}>\n                            {getBookName(book.id)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"text-sm font-medium text-amber-800 dark:text-amber-200 mb-2 block\">장</label>\n                    <Select \n                      value={selectedChapter.toString()} \n                      onValueChange={(value) => handleChapterChange(parseInt(value))}\n                      disabled={!selectedBook}\n                    >\n                      <SelectTrigger className=\"border-amber-300 dark:border-amber-600\" data-testid=\"select-chapter\">\n                        <SelectValue placeholder=\"장 선택\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {selectedBook && books && Array.from({ length: books.find((b: BibleBook) => b.id === selectedBook)?.chapters || 1 }, (_, i) => i + 1).map((chapter) => (\n                          <SelectItem key={chapter} value={chapter.toString()}>\n                            {chapter}장\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n\n              {/* Chapter Verses List */}\n              {selectedBook && selectedTranslation && (\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold text-amber-800 dark:text-amber-200\">\n                      {getBookName(selectedBook)} {selectedChapter}장\n                    </h3>\n                    {isLoadingChapter && <Clock className=\"h-4 w-4 animate-spin text-amber-600\" />}\n                  </div>\n                  \n                  <div className=\"border border-amber-200 dark:border-amber-700 rounded-lg bg-white/50 dark:bg-amber-950/50\">\n                    <div className=\"p-4 space-y-2\">\n                      {chapterVerses?.map((verse) => (\n                        <div\n                          key={verse.id}\n                          className={`p-3 rounded-lg cursor-pointer transition-all duration-200 border ${\n                            selectedVerse?.id === verse.id\n                              ? 'bg-amber-200 dark:bg-amber-800 border-amber-400 dark:border-amber-600 shadow-md'\n                              : 'bg-white/70 dark:bg-amber-950/70 border-amber-200 dark:border-amber-700 hover:bg-amber-100 dark:hover:bg-amber-900'\n                          }`}\n                          onClick={() => handleVerseSelect(verse)}\n                          data-testid={`verse-item-${verse.verse}`}\n                        >\n                          <div className=\"flex items-start space-x-3\">\n                            <Badge \n                              variant=\"secondary\" \n                              className=\"flex-shrink-0 bg-amber-300 dark:bg-amber-700 text-amber-800 dark:text-amber-200\"\n                            >\n                              {verse.verse}\n                            </Badge>\n                            <p className=\"text-sm text-amber-900 dark:text-amber-100 leading-relaxed\">\n                              {verse.content}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Center Divider */}\n          <div className=\"hidden lg:flex items-center justify-center\">\n            <Separator orientation=\"vertical\" className=\"h-full bg-gradient-to-b from-amber-300 to-orange-300 dark:from-amber-600 dark:to-orange-600 w-1 rounded-full shadow-lg\" />\n          </div>\n\n          {/* Right Panel - Bible Book Style */}\n          <Card className=\"bg-gradient-to-br from-orange-50 to-yellow-100 dark:from-orange-950 dark:to-yellow-950 border-orange-200 dark:border-orange-800 shadow-2xl lg:-ml-8\">\n            <CardHeader className=\"bg-gradient-to-r from-orange-100 to-yellow-100 dark:from-orange-900 dark:to-yellow-900 border-b border-orange-200 dark:border-orange-700\">\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Play className=\"h-5 w-5 text-orange-700 dark:text-orange-300\" />\n                  <span className=\"text-orange-800 dark:text-orange-200\">필사 연습</span>\n                </div>\n                {selectedVerse && !isTypingMode && (\n                  <Button \n                    onClick={handleStartTyping}\n                    className=\"bg-orange-600 hover:bg-orange-700 text-white dark:bg-orange-700 dark:hover:bg-orange-800\"\n                    data-testid=\"button-start-typing\"\n                  >\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    시작하기\n                  </Button>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              {selectedVerse ? (\n                <div className=\"space-y-6\">\n                  {/* Verse Display */}\n                  {!isTypingMode && (\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className=\"bg-orange-200 dark:bg-orange-800 text-orange-800 dark:text-orange-200\">\n                          {getCurrentBookName()} {selectedVerse.chapter}:{selectedVerse.verse}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"bg-white/80 dark:bg-orange-950/80 border-l-4 border-l-orange-500 p-6 rounded-lg shadow-lg\">\n                        <p className=\"text-lg leading-relaxed text-orange-900 dark:text-orange-100\" data-testid=\"text-selected-verse\">\n                          <span className=\"text-orange-600 dark:text-orange-400 font-semibold mr-3\">\n                            {selectedVerse.verse}\n                          </span>\n                          {selectedVerse.content}\n                        </p>\n                      </div>\n\n                      <div className=\"bg-orange-50 dark:bg-orange-950/50 border border-orange-200 dark:border-orange-700 rounded-lg p-4\">\n                        <h4 className=\"font-semibold text-orange-800 dark:text-orange-200 mb-2\">💡 필사 안내</h4>\n                        <ul className=\"text-sm text-orange-700 dark:text-orange-300 space-y-1\">\n                          <li>• 화면에 표시된 말씀을 정확히 타이핑하세요</li>\n                          <li>• 정확도를 우선시하며 천천히 입력하세요</li>\n                          <li>• 말씀을 묵상하며 마음에 새겨보세요</li>\n                        </ul>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Typing Practice */}\n                  {isTypingMode && (\n                    <div className=\"bg-white/90 dark:bg-orange-950/90 rounded-lg p-6 border border-orange-200 dark:border-orange-700\">\n                      <TypingPractice\n                        verse={selectedVerse}\n                        language={selectedLanguage}\n                        onComplete={handleTypingComplete}\n                        bookName={getCurrentBookName()}\n                      />\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n                  <BookOpen className=\"h-16 w-16 text-orange-300 dark:text-orange-600 mb-4\" />\n                  <h3 className=\"text-xl font-semibold text-orange-800 dark:text-orange-200 mb-2\">\n                    구절을 선택해주세요\n                  </h3>\n                  <p className=\"text-orange-600 dark:text-orange-400 max-w-sm\">\n                    왼쪽에서 성경, 장을 선택한 후 원하는 구절을 클릭하여 필사를 시작하세요.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20003},"client/src/pages/profile.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  User as UserIcon, \n  Trophy, \n  TrendingUp, \n  Calendar, \n  Award, \n  Target, \n  Clock, \n  Users,\n  ChevronRight,\n  BookOpen,\n  BarChart3,\n  Edit,\n  Search,\n  Loader2,\n  MapPin,\n  BarChart2\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport StatsDisplay from \"@/components/stats-display\";\nimport { format } from \"date-fns\";\nimport type { User, TypingSession, Church } from \"@shared/schema\";\n\n// Form validation schema\nconst editProfileSchema = z.object({\n  firstName: z.string().min(1, \"이름은 필수입니다\").max(100, \"이름은 100자를 초과할 수 없습니다\"),\n  age: z.number().min(10, \"연령은 10세 이상이어야 합니다\").max(100, \"연령은 100세 이하여야 합니다\").optional(),\n  region: z.string().max(100).optional(),\n  churchId: z.string().nullable().optional(),\n});\n\ntype EditProfileFormData = z.infer<typeof editProfileSchema>;\n\n// 한국 시/도 목록\nconst koreanRegions = [\n  \"서울특별시\",\n  \"부산광역시\", \n  \"대구광역시\",\n  \"인천광역시\",\n  \"광주광역시\",\n  \"대전광역시\",\n  \"울산광역시\",\n  \"세종특별자치시\",\n  \"경기도\",\n  \"강원특별자치도\",\n  \"충청북도\",\n  \"충청남도\",\n  \"전라북도\",\n  \"전라남도\",\n  \"경상북도\",\n  \"경상남도\",\n  \"제주특별자치도\",\n];\n\n// 연령 옵션 생성 (10-90세)\nconst generateAgeOptions = () => {\n  const ages = [];\n  for (let age = 10; age <= 90; age++) {\n    ages.push(age);\n  }\n  return ages;\n};\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [churchSearch, setChurchSearch] = useState(\"\");\n  const [isChurchSearchOpen, setIsChurchSearchOpen] = useState(false);\n\n  const { data: userStats, isLoading: statsLoading } = useQuery<{\n    averageWpm: number;\n    averageAccuracy: number;\n    totalWords: number;\n    totalSessions: number;\n  }>({\n    queryKey: [\"/api/user/stats\"],\n  });\n\n  const { data: recentSessions, isLoading: sessionsLoading } = useQuery<TypingSession[]>({\n    queryKey: [\"/api/typing/sessions\"],\n  });\n\n  const { data: userChurch } = useQuery<Church | null>({\n    queryKey: [\"/api/user/church\"],\n  });\n\n  const { data: personalRanking } = useQuery({\n    queryKey: [\"/api/leaderboard/personal\"],\n    select: (data: User[]) => {\n      if (!data || !user) return null;\n      const userIndex = data.findIndex((u: User) => u.id === (user as User).id);\n      return userIndex >= 0 ? userIndex + 1 : null;\n    }\n  });\n\n  const getPerformanceLevel = (wpm: number) => {\n    if (wpm >= 80) return { label: \"Expert\", color: \"text-purple-600\", bg: \"bg-purple-100 dark:bg-purple-900/30\" };\n    if (wpm >= 60) return { label: \"Advanced\", color: \"text-blue-600\", bg: \"bg-blue-100 dark:bg-blue-900/30\" };\n    if (wpm >= 40) return { label: \"Intermediate\", color: \"text-green-600\", bg: \"bg-green-100 dark:bg-green-900/30\" };\n    return { label: \"Beginner\", color: \"text-yellow-600\", bg: \"bg-yellow-100 dark:bg-yellow-900/30\" };\n  };\n\n  const level = getPerformanceLevel(userStats?.averageWpm || 0);\n\n  // 프로필 완성도 계산\n  const calculateProfileCompletion = (user: User | null) => {\n    if (!user) return { percentage: 0, completedFields: 0, totalFields: 5 };\n    \n    const fields = [\n      user.firstName,\n      user.email, \n      user.age,\n      user.region,\n      user.churchId\n    ];\n    \n    const completedFields = fields.filter(field => field !== null && field !== undefined && field !== '').length;\n    const totalFields = fields.length;\n    const percentage = Math.round((completedFields / totalFields) * 100);\n    \n    return { percentage, completedFields, totalFields };\n  };\n\n  const profileCompletion = calculateProfileCompletion(user as User);\n\n  // Handle keyboard events for profile completion hint\n  const handleProfileCompletionKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      handleEditModalOpen();\n    }\n  };\n\n  // Edit form setup\n  const editForm = useForm<EditProfileFormData>({\n    resolver: zodResolver(editProfileSchema),\n    defaultValues: {\n      firstName: (user as User)?.firstName || \"\",\n      age: (user as User)?.age || undefined,\n      region: (user as User)?.region || undefined,\n      churchId: (user as User)?.churchId || undefined,\n    },\n  });\n\n  // 교회 목록 조회\n  const { data: churches, isLoading: churchesLoading } = useQuery<Church[]>({\n    queryKey: [\"/api/churches\", { search: churchSearch }],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (churchSearch.trim()) {\n        params.append(\"search\", churchSearch.trim());\n      }\n      params.append(\"limit\", \"20\");\n      return fetch(`/api/churches?${params.toString()}`).then(res => res.json());\n    },\n    enabled: isChurchSearchOpen,\n  });\n\n  // 프로필 업데이트 mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: EditProfileFormData) => {\n      const response = await apiRequest(\"PATCH\", \"/api/users/profile\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"프로필이 업데이트되었습니다!\",\n        description: \"변경사항이 성공적으로 저장되었습니다.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setIsEditModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"프로필 업데이트에 실패했습니다\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onEditSubmit = (data: EditProfileFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const handleChurchSelect = (churchId: string, churchName: string) => {\n    editForm.setValue(\"churchId\", churchId);\n    setIsChurchSearchOpen(false);\n    setChurchSearch(churchName);\n  };\n\n  const selectedChurch = churches?.find(church => church.id === editForm.watch(\"churchId\"));\n\n  // Reset form when modal opens\n  const handleEditModalOpen = () => {\n    editForm.reset({\n      firstName: (user as User)?.firstName || \"\",\n      age: (user as User)?.age || undefined,\n      region: (user as User)?.region || undefined,\n      churchId: (user as User)?.churchId || undefined,\n    });\n    setChurchSearch(userChurch?.name || \"\");\n    setIsEditModalOpen(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        {/* Profile Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-start space-x-6 p-6 bg-card border border-border rounded-xl\">\n            <Avatar className=\"h-20 w-20\">\n              <AvatarImage src={(user as User)?.profileImageUrl || undefined} />\n              <AvatarFallback className=\"text-2xl\">\n                {((user as User)?.firstName?.charAt(0) || (user as User)?.email?.charAt(0) || '?').toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            \n            <div className=\"flex-1\">\n              <h1 className=\"text-2xl md:text-3xl font-bold text-foreground mb-2\" data-testid=\"text-user-name\">\n                {(user as User)?.firstName || (user as User)?.email?.split('@')[0] || '익명 사용자'}님\n              </h1>\n              <p className=\"text-muted-foreground mb-4\">\n                {(user as User)?.email}\n              </p>\n\n              {/* 개인 정보 섹션 */}\n              <div className=\"space-y-3 mb-4\">\n                {/* 나이 정보 */}\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm text-foreground\">\n                    나이: {(user as User)?.age ? (\n                      <span className=\"font-medium\" data-testid=\"text-user-age\">{(user as User).age}세</span>\n                    ) : (\n                      <span className=\"text-muted-foreground\" data-testid=\"text-age-unset\">미설정</span>\n                    )}\n                  </span>\n                </div>\n\n                {/* 지역 정보 */}\n                <div className=\"flex items-center space-x-2\">\n                  <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm text-foreground\">\n                    지역: {(user as User)?.region ? (\n                      <span className=\"font-medium\" data-testid=\"text-user-region\">{(user as User).region}</span>\n                    ) : (\n                      <span className=\"text-muted-foreground\" data-testid=\"text-region-unset\">미설정</span>\n                    )}\n                  </span>\n                </div>\n\n                {/* 프로필 완성도 */}\n                <div className=\"flex items-center space-x-2\">\n                  <BarChart2 className=\"h-4 w-4 text-muted-foreground\" />\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-sm text-foreground\">프로필 완성도</span>\n                      <span className=\"text-sm font-medium text-primary\" data-testid=\"text-completion-percentage\">\n                        {profileCompletion.percentage}%\n                      </span>\n                    </div>\n                    <Progress value={profileCompletion.percentage} className=\"w-full h-2\" data-testid=\"progress-completion\" />\n                    <div className=\"text-xs text-muted-foreground mt-1\">\n                      {profileCompletion.completedFields}/{profileCompletion.totalFields} 항목 완료\n                      {profileCompletion.percentage < 100 && (\n                        <span \n                          className=\"text-primary cursor-pointer hover:underline hover:text-primary/80 ml-1 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 rounded-sm px-1 transition-colors\"\n                          role=\"button\"\n                          tabIndex={0}\n                          onClick={handleEditModalOpen}\n                          onKeyDown={handleProfileCompletionKeyDown}\n                          data-testid=\"link-complete-profile\"\n                        >\n                          → 편집하여 완성하기\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-4 flex-wrap gap-2\">\n                <Badge className={`${level.bg} ${level.color}`}>\n                  {level.label} 타이피스트\n                </Badge>\n                {personalRanking && (\n                  <Badge variant=\"outline\">\n                    전체 #{personalRanking}위\n                  </Badge>\n                )}\n                {userChurch?.name && (\n                  <Badge variant=\"secondary\" data-testid=\"badge-church\">\n                    {userChurch.name}\n                  </Badge>\n                )}\n              </div>\n            </div>\n\n            <div className=\"text-right space-y-2\">\n              <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-points\">\n                {(user as User)?.totalPoints || 0}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">포인트</div>\n              \n              <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n                <DialogTrigger asChild>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={handleEditModalOpen}\n                    data-testid=\"button-edit-profile\"\n                  >\n                    <Edit className=\"h-4 w-4 mr-2\" />\n                    프로필 편집\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>프로필 편집</DialogTitle>\n                  </DialogHeader>\n                  \n                  <Form {...editForm}>\n                    <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-6\">\n                      {/* 이름 입력 */}\n                      <FormField\n                        control={editForm.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center\">\n                              <UserIcon className=\"h-4 w-4 mr-2\" />\n                              이름 (필수)\n                            </FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"이름을 입력해주세요\"\n                                data-testid=\"input-firstName\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* 연령 선택 */}\n                      <FormField\n                        control={editForm.control}\n                        name=\"age\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-2\" />\n                              연령 (선택사항)\n                            </FormLabel>\n                            <Select \n                              onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)}\n                              value={field.value ? field.value.toString() : undefined}\n                            >\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-age\">\n                                  <SelectValue placeholder=\"연령을 선택해주세요\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {generateAgeOptions().map((age) => (\n                                  <SelectItem key={age} value={age.toString()}>\n                                    {age}세\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* 지역 선택 */}\n                      <FormField\n                        control={editForm.control}\n                        name=\"region\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center\">\n                              <MapPin className=\"h-4 w-4 mr-2\" />\n                              지역 (선택사항)\n                            </FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-region\">\n                                  <SelectValue placeholder=\"거주 지역을 선택해주세요\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {koreanRegions.map((region) => (\n                                  <SelectItem key={region} value={region}>\n                                    {region}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* 교회 선택 */}\n                      <FormField\n                        control={editForm.control}\n                        name=\"churchId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center\">\n                              <Users className=\"h-4 w-4 mr-2\" />\n                              교회 (선택사항)\n                            </FormLabel>\n                            <div className=\"space-y-3\">\n                              {/* 교회 검색 입력 */}\n                              <div className=\"flex space-x-2\">\n                                <Input\n                                  placeholder=\"교회명을 검색해주세요\"\n                                  value={churchSearch}\n                                  onChange={(e) => {\n                                    setChurchSearch(e.target.value);\n                                    setIsChurchSearchOpen(true);\n                                  }}\n                                  data-testid=\"input-church-search\"\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  onClick={() => setIsChurchSearchOpen(true)}\n                                  disabled={churchesLoading}\n                                  data-testid=\"button-search-church\"\n                                >\n                                  {churchesLoading ? (\n                                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                  ) : (\n                                    <Search className=\"h-4 w-4\" />\n                                  )}\n                                </Button>\n                              </div>\n\n                              {/* 현재 선택된 교회 표시 */}\n                              {selectedChurch && (\n                                <div className=\"p-3 bg-muted rounded-lg\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <div>\n                                      <p className=\"font-medium\">{selectedChurch.name}</p>\n                                      {selectedChurch.description && (\n                                        <p className=\"text-sm text-muted-foreground\">\n                                          {selectedChurch.description}\n                                        </p>\n                                      )}\n                                    </div>\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => {\n                                        field.onChange(null);\n                                        setChurchSearch(\"\");\n                                      }}\n                                      data-testid=\"button-remove-church\"\n                                    >\n                                      제거\n                                    </Button>\n                                  </div>\n                                </div>\n                              )}\n\n                              {/* 교회 검색 결과 */}\n                              {isChurchSearchOpen && churches && churches.length > 0 && (\n                                <div className=\"border rounded-lg max-h-48 overflow-y-auto\">\n                                  {churches.map((church) => (\n                                    <div\n                                      key={church.id}\n                                      className=\"p-3 hover:bg-muted cursor-pointer border-b last:border-b-0\"\n                                      onClick={() => handleChurchSelect(church.id, church.name)}\n                                      data-testid={`church-option-${church.id}`}\n                                    >\n                                      <div className=\"font-medium\">{church.name}</div>\n                                      {church.description && (\n                                        <div className=\"text-sm text-muted-foreground\">\n                                          {church.description}\n                                        </div>\n                                      )}\n                                    </div>\n                                  ))}\n                                </div>\n                              )}\n\n                              {isChurchSearchOpen && churches && churches.length === 0 && churchSearch && (\n                                <p className=\"text-sm text-muted-foreground\">검색 결과가 없습니다.</p>\n                              )}\n                            </div>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* 버튼 그룹 */}\n                      <div className=\"flex justify-end space-x-3\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setIsEditModalOpen(false)}\n                          data-testid=\"button-cancel-edit\"\n                        >\n                          취소\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={updateProfileMutation.isPending}\n                          data-testid=\"button-save-profile\"\n                        >\n                          {updateProfileMutation.isPending ? (\n                            <>\n                              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                              저장 중...\n                            </>\n                          ) : (\n                            '프로필 저장'\n                          )}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-6 mb-8\">\n          {/* Quick Stats */}\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"h-5 w-5 mr-2 text-primary\" />\n                나의 통계\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  {[1, 2, 3, 4].map((i) => (\n                    <div key={i} className=\"text-center space-y-2\">\n                      <div className=\"h-8 bg-muted rounded animate-pulse\"></div>\n                      <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center space-y-2\">\n                    <div className=\"text-2xl font-bold text-primary\" data-testid=\"stat-avg-wpm\">\n                      {Math.round(userStats?.averageWpm || 0)}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">평균 WPM</div>\n                  </div>\n                  <div className=\"text-center space-y-2\">\n                    <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-avg-accuracy\">\n                      {Math.round(userStats?.averageAccuracy || 0)}%\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">평균 정확도</div>\n                  </div>\n                  <div className=\"text-center space-y-2\">\n                    <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"stat-total-words\">\n                      {(userStats?.totalWords || 0).toLocaleString()}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">총 타이핑 단어</div>\n                  </div>\n                  <div className=\"text-center space-y-2\">\n                    <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"stat-total-sessions\">\n                      {userStats?.totalSessions || 0}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">총 세션</div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>빠른 실행</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Link href=\"/practice\">\n                <Button className=\"w-full justify-between\" data-testid=\"button-quick-practice\">\n                  <div className=\"flex items-center\">\n                    <BookOpen className=\"h-4 w-4 mr-2\" />\n                    필사 연습하기\n                  </div>\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </Link>\n              <Link href=\"/challenges\">\n                <Button variant=\"outline\" className=\"w-full justify-between\" data-testid=\"button-quick-challenges\">\n                  <div className=\"flex items-center\">\n                    <Target className=\"h-4 w-4 mr-2\" />\n                    챌린지 참여\n                  </div>\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </Link>\n              <Link href=\"/leaderboard\">\n                <Button variant=\"outline\" className=\"w-full justify-between\" data-testid=\"button-quick-leaderboard\">\n                  <div className=\"flex items-center\">\n                    <Trophy className=\"h-4 w-4 mr-2\" />\n                    리더보드 보기\n                  </div>\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Detailed Content */}\n        <Tabs defaultValue=\"sessions\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full max-w-md grid-cols-2\">\n            <TabsTrigger value=\"sessions\" className=\"flex items-center space-x-2\" data-testid=\"tab-sessions\">\n              <Clock className=\"h-4 w-4\" />\n              <span>최근 활동</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"achievements\" className=\"flex items-center space-x-2\" data-testid=\"tab-achievements\">\n              <Award className=\"h-4 w-4\" />\n              <span>성취</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"sessions\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Clock className=\"h-5 w-5 mr-2 text-primary\" />\n                    최근 타이핑 세션\n                  </div>\n                  {(recentSessions?.length ?? 0) > 0 && (\n                    <Badge variant=\"outline\">{recentSessions?.length}개 세션</Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {sessionsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"flex items-center space-x-4 p-4 border border-border rounded-lg animate-pulse\">\n                        <div className=\"w-12 h-12 bg-muted rounded\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                        </div>\n                        <div className=\"space-y-1 text-right\">\n                          <div className=\"h-4 bg-muted rounded w-16\"></div>\n                          <div className=\"h-3 bg-muted rounded w-12\"></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : !recentSessions || (recentSessions?.length ?? 0) === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Clock className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">아직 활동이 없습니다</h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      첫 번째 성경 필사를 시작해보세요!\n                    </p>\n                    <Link href=\"/practice\">\n                      <Button data-testid=\"button-start-first-practice\">\n                        필사 시작하기\n                      </Button>\n                    </Link>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {recentSessions?.map((session: TypingSession) => (\n                      <div key={session.id} className=\"flex items-center space-x-4 p-4 border border-border rounded-lg hover:bg-muted/30 transition-colors\">\n                        <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <BookOpen className=\"h-6 w-6 text-primary\" />\n                        </div>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              KO\n                            </Badge>\n                            <span className=\"text-sm text-muted-foreground\">\n                              {session.completedAt && format(new Date(session.completedAt), \"MM/dd HH:mm\")}\n                            </span>\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {session.wordsTyped}단어 • {session.timeSpent}초\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-right\">\n                          <div className=\"font-semibold text-foreground\">\n                            {Math.round(session.wpm)} WPM\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {Math.round(session.accuracy)}% 정확도\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-right\">\n                          <div className=\"text-sm font-medium text-primary\">\n                            +{session.pointsEarned || 0}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">포인트</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"achievements\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Award className=\"h-5 w-5 mr-2 text-primary\" />\n                  성취 및 배지\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {/* Sample achievements based on user stats */}\n                  {(userStats?.totalSessions ?? 0) >= 1 && (\n                    <div className=\"flex items-center space-x-3 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg\">\n                      <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center\">\n                        <BookOpen className=\"h-6 w-6 text-green-600\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">첫 걸음</h4>\n                        <p className=\"text-sm text-muted-foreground\">첫 번째 필사 완료</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {(userStats?.averageWpm ?? 0) >= 30 && (\n                    <div className=\"flex items-center space-x-3 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\n                      <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center\">\n                        <TrendingUp className=\"h-6 w-6 text-blue-600\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">속도향상</h4>\n                        <p className=\"text-sm text-muted-foreground\">30 WPM 달성</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {(userStats?.averageAccuracy ?? 0) >= 95 && (\n                    <div className=\"flex items-center space-x-3 p-4 bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg\">\n                      <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-full flex items-center justify-center\">\n                        <Target className=\"h-6 w-6 text-purple-600\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">정확한 손</h4>\n                        <p className=\"text-sm text-muted-foreground\">95% 정확도 달성</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {(userStats?.totalSessions ?? 0) >= 10 && (\n                    <div className=\"flex items-center space-x-3 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n                      <div className=\"w-12 h-12 bg-yellow-100 dark:bg-yellow-900/30 rounded-full flex items-center justify-center\">\n                        <Calendar className=\"h-6 w-6 text-yellow-600\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">꾸준함</h4>\n                        <p className=\"text-sm text-muted-foreground\">10회 세션 완료</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {userChurch && (\n                    <div className=\"flex items-center space-x-3 p-4 bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg\">\n                      <div className=\"w-12 h-12 bg-orange-100 dark:bg-orange-900/30 rounded-full flex items-center justify-center\">\n                        <Users className=\"h-6 w-6 text-orange-600\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">공동체</h4>\n                        <p className=\"text-sm text-muted-foreground\">교회 참여</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n                \n                {(!userStats || userStats.totalSessions === 0) && (\n                  <div className=\"text-center py-8\">\n                    <Award className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">\n                      성경 필사를 시작하여 첫 번째 성취를 획득해보세요!\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n","size_bytes":37737},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/church-detail.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Users, \n  Crown, \n  Trophy, \n  TrendingUp, \n  Calendar, \n  Award,\n  ArrowLeft,\n  UserPlus,\n  Settings,\n  BarChart3\n} from \"lucide-react\";\nimport { Link, useParams, useLocation } from \"wouter\";\nimport { useEffect, useState } from \"react\";\nimport type { Church, User } from \"@shared/schema\";\n\n// Update Church Form Schema\nconst updateChurchSchema = z.object({\n  name: z.string().min(1, \"교회 이름을 입력해주세요\").max(100, \"교회 이름은 100자 이내로 입력해주세요\"),\n  description: z.string().optional(),\n});\n\ntype UpdateChurchFormData = z.infer<typeof updateChurchSchema>;\n\nexport default function ChurchDetail() {\n  const { id: churchId } = useParams();\n  const [, navigate] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n\n  const { data: church, isLoading: churchLoading, error: churchError } = useQuery<Church>({\n    queryKey: [\"/api/churches\", churchId],\n    enabled: !!churchId,\n  });\n\n  const { data: userChurch } = useQuery<Church | null>({\n    queryKey: [\"/api/user/church\"],\n    enabled: isAuthenticated,\n  });\n\n  // Fetch church members\n  const { data: churchMembers, isLoading: membersLoading } = useQuery<Array<User & { isAdmin: boolean }>>({\n    queryKey: [\"/api/churches\", churchId, \"members\"],\n    enabled: !!churchId,\n  });\n  const membersArray = churchMembers || [];\n\n  // Form for updating church info\n  const editForm = useForm<UpdateChurchFormData>({\n    resolver: zodResolver(updateChurchSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  // Update form values when church data loads\n  useEffect(() => {\n    if (church) {\n      editForm.reset({\n        name: church.name,\n        description: church.description || \"\",\n      });\n    }\n  }, [church, editForm]);\n\n  const updateChurchMutation = useMutation({\n    mutationFn: async (data: UpdateChurchFormData) => {\n      const response = await apiRequest(\"PATCH\", `/api/churches/${churchId}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"교회 정보가 성공적으로 수정되었습니다!\",\n        description: \"변경사항이 저장되었습니다.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/churches\", churchId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard/churches\"] });\n      setIsEditModalOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"교회 정보 수정에 실패했습니다\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateChurch = (data: UpdateChurchFormData) => {\n    updateChurchMutation.mutate(data);\n  };\n\n  const joinChurchMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/churches/${churchId}/join`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"교회에 성공적으로 참여했습니다!\",\n        description: `${church?.name}의 일원이 되신 것을 환영합니다.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/churches\", churchId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/church\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard/churches\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"교회 참여에 실패했습니다\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated) {\n      navigate(\"/\");\n    }\n  }, [isAuthenticated, navigate]);\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  if (churchLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <main className=\"container mx-auto px-4 py-8 max-w-6xl\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n            <div className=\"h-32 bg-muted rounded\"></div>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"md:col-span-2 space-y-4\">\n                <div className=\"h-64 bg-muted rounded\"></div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"h-48 bg-muted rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (churchError || !church) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"max-w-md mx-auto\">\n          <CardContent className=\"pt-6 text-center\">\n            <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">교회를 찾을 수 없습니다</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              요청하신 교회가 존재하지 않거나 삭제되었을 수 있습니다.\n            </p>\n            <Link href=\"/churches\">\n              <Button data-testid=\"button-back-to-churches\">\n                교회 목록으로 돌아가기\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const isAdmin = (user as any)?.id === church.adminId;\n  const isMember = userChurch?.id === church.id;\n  const canJoin = !userChurch && !isMember;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        {/* Back Button */}\n        <div className=\"mb-6\">\n          <Link href=\"/churches\">\n            <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span>교회 목록으로</span>\n            </Button>\n          </Link>\n        </div>\n\n        {/* Church Header */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-xl flex items-center justify-center\">\n                  <Users className=\"h-8 w-8 text-primary\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl md:text-3xl font-bold text-foreground\" data-testid=\"church-name\">\n                    {church.name}\n                  </h1>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    {isAdmin && (\n                      <Badge variant=\"default\" className=\"text-xs\">\n                        <Crown className=\"h-3 w-3 mr-1\" />\n                        관리자\n                      </Badge>\n                    )}\n                    {isMember && !isAdmin && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        <Users className=\"h-3 w-3 mr-1\" />\n                        멤버\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                {canJoin && (\n                  <Button\n                    onClick={() => joinChurchMutation.mutate()}\n                    disabled={joinChurchMutation.isPending}\n                    className=\"flex items-center space-x-2\"\n                    data-testid=\"button-join-church\"\n                  >\n                    <UserPlus className=\"h-4 w-4\" />\n                    <span>{joinChurchMutation.isPending ? \"참여 중...\" : \"교회 참여\"}</span>\n                  </Button>\n                )}\n                {isAdmin && (\n                  <Button variant=\"outline\" className=\"flex items-center space-x-2\" data-testid=\"button-admin-settings\">\n                    <Settings className=\"h-4 w-4\" />\n                    <span>관리</span>\n                  </Button>\n                )}\n              </div>\n            </div>\n            \n            {church.description && (\n              <p className=\"text-muted-foreground mt-4\" data-testid=\"church-description\">\n                {church.description}\n              </p>\n            )}\n            \n            {/* Church Code Display */}\n            <div className=\"mt-4 p-3 bg-muted/30 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">교회 코드:</span>\n                <code className=\"px-2 py-1 bg-primary/10 text-primary rounded text-sm font-mono\" data-testid=\"church-code\">\n                  {(church as any).churchCode || 'N/A'}\n                </code>\n                <span className=\"text-xs text-muted-foreground\">\n                  (다른 성도들과 공유하세요)\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid lg:grid-cols-3 gap-6 mb-8\">\n          {/* Church Stats */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"h-5 w-5 mr-2 text-primary\" />\n                교회 통계\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">총 멤버</span>\n                  <span className=\"font-bold text-foreground\" data-testid=\"church-member-count\">\n                    {church.totalMembers || 0}명\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">총 포인트</span>\n                  <span className=\"font-bold text-primary\" data-testid=\"church-total-points\">\n                    {(church.totalPoints || 0).toLocaleString()}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">교회 순위</span>\n                  <Badge variant=\"outline\" data-testid=\"church-rank\">\n                    #순위 집계중\n                  </Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">생성일</span>\n                  <span className=\"text-sm text-muted-foreground\" data-testid=\"church-created-date\">\n                    {church.createdAt ? new Date(church.createdAt).toLocaleDateString('ko-KR') : '정보 없음'}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>빠른 실행</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Link href=\"/practice\">\n                <Button className=\"w-full justify-start\" data-testid=\"button-practice\">\n                  <Award className=\"h-4 w-4 mr-2\" />\n                  교회를 위해 필사하기\n                </Button>\n              </Link>\n              <Link href=\"/leaderboard\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-leaderboard\">\n                  <Trophy className=\"h-4 w-4 mr-2\" />\n                  교회 랭킹 보기\n                </Button>\n              </Link>\n              <Link href=\"/challenges\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-challenges\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  챌린지 참여하기\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Admin Section */}\n          {isAdmin && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Crown className=\"h-5 w-5 mr-2 text-yellow-500\" />\n                  관리자 전용\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-manage-members\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  멤버 관리\n                </Button>\n                <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-edit-church\">\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      교회 정보 수정\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"sm:max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>교회 정보 수정</DialogTitle>\n                    </DialogHeader>\n                    <Form {...editForm}>\n                      <form onSubmit={editForm.handleSubmit(handleUpdateChurch)} className=\"space-y-4\">\n                        <FormField\n                          control={editForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>교회 이름</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"교회 이름을 입력하세요\" \n                                  data-testid=\"input-edit-church-name\"\n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={editForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>교회 소개 (선택사항)</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"교회에 대한 간단한 소개를 적어주세요\"\n                                  data-testid=\"input-edit-church-description\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex justify-end space-x-2 pt-4\">\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            onClick={() => setIsEditModalOpen(false)}\n                            data-testid=\"button-cancel-edit\"\n                          >\n                            취소\n                          </Button>\n                          <Button \n                            type=\"submit\" \n                            disabled={updateChurchMutation.isPending}\n                            data-testid=\"button-submit-edit\"\n                          >\n                            {updateChurchMutation.isPending ? \"수정 중...\" : \"수정하기\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-church-stats\">\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  상세 통계\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Detailed Content */}\n        <Tabs defaultValue=\"members\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full max-w-md grid-cols-2\">\n            <TabsTrigger value=\"members\" className=\"flex items-center space-x-2\" data-testid=\"tab-members\">\n              <Users className=\"h-4 w-4\" />\n              <span>멤버</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"activity\" className=\"flex items-center space-x-2\" data-testid=\"tab-activity\">\n              <TrendingUp className=\"h-4 w-4\" />\n              <span>활동</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"members\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Users className=\"h-5 w-5 mr-2 text-primary\" />\n                    교회 멤버\n                  </div>\n                  <Badge variant=\"outline\">{church.totalMembers || 0}명</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {membersLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"flex items-center space-x-4 p-4 border border-border rounded-lg animate-pulse\">\n                        <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <div className=\"h-4 bg-muted rounded w-16\"></div>\n                          <div className=\"h-3 bg-muted rounded w-12\"></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : !membersArray || membersArray.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">아직 멤버가 없습니다</h3>\n                    <p className=\"text-muted-foreground\">\n                      첫 번째 멤버가 되어보세요!\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {membersArray.map((member, index) => (\n                      <div key={member.id} className=\"flex items-center space-x-4 p-4 border border-border rounded-lg\">\n                        <Avatar className=\"h-12 w-12\">\n                          <AvatarImage src={member.profileImageUrl || undefined} />\n                          <AvatarFallback>\n                            {(member.firstName?.charAt(0) || member.email?.charAt(0) || '?').toUpperCase()}\n                          </AvatarFallback>\n                        </Avatar>\n                        \n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground\" data-testid={`member-name-${member.id}`}>\n                            {member.firstName || member.email?.split('@')[0] || '익명 사용자'}\n                            {member.isAdmin && (\n                              <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                                <Crown className=\"h-3 w-3 mr-1\" />\n                                관리자\n                              </Badge>\n                            )}\n                          </h4>\n                          <div className=\"flex items-center space-x-4 mt-1 text-sm text-muted-foreground\">\n                            <span>총 {member.totalWords?.toLocaleString() || 0} 단어</span>\n                            <span>•</span>\n                            <span>{member.totalPoints || 0} 포인트</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-right\">\n                          <div className=\"font-semibold text-foreground\" data-testid={`member-wpm-${member.id}`}>\n                            {Math.round(member.averageWpm || 0)} WPM\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {Math.round(member.totalAccuracy || 0)}% 정확도\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"activity\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"h-5 w-5 mr-2 text-primary\" />\n                  최근 활동\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-12\">\n                  <Calendar className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">활동 내역</h3>\n                  <p className=\"text-muted-foreground\">\n                    곧 교회의 최근 활동 내역을 확인할 수 있습니다.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}","size_bytes":23065},"client/src/pages/churches.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Users, Plus, Search, ChevronRight, MapPin, Crown } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertChurchSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport type { Church } from \"@shared/schema\";\n\n// Form validation schema\nconst createChurchFormSchema = insertChurchSchema.omit({ adminId: true });\ntype CreateChurchFormData = z.infer<typeof createChurchFormSchema>;\n\nexport default function Churches() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isJoinByCodeModalOpen, setIsJoinByCodeModalOpen] = useState(false);\n  const [churchCode, setChurchCode] = useState(\"\");\n\n  const { data: churches, isLoading: churchesLoading } = useQuery<Church[]>({\n    queryKey: [\"/api/leaderboard/churches\", { limit: 50 }],\n  });\n\n  const { data: userChurch } = useQuery<Church | null>({\n    queryKey: [\"/api/user/church\"],\n    enabled: isAuthenticated,\n  });\n\n  const form = useForm<CreateChurchFormData>({\n    resolver: zodResolver(createChurchFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const createChurchMutation = useMutation({\n    mutationFn: async (data: CreateChurchFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/churches\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"교회가 성공적으로 생성되었습니다!\",\n        description: \"이제 다른 성도들을 초대하여 함께 성장해보세요.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard/churches\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/church\"] });\n      setIsCreateModalOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"교회 생성에 실패했습니다\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const joinChurchMutation = useMutation({\n    mutationFn: async (churchId: string) => {\n      const response = await apiRequest(\"POST\", `/api/churches/${churchId}/join`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"교회에 성공적으로 참여했습니다!\",\n        description: \"함께 말씀과 타이핑 연습을 즐겨보세요.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard/churches\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/church\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"교회 참여에 실패했습니다\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const joinByCodeMutation = useMutation({\n    mutationFn: async (churchCode: string) => {\n      const response = await apiRequest(\"POST\", \"/api/churches/join-by-code\", { churchCode });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"교회에 성공적으로 참여했습니다!\",\n        description: \"교회 코드로 가입이 완료되었습니다.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard/churches\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/church\"] });\n      setIsJoinByCodeModalOpen(false);\n      setChurchCode(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"교회 코드 가입에 실패했습니다\",\n        description: error.message || \"올바른 교회 코드를 입력해주세요.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateChurchFormData) => {\n    createChurchMutation.mutate(data);\n  };\n\n  const handleJoinChurch = (churchId: string, churchName: string) => {\n    if (userChurch) {\n      toast({\n        title: \"이미 교회에 소속되어 있습니다\",\n        description: `현재 \"${userChurch.name}\"에 참여하고 있습니다.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    joinChurchMutation.mutate(churchId);\n  };\n\n  const handleJoinByCode = () => {\n    if (userChurch) {\n      toast({\n        title: \"이미 교회에 소속되어 있습니다\",\n        description: `현재 \"${userChurch.name}\"에 참여하고 있습니다.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!churchCode.trim()) {\n      toast({\n        title: \"교회 코드를 입력해주세요\",\n        description: \"유효한 교회 코드를 입력하세요.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    joinByCodeMutation.mutate(churchCode.trim().toUpperCase());\n  };\n\n  // Filter churches based on search query\n  const filteredChurches = churches?.filter(church =>\n    church.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    church.description?.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"max-w-md mx-auto\">\n          <CardContent className=\"pt-6 text-center\">\n            <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">로그인이 필요합니다</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              교회 그룹에 참여하려면 먼저 로그인해주세요.\n            </p>\n            <a href=\"/api/auth/login\">\n              <Button data-testid=\"login-required-btn\">\n                로그인하기\n              </Button>\n            </a>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-2 flex items-center\">\n            <Users className=\"h-8 w-8 mr-3 text-primary\" />\n            교회 그룹\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            전 세계 교회와 함께 성경 필사로 하나가 되어보세요\n          </p>\n        </div>\n\n        {/* Current Church Status */}\n        {userChurch && (\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Users className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-foreground\" data-testid=\"current-church-name\">\n                      현재 소속: {userChurch.name}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {userChurch.totalMembers || 0}명의 성도와 함께하고 있습니다\n                    </p>\n                  </div>\n                </div>\n                <Link href={`/churches/${userChurch.id}`}>\n                  <Button variant=\"outline\" data-testid=\"view-my-church\">\n                    교회 보기\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6\">\n          {/* Search */}\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"교회 이름으로 검색...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-churches\"\n            />\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-2\">\n            {/* Join by Code Button */}\n            <Dialog open={isJoinByCodeModalOpen} onOpenChange={setIsJoinByCodeModalOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" className=\"flex items-center space-x-2\" data-testid=\"button-join-by-code\">\n                  <Users className=\"h-4 w-4\" />\n                  <span>교회 코드로 가입</span>\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>교회 코드로 가입</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    교회에서 받은 8자리 교회 코드를 입력하세요.\n                  </p>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"churchCode\">교회 코드</Label>\n                    <Input\n                      id=\"churchCode\"\n                      placeholder=\"예: A2B9K7M3\"\n                      value={churchCode}\n                      onChange={(e) => setChurchCode(e.target.value.toUpperCase())}\n                      maxLength={8}\n                      className=\"font-mono text-center\"\n                      data-testid=\"input-church-code\"\n                    />\n                  </div>\n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => {\n                        setIsJoinByCodeModalOpen(false);\n                        setChurchCode(\"\");\n                      }}\n                      data-testid=\"button-cancel-join\"\n                    >\n                      취소\n                    </Button>\n                    <Button \n                      onClick={handleJoinByCode}\n                      disabled={joinByCodeMutation.isPending || !churchCode.trim()}\n                      data-testid=\"button-submit-join\"\n                    >\n                      {joinByCodeMutation.isPending ? \"가입 중...\" : \"교회 가입\"}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            {/* Create Church Button */}\n            <Link href=\"/churches/register\">\n              <Button className=\"flex items-center space-x-2\" data-testid=\"button-create-church\">\n                <Plus className=\"h-4 w-4\" />\n                <span>교회 생성</span>\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Churches List */}\n        <div className=\"space-y-4\">\n          {churchesLoading ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {[1, 2, 3, 4, 5, 6].map((i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"space-y-3\">\n                      <div className=\"h-6 bg-muted rounded\"></div>\n                      <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                      <div className=\"h-10 bg-muted rounded\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredChurches.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                {searchQuery ? (\n                  <>\n                    <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                      검색 결과가 없습니다\n                    </h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      \"{searchQuery}\"에 대한 교회를 찾을 수 없습니다.\n                    </p>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setSearchQuery(\"\")}\n                      data-testid=\"button-clear-search\"\n                    >\n                      전체 목록 보기\n                    </Button>\n                  </>\n                ) : (\n                  <>\n                    <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                      아직 등록된 교회가 없습니다\n                    </h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      첫 번째 교회 그룹을 만들어보세요!\n                    </p>\n                    <Button onClick={() => setIsCreateModalOpen(true)} data-testid=\"button-create-first-church\">\n                      교회 생성하기\n                    </Button>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {filteredChurches.map((church) => (\n                <Card key={church.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <Users className=\"h-5 w-5 text-primary\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-foreground\" data-testid={`church-name-${church.id}`}>\n                            {church.name}\n                          </h3>\n                          {(user as any)?.id === church.adminId && (\n                            <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                              <Crown className=\"h-3 w-3 mr-1\" />\n                              관리자\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {church.description && (\n                      <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\" data-testid={`church-description-${church.id}`}>\n                        {church.description}\n                      </p>\n                    )}\n                    \n                    <div className=\"space-y-2 mb-4 text-sm\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-muted-foreground\">멤버</span>\n                        <span className=\"font-medium\" data-testid={`church-members-${church.id}`}>\n                          {church.totalMembers || 0}명\n                        </span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-muted-foreground\">총 점수</span>\n                        <span className=\"font-medium text-primary\" data-testid={`church-points-${church.id}`}>\n                          {church.totalPoints || 0}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Link href={`/churches/${church.id}`}>\n                        <Button variant=\"outline\" className=\"w-full justify-between\" data-testid={`button-view-church-${church.id}`}>\n                          <span>자세히 보기</span>\n                          <ChevronRight className=\"h-4 w-4\" />\n                        </Button>\n                      </Link>\n                      \n                      {!userChurch && (user as any)?.id !== church.adminId && (\n                        <Button \n                          className=\"w-full\"\n                          onClick={() => handleJoinChurch(church.id, church.name)}\n                          disabled={joinChurchMutation.isPending}\n                          data-testid={`button-join-church-${church.id}`}\n                        >\n                          {joinChurchMutation.isPending ? \"참여 중...\" : \"참여하기\"}\n                        </Button>\n                      )}\n                      \n                      {userChurch?.id === church.id && (\n                        <Badge variant=\"default\" className=\"w-full justify-center\">\n                          소속 교회\n                        </Badge>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":18033},"scripts/sqlite-migration.ts":{"content":"#!/usr/bin/env tsx\n\n/**\n * SQLite Bible Database Migration Script\n * \n * 이 스크립트는 SQLite 형태의 성경 데이터베이스를 \n * PostgreSQL로 이관하는 도구입니다.\n */\n\nimport Database from 'sqlite3';\nimport { db } from '../server/db';\nimport { bibleBooks, bibleVerses, bibleDictionary, hymns } from '../shared/schema';\nimport { eq } from 'drizzle-orm';\n\ninterface SQLiteVerseData {\n  [key: string]: any;\n}\n\nclass BibleMigration {\n  private sqliteDb: Database.Database;\n  \n  constructor(private sqliteFilePath: string) {\n    this.sqliteDb = new Database.Database(sqliteFilePath, Database.OPEN_READONLY);\n  }\n\n  // SQLite 데이터베이스 스키마 분석\n  async analyzeSchema(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      console.log('🔍 SQLite 데이터베이스 스키마 분석 중...');\n      \n      // 테이블 목록 조회\n      this.sqliteDb.all(`\n        SELECT name FROM sqlite_master \n        WHERE type='table' AND name NOT LIKE 'sqlite_%'\n      `, (err, tables: any[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        \n        console.log('📊 발견된 테이블들:');\n        tables.forEach(table => console.log(`  - ${table.name}`));\n        \n        // 각 테이블의 구조 분석\n        let analyzed = 0;\n        tables.forEach(table => {\n          this.sqliteDb.all(`PRAGMA table_info(${table.name})`, (err, columns: any[]) => {\n            if (err) {\n              console.error(`❌ ${table.name} 테이블 분석 실패:`, err);\n            } else {\n              console.log(`\\n📋 ${table.name} 테이블 구조:`);\n              columns.forEach(col => {\n                console.log(`  - ${col.name}: ${col.type} ${col.pk ? '(PRIMARY KEY)' : ''}`);\n              });\n            }\n            \n            analyzed++;\n            if (analyzed === tables.length) {\n              resolve();\n            }\n          });\n        });\n      });\n    });\n  }\n\n  // 샘플 데이터 조회\n  async showSampleData(tableName: string, limit: number = 3): Promise<void> {\n    return new Promise((resolve, reject) => {\n      console.log(`\\n🔎 ${tableName} 테이블 샘플 데이터 (최대 ${limit}개):`);\n      \n      this.sqliteDb.all(`SELECT * FROM ${tableName} LIMIT ${limit}`, (err, rows: any[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        \n        rows.forEach((row, index) => {\n          console.log(`\\n📄 Row ${index + 1}:`);\n          Object.entries(row).forEach(([key, value]) => {\n            console.log(`  ${key}: ${value}`);\n          });\n        });\n        \n        resolve();\n      });\n    });\n  }\n\n  // 전체 데이터 개수 확인\n  async getDataCounts(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      console.log('\\n📊 데이터 개수 확인:');\n      \n      // 성경, 성경사전, 찬송가 테이블명들 확인\n      const commonTableNames = [\n        // 성경 구절\n        'verses', 'verse', 'bible_verses', 'scripture', \n        'books', 'book', 'bible_books',\n        'translations', 'versions',\n        // 성경사전\n        'dictionary', 'bible_dictionary', 'concordance', 'lexicon',\n        // 찬송가\n        'hymns', 'hymn', 'songs', 'worship_songs', 'hymnbook'\n      ];\n      \n      let checked = 0;\n      commonTableNames.forEach(tableName => {\n        this.sqliteDb.get(`SELECT COUNT(*) as count FROM ${tableName}`, (err, result: any) => {\n          if (!err && result) {\n            console.log(`  ${tableName}: ${result.count}개 레코드`);\n          }\n          \n          checked++;\n          if (checked === commonTableNames.length) {\n            resolve();\n          }\n        });\n      });\n    });\n  }\n\n  // 실제 데이터 이관 메서드\n  async migrateVerses(sourceTable: string): Promise<number> {\n    return new Promise((resolve, reject) => {\n      console.log(`\\n📖 ${sourceTable} 테이블에서 성경 구절 이관 시작...`);\n      \n      this.sqliteDb.all(`SELECT * FROM ${sourceTable} LIMIT 10`, async (err, rows: any[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        console.log(`첫 10개 레코드 샘플:`);\n        rows.forEach((row, index) => {\n          console.log(`\\n📄 Row ${index + 1}:`);\n          Object.entries(row).forEach(([key, value]) => {\n            console.log(`  ${key}: ${typeof value === 'string' && value.length > 100 ? value.substring(0, 100) + '...' : value}`);\n          });\n        });\n\n        resolve(rows.length);\n      });\n    });\n  }\n\n  async migrateDictionary(sourceTable: string): Promise<number> {\n    return new Promise((resolve, reject) => {\n      console.log(`\\n📚 ${sourceTable} 테이블에서 성경사전 이관 시작...`);\n      \n      this.sqliteDb.all(`SELECT * FROM ${sourceTable} LIMIT 5`, async (err, rows: any[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        console.log(`첫 5개 사전 항목 샘플:`);\n        rows.forEach((row, index) => {\n          console.log(`\\n📖 사전 항목 ${index + 1}:`);\n          Object.entries(row).forEach(([key, value]) => {\n            console.log(`  ${key}: ${typeof value === 'string' && value.length > 200 ? value.substring(0, 200) + '...' : value}`);\n          });\n        });\n\n        resolve(rows.length);\n      });\n    });\n  }\n\n  async migrateHymns(sourceTable: string): Promise<number> {\n    return new Promise((resolve, reject) => {\n      console.log(`\\n🎵 ${sourceTable} 테이블에서 찬송가 이관 시작...`);\n      \n      this.sqliteDb.all(`SELECT * FROM ${sourceTable} LIMIT 5`, async (err, rows: any[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        console.log(`첫 5개 찬송가 샘플:`);\n        rows.forEach((row, index) => {\n          console.log(`\\n🎶 찬송가 ${index + 1}:`);\n          Object.entries(row).forEach(([key, value]) => {\n            console.log(`  ${key}: ${typeof value === 'string' && value.length > 150 ? value.substring(0, 150) + '...' : value}`);\n          });\n        });\n\n        resolve(rows.length);\n      });\n    });\n  }\n\n  // 언어 컬럼 감지\n  async detectLanguageColumns(tableName: string): Promise<string[]> {\n    return new Promise((resolve, reject) => {\n      this.sqliteDb.all(`PRAGMA table_info(${tableName})`, (err, columns: any[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        \n        const languageColumns = columns\n          .map(col => col.name)\n          .filter(name => {\n            const lowerName = name.toLowerCase();\n            return lowerName.includes('korean') || lowerName.includes('kor') || lowerName.includes('ko') ||\n                   lowerName.includes('english') || lowerName.includes('eng') || lowerName.includes('en') ||\n                   lowerName.includes('chinese') || lowerName.includes('chi') || lowerName.includes('zh') ||\n                   lowerName.includes('japanese') || lowerName.includes('jpn') || lowerName.includes('ja') ||\n                   lowerName.includes('text') || lowerName.includes('content') || lowerName.includes('verse');\n          });\n        \n        console.log(`\\n🌍 ${tableName}에서 발견된 언어 관련 컬럼들:`);\n        languageColumns.forEach(col => console.log(`  - ${col}`));\n        \n        resolve(languageColumns);\n      });\n    });\n  }\n\n  // 데이터베이스 연결 해제\n  close(): void {\n    this.sqliteDb.close();\n  }\n}\n\n// 사용법 예시\nasync function main() {\n  const sqliteFilePath = process.argv[2];\n  \n  if (!sqliteFilePath) {\n    console.error('사용법: npx tsx scripts/sqlite-migration.ts <sqlite-file-path>');\n    console.error('예시: npx tsx scripts/sqlite-migration.ts bible_data.sqlite');\n    process.exit(1);\n  }\n\n  console.log(`📖 SQLite 성경 데이터베이스 분석 시작: ${sqliteFilePath}`);\n  \n  const migration = new BibleMigration(sqliteFilePath);\n  \n  try {\n    await migration.analyzeSchema();\n    await migration.getDataCounts();\n    \n    console.log('\\n🔍 테이블별 상세 분석 시작...');\n    \n    // 성경 구절 테이블들\n    const verseTables = ['verses', 'verse', 'bible_verses', 'scripture'];\n    for (const table of verseTables) {\n      try {\n        await migration.showSampleData(table, 3);\n        await migration.detectLanguageColumns(table);\n        await migration.migrateVerses(table);\n      } catch (err) {\n        console.log(`⚠️ ${table} 테이블 없음, 건너뜀`);\n      }\n    }\n    \n    // 성경사전 테이블들\n    const dictionaryTables = ['dictionary', 'bible_dictionary', 'concordance', 'lexicon'];\n    for (const table of dictionaryTables) {\n      try {\n        await migration.showSampleData(table, 2);\n        await migration.detectLanguageColumns(table);\n        await migration.migrateDictionary(table);\n      } catch (err) {\n        console.log(`⚠️ ${table} 테이블 없음, 건너뜀`);\n      }\n    }\n    \n    // 찬송가 테이블들\n    const hymnTables = ['hymns', 'hymn', 'songs', 'worship_songs', 'hymnbook'];\n    for (const table of hymnTables) {\n      try {\n        await migration.showSampleData(table, 2);\n        await migration.detectLanguageColumns(table);\n        await migration.migrateHymns(table);\n      } catch (err) {\n        console.log(`⚠️ ${table} 테이블 없음, 건너뜀`);\n      }\n    }\n    \n    console.log('\\n✅ SQLite 데이터베이스 분석 완료!');\n    console.log('\\n📋 다음 단계:');\n    console.log('1. 위 분석 결과를 바탕으로 데이터 매핑 정의');\n    console.log('2. 실제 이관할 테이블명과 컬럼명 확인');\n    console.log('3. 배치 단위로 안전하게 PostgreSQL로 이관');\n    \n  } catch (error) {\n    console.error('❌ 분석 중 오류 발생:', error);\n  } finally {\n    migration.close();\n  }\n}\n\n// ES Module compatible execution check\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Execute if this file is run directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main();\n}\n\nexport { BibleMigration };","size_bytes":10168},"scripts/detailed-bible-analysis.ts":{"content":"#!/usr/bin/env tsx\n\n/**\n * 성경 데이터베이스 상세 분석 스크립트\n * 전체 성경 필사 시스템을 위한 완전한 데이터 분석\n */\n\nimport Database from 'sqlite3';\n\ninterface LanguageInfo {\n  id: number;\n  code: string;\n  name: string;\n  encoding: string;\n  direction: string;\n}\n\ninterface TranslationInfo {\n  id: number;\n  code: string;\n  name: string;\n  language_id: number;\n  full_name: string;\n  year: number;\n  publisher: string;\n}\n\ninterface BookInfo {\n  id: number;\n  book_code: string;\n  book_name_kr: string;\n  book_name_en: string;\n  book_order: number;\n  testament: string;\n  chapters: number;\n  verses: number;\n}\n\nclass BibleAnalysisDetailed {\n  private db: Database.Database;\n\n  constructor(dbPath: string) {\n    this.db = new Database.Database(dbPath, Database.OPEN_READONLY);\n  }\n\n  // 언어 정보 분석\n  async analyzeLanguages(): Promise<LanguageInfo[]> {\n    return new Promise((resolve, reject) => {\n      console.log('\\n🌍 === 언어 정보 분석 ===');\n      \n      this.db.all(`SELECT * FROM languages ORDER BY id`, (err, rows: LanguageInfo[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        console.log(`📊 총 지원 언어: ${rows.length}개`);\n        rows.forEach(lang => {\n          console.log(`  ${lang.id}. ${lang.name} (${lang.code}) - ${lang.encoding} ${lang.direction}`);\n        });\n\n        resolve(rows);\n      });\n    });\n  }\n\n  // 번역본 정보 분석\n  async analyzeTranslations(): Promise<TranslationInfo[]> {\n    return new Promise((resolve, reject) => {\n      console.log('\\n📖 === 성경 번역본 분석 ===');\n      \n      this.db.all(`\n        SELECT t.*, l.name as language_name \n        FROM translations t \n        LEFT JOIN languages l ON t.language_id = l.id \n        ORDER BY t.language_id, t.id\n      `, (err, rows: any[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        console.log(`📚 총 번역본: ${rows.length}개`);\n        \n        // 언어별로 그룹핑\n        const byLanguage = rows.reduce((acc, trans) => {\n          const langName = trans.language_name || 'Unknown';\n          if (!acc[langName]) acc[langName] = [];\n          acc[langName].push(trans);\n          return acc;\n        }, {} as Record<string, any[]>);\n\n        Object.entries(byLanguage).forEach(([language, translations]: [string, any[]]) => {\n          console.log(`\\n  🏷️ ${language}:`);\n          translations.forEach(trans => {\n            console.log(`    • ${trans.name} (${trans.code}) - ${trans.full_name || 'N/A'} ${trans.year || ''}`);\n            if (trans.publisher) console.log(`      출판사: ${trans.publisher}`);\n          });\n        });\n\n        resolve(rows);\n      });\n    });\n  }\n\n  // 성경책 구조 분석\n  async analyzeBooks(): Promise<BookInfo[]> {\n    return new Promise((resolve, reject) => {\n      console.log('\\n📚 === 성경책 구조 분석 ===');\n      \n      this.db.all(`SELECT * FROM books ORDER BY book_order`, (err, rows: BookInfo[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        console.log(`📖 총 성경책: ${rows.length}권`);\n        \n        const oldTestament = rows.filter(book => book.testament === 'OT');\n        const newTestament = rows.filter(book => book.testament === 'NT');\n\n        console.log(`\\n📜 구약성경: ${oldTestament.length}권`);\n        oldTestament.slice(0, 10).forEach(book => {\n          console.log(`  ${book.book_order}. ${book.book_name_kr} (${book.book_name_en}) - ${book.chapters}장 ${book.verses}절`);\n        });\n        if (oldTestament.length > 10) {\n          console.log(`  ... 외 ${oldTestament.length - 10}권`);\n        }\n\n        console.log(`\\n📜 신약성경: ${newTestament.length}권`);\n        newTestament.slice(0, 10).forEach(book => {\n          console.log(`  ${book.book_order}. ${book.book_name_kr} (${book.book_name_en}) - ${book.chapters}장 ${book.verses}절`);\n        });\n        if (newTestament.length > 10) {\n          console.log(`  ... 외 ${newTestament.length - 10}권`);\n        }\n\n        // 통계\n        const totalChapters = rows.reduce((sum, book) => sum + book.chapters, 0);\n        const totalVerses = rows.reduce((sum, book) => sum + book.verses, 0);\n        console.log(`\\n📊 전체 통계:`);\n        console.log(`  총 장(章): ${totalChapters}장`);\n        console.log(`  총 절(節): ${totalVerses}절`);\n\n        resolve(rows);\n      });\n    });\n  }\n\n  // 번역본별 구절 수 분석\n  async analyzeVersesByTranslation(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      console.log('\\n📊 === 번역본별 구절 분석 ===');\n      \n      this.db.all(`\n        SELECT \n          t.name as translation_name,\n          t.code as translation_code,\n          l.name as language_name,\n          COUNT(v.id) as verse_count\n        FROM translations t\n        LEFT JOIN languages l ON t.language_id = l.id\n        LEFT JOIN verses v ON t.id = v.translation_id\n        GROUP BY t.id, t.name, t.code, l.name\n        ORDER BY verse_count DESC\n      `, (err, rows: any[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        console.log('📚 번역본별 구절 수:');\n        rows.forEach(row => {\n          console.log(`  • ${row.translation_name} (${row.translation_code}) [${row.language_name}]: ${row.verse_count?.toLocaleString() || 0}개 구절`);\n        });\n\n        resolve();\n      });\n    });\n  }\n\n  // 샘플 구절 확인\n  async analyzeSampleVerses(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      console.log('\\n📖 === 샘플 구절 확인 ===');\n      \n      // 창세기 1:1-3 확인 (여러 번역본)\n      this.db.all(`\n        SELECT \n          v.chapter,\n          v.verse,\n          v.content,\n          t.name as translation,\n          t.code as trans_code,\n          l.name as language,\n          b.book_name_kr\n        FROM verses v\n        JOIN translations t ON v.translation_id = t.id\n        JOIN languages l ON t.language_id = l.id\n        JOIN books b ON v.book_id = b.id\n        WHERE b.book_name_kr = '창세기' AND v.chapter = 1 AND v.verse <= 3\n        ORDER BY l.name, t.name, v.verse\n      `, (err, rows: any[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        console.log('🔍 창세기 1:1-3 샘플 (다국어):');\n        \n        const byLanguage = rows.reduce((acc, verse) => {\n          if (!acc[verse.language]) acc[verse.language] = {};\n          if (!acc[verse.language][verse.translation]) acc[verse.language][verse.translation] = [];\n          acc[verse.language][verse.translation].push(verse);\n          return acc;\n        }, {} as any);\n\n        Object.entries(byLanguage).forEach(([language, translations]: [string, any]) => {\n          console.log(`\\n  🌍 ${language}:`);\n          Object.entries(translations).forEach(([translation, verses]: [string, any]) => {\n            console.log(`    📖 ${translation}:`);\n            verses.forEach((verse: any) => {\n              const content = verse.content?.substring(0, 100) + (verse.content?.length > 100 ? '...' : '');\n              console.log(`      ${verse.chapter}:${verse.verse} \"${content}\"`);\n            });\n          });\n        });\n\n        resolve();\n      });\n    });\n  }\n\n  // 데이터 품질 검사\n  async checkDataQuality(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      console.log('\\n🔍 === 데이터 품질 검사 ===');\n      \n      // 빈 구절 확인\n      this.db.get(`\n        SELECT COUNT(*) as empty_verses\n        FROM verses \n        WHERE content IS NULL OR content = '' OR TRIM(content) = ''\n      `, (err, result: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        console.log(`📊 품질 검사 결과:`);\n        console.log(`  빈 구절: ${result.empty_verses}개`);\n        \n        // 평균 구절 길이\n        this.db.get(`\n          SELECT \n            AVG(LENGTH(content)) as avg_length,\n            MIN(LENGTH(content)) as min_length,\n            MAX(LENGTH(content)) as max_length\n          FROM verses \n          WHERE content IS NOT NULL AND content != ''\n        `, (err2, lengthResult: any) => {\n          if (err2) {\n            reject(err2);\n            return;\n          }\n\n          console.log(`  평균 구절 길이: ${Math.round(lengthResult.avg_length)}자`);\n          console.log(`  최소 구절 길이: ${lengthResult.min_length}자`);\n          console.log(`  최대 구절 길이: ${lengthResult.max_length}자`);\n\n          resolve();\n        });\n      });\n    });\n  }\n\n  close(): void {\n    this.db.close();\n  }\n}\n\n// 실행\nasync function runDetailedAnalysis() {\n  const analyzer = new BibleAnalysisDetailed('bible_comprehensive.db');\n  \n  try {\n    await analyzer.analyzeLanguages();\n    await analyzer.analyzeTranslations();\n    await analyzer.analyzeBooks();\n    await analyzer.analyzeVersesByTranslation();\n    await analyzer.analyzeSampleVerses();\n    await analyzer.checkDataQuality();\n    \n    console.log('\\n✅ === 상세 분석 완료 ===');\n    console.log('📋 다음 단계: PostgreSQL 이관 계획 수립');\n    \n  } catch (error) {\n    console.error('❌ 분석 오류:', error);\n  } finally {\n    analyzer.close();\n  }\n}\n\n// ES Module compatible execution\nimport { fileURLToPath } from 'url';\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runDetailedAnalysis();\n}\n\nexport { BibleAnalysisDetailed };","size_bytes":9517},"scripts/reassemble-bible-db.ts":{"content":"#!/usr/bin/env tsx\n\n/**\n * 분할 압축된 성경 데이터베이스 파일을 자동으로 복원하는 스크립트\n */\n\nimport { execSync } from 'child_process';\nimport { existsSync, readdirSync } from 'fs';\n\nasync function reassembleBibleDatabase() {\n  console.log('🔄 분할된 성경 데이터베이스 파일 복원 시작...');\n\n  try {\n    // 1. 분할 파일들 찾기\n    const files = readdirSync('.').filter(file => \n      file.startsWith('bible_part_') || \n      file.startsWith('bible_comprehensive_part_') ||\n      file.startsWith('bible_split_')\n    ).sort();\n\n    if (files.length === 0) {\n      console.log('❌ 분할 파일을 찾을 수 없습니다.');\n      console.log('📋 예상 파일명: bible_part_aa, bible_part_ab, bible_part_ac, ...');\n      return;\n    }\n\n    console.log(`📁 발견된 분할 파일들 (${files.length}개):`);\n    files.forEach(file => console.log(`  - ${file}`));\n\n    // 2. 파일들 합치기\n    console.log('\\n🔗 분할 파일들 연결 중...');\n    const catCommand = `cat ${files.join(' ')} > bible_comprehensive_reassembled.zip`;\n    execSync(catCommand);\n    \n    console.log('✅ 파일 연결 완료!');\n\n    // 3. 압축 해제 시도\n    console.log('\\n📦 압축 파일 형식 감지 및 해제...');\n    \n    // ZIP 형식인지 확인\n    if (existsSync('bible_comprehensive_reassembled.zip')) {\n      try {\n        execSync('file bible_comprehensive_reassembled.zip');\n        \n        // ZIP 파일이면 압축 해제\n        try {\n          execSync('unzip -o bible_comprehensive_reassembled.zip');\n          console.log('✅ ZIP 압축 해제 완료!');\n        } catch (zipError) {\n          console.log('⚠️ ZIP 해제 실패, 다른 형식 시도...');\n          \n          // 7z 시도\n          try {\n            execSync('7z x bible_comprehensive_reassembled.zip');\n            console.log('✅ 7z 압축 해제 완료!');\n          } catch (sevenZError) {\n            console.log('⚠️ 7z 해제 실패, tar.gz 시도...');\n            \n            // tar.gz 시도\n            try {\n              execSync('mv bible_comprehensive_reassembled.zip bible_comprehensive_reassembled.tar.gz');\n              execSync('tar -xzf bible_comprehensive_reassembled.tar.gz');\n              console.log('✅ tar.gz 압축 해제 완료!');\n            } catch (tarError) {\n              console.log('❌ 알려진 압축 형식으로 해제할 수 없습니다.');\n              console.log('📄 연결된 파일: bible_comprehensive_reassembled.zip');\n              return;\n            }\n          }\n        }\n      } catch (fileError) {\n        console.log('⚠️ 파일 형식 확인 실패');\n      }\n    }\n\n    // 4. SQLite 파일 찾기\n    console.log('\\n🔍 SQLite 데이터베이스 파일 찾기...');\n    const dbFiles = readdirSync('.').filter(file => \n      file.endsWith('.db') || file.endsWith('.sqlite') || file.endsWith('.sqlite3')\n    );\n\n    if (dbFiles.length === 0) {\n      console.log('❌ SQLite 데이터베이스 파일을 찾을 수 없습니다.');\n      console.log('📁 압축 해제된 파일들:');\n      readdirSync('.').forEach(file => {\n        if (!file.startsWith('.') && !file.startsWith('node_modules')) {\n          console.log(`  - ${file}`);\n        }\n      });\n      return;\n    }\n\n    console.log(`📊 발견된 데이터베이스 파일들:`);\n    dbFiles.forEach(file => console.log(`  - ${file}`));\n\n    // 5. 가장 큰 DB 파일 또는 bible 이름이 포함된 파일 선택\n    let targetDbFile = dbFiles.find(file => \n      file.toLowerCase().includes('bible') || \n      file.toLowerCase().includes('comprehensive')\n    ) || dbFiles[0];\n\n    console.log(`\\n🎯 분석할 데이터베이스: ${targetDbFile}`);\n\n    // 6. SQLite 분석 스크립트 실행\n    console.log('\\n🔍 SQLite 데이터베이스 분석 시작...');\n    execSync(`npx tsx scripts/sqlite-migration.ts ${targetDbFile}`, { stdio: 'inherit' });\n\n  } catch (error) {\n    console.error('❌ 복원 과정 중 오류 발생:', error);\n    console.log('\\n📋 수동 복원 명령어:');\n    console.log('1. cat bible_part_* > bible_comprehensive.zip');\n    console.log('2. unzip bible_comprehensive.zip');\n    console.log('3. npx tsx scripts/sqlite-migration.ts bible_comprehensive.db');\n  }\n}\n\n// 즉시 실행\nif (require.main === module) {\n  reassembleBibleDatabase();\n}\n\nexport { reassembleBibleDatabase };","size_bytes":4416},"scripts/quick-migration.ts":{"content":"#!/usr/bin/env tsx\n/**\n * 빠른 SQLite → PostgreSQL 데이터 이관\n */\n\nimport Database from 'sqlite3';\nimport { db } from '../server/db';\nimport { languages, translations, bibleBooks, bibleVerses } from '../shared/schema';\n\nconst sqliteDb = new Database.Database('../bible_comprehensive.db', Database.OPEN_READONLY);\n\nasync function migrateLanguages() {\n  console.log('🌍 언어 데이터 이관 중...');\n  \n  return new Promise<void>((resolve, reject) => {\n    sqliteDb.all('SELECT * FROM languages LIMIT 10', async (err, rows: any[]) => {\n      if (err) { reject(err); return; }\n      \n      for (const row of rows) {\n        await db.insert(languages).values({\n          code: row.code,\n          name: row.name,\n          encoding: row.encoding || 'utf-8',\n          direction: row.direction || 'ltr'\n        }).onConflictDoNothing();\n      }\n      \n      console.log(`✅ ${rows.length}개 언어 이관 완료`);\n      resolve();\n    });\n  });\n}\n\nasync function migrateTranslations() {\n  console.log('📖 번역본 데이터 이관 중...');\n  \n  // 먼저 language IDs 매핑 가져오기\n  const languageMap = await db.select().from(languages);\n  const langIdMap: { [key: number]: string } = {};\n  languageMap.forEach(lang => {\n    // SQLite의 language_id와 매핑\n    if (lang.code === 'ko') langIdMap[1] = lang.id;\n    else if (lang.code === 'en') langIdMap[2] = lang.id;\n    else if (lang.code === 'zh_CN') langIdMap[3] = lang.id;\n    else if (lang.code === 'ja') langIdMap[4] = lang.id;\n    // 기타 언어들...\n  });\n  \n  return new Promise<void>((resolve, reject) => {\n    sqliteDb.all('SELECT * FROM translations LIMIT 30', async (err, rows: any[]) => {\n      if (err) { reject(err); return; }\n      \n      for (const row of rows) {\n        const languageId = langIdMap[row.language_id] || languageMap[0]?.id;\n        if (!languageId) continue;\n        \n        await db.insert(translations).values({\n          code: row.code,\n          name: row.name,\n          languageId: languageId,\n          fullName: row.full_name,\n          year: row.year,\n          publisher: row.publisher\n        }).onConflictDoNothing();\n      }\n      \n      console.log(`✅ ${rows.length}개 번역본 이관 완료`);\n      resolve();\n    });\n  });\n}\n\nasync function migrateBibleBooks() {\n  console.log('📚 성경책 데이터 이관 중...');\n  \n  return new Promise<void>((resolve, reject) => {\n    sqliteDb.all('SELECT * FROM books ORDER BY book_order LIMIT 100', async (err, rows: any[]) => {\n      if (err) { reject(err); return; }\n      \n      for (const row of rows) {\n        await db.insert(bibleBooks).values({\n          bookCode: row.book_code || `book_${row.id}`,\n          bookNameKr: row.book_name_kr || '알 수 없음',\n          bookNameEn: row.book_name_en || 'Unknown',\n          bookOrder: row.book_order || 999,\n          testament: (row.testament || 'OT')?.substring(0, 20),\n          chapters: row.chapters || 1,\n          verses: row.verses || 1\n        }).onConflictDoNothing();\n      }\n      \n      console.log(`✅ ${rows.length}개 성경책 이관 완료`);\n      resolve();\n    });\n  });\n}\n\nasync function migrateBibleVerses() {\n  console.log('📜 성경 구절 데이터 이관 중... (샘플 1000개)');\n  \n  // 먼저 book IDs와 translation IDs 매핑 가져오기\n  const bookMap = await db.select().from(bibleBooks);\n  const translationMap = await db.select().from(translations);\n  \n  const bookIdMap: { [key: string]: string } = {};\n  bookMap.forEach(book => {\n    if (book.bookCode) bookIdMap[book.bookCode] = book.id;\n  });\n  \n  return new Promise<void>((resolve, reject) => {\n    sqliteDb.all('SELECT * FROM verses LIMIT 1000', async (err, rows: any[]) => {\n      if (err) { reject(err); return; }\n      \n      let migrated = 0;\n      for (const row of rows) {\n        const bookId = bookIdMap[row.book_code];\n        const translationId = translationMap[0]?.id; // 기본 번역본 사용\n        \n        if (!bookId || !translationId) continue;\n        \n        await db.insert(bibleVerses).values({\n          bookId: bookId,\n          translationId: translationId,\n          languageId: translationMap[0]?.languageId || '',\n          bookCode: row.book_code,\n          chapter: row.chapter,\n          verse: row.verse,\n          content: row.content\n        }).onConflictDoNothing();\n        \n        migrated++;\n      }\n      \n      console.log(`✅ ${migrated}개 성경 구절 이관 완료`);\n      resolve();\n    });\n  });\n}\n\nasync function main() {\n  try {\n    console.log('🚀 빠른 데이터 이관 시작!');\n    \n    await migrateLanguages();\n    await migrateTranslations();\n    await migrateBibleBooks();\n    await migrateBibleVerses();\n    \n    console.log('\\n🎉 핵심 데이터 이관 완료!');\n    \n  } catch (error) {\n    console.error('❌ 이관 실패:', error);\n  } finally {\n    sqliteDb.close();\n    process.exit(0);\n  }\n}\n\nmain();","size_bytes":4917},"scripts/final-migration.ts":{"content":"#!/usr/bin/env tsx\n/**\n * 최종 구절 이관 - JOIN으로 book_code 매핑\n */\n\nimport Database from 'sqlite3';\nimport { db } from '../server/db';\nimport { languages, translations, bibleBooks, bibleVerses } from '../shared/schema';\n\nconst sqliteDb = new Database.Database('./bible_comprehensive.db', Database.OPEN_READONLY);\n\nasync function migrateVersesWithJoin() {\n  console.log('🚀 JOIN으로 구절 데이터 대량 이관 시작!');\n  \n  // PostgreSQL 매핑 데이터\n  const bookMap = await db.select().from(bibleBooks);\n  const translationMap = await db.select().from(translations);\n  const languageMap = await db.select().from(languages);\n  \n  const bookIdMap: { [key: string]: string } = {};\n  bookMap.forEach(book => {\n    if (book.bookCode) bookIdMap[book.bookCode] = book.id;\n  });\n  \n  const defaultTranslation = translationMap.find(t => t.code === 'GAE') || translationMap[0];\n  const defaultLanguage = languageMap.find(l => l.code === 'ko') || languageMap[0];\n  \n  console.log(`✅ 기본 번역본: ${defaultTranslation?.name}, 언어: ${defaultLanguage?.name}`);\n  console.log(`📚 매핑 가능한 성경책: ${Object.keys(bookIdMap).length}개`);\n  \n  return new Promise<void>((resolve, reject) => {\n    // JOIN 쿼리로 book_code 가져오기\n    const joinQuery = `\n      SELECT v.*, b.book_code \n      FROM verses v \n      JOIN books b ON v.book_id = b.id \n      LIMIT 50000\n    `;\n    \n    sqliteDb.all(joinQuery, async (err, rows: any[]) => {\n      if (err) {\n        console.error('❌ JOIN 쿼리 실패:', err);\n        reject(err);\n        return;\n      }\n      \n      console.log(`📊 JOIN 결과: ${rows.length}개 구절 (book_code 포함)`);\n      \n      // 첫 3개 샘플 확인\n      console.log('📋 샘플 구절들:');\n      rows.slice(0, 3).forEach((sample, i) => {\n        console.log(`${i + 1}. ${sample.book_code} ${sample.chapter}:${sample.verse} - ${sample.content?.substring(0, 50)}...`);\n      });\n      \n      let migrated = 0;\n      for (const row of rows) {\n        if (!row.book_code || !bookIdMap[row.book_code] || !row.content) continue;\n        \n        try {\n          await db.insert(bibleVerses).values({\n            bookId: bookIdMap[row.book_code],\n            translationId: defaultTranslation!.id,\n            languageId: defaultLanguage!.id,\n            bookCode: row.book_code,\n            chapter: row.chapter || 1,\n            verse: row.verse || 1,\n            content: row.content\n          }).onConflictDoNothing();\n          \n          migrated++;\n        } catch (insertErr) {\n          if (migrated < 5) {\n            console.error(`구절 삽입 실패: ${row.book_code} ${row.chapter}:${row.verse}`, insertErr);\n          }\n        }\n      }\n      \n      console.log(`🎉 ${migrated}개 구절 이관 완료!`);\n      resolve();\n    });\n  });\n}\n\nasync function main() {\n  try {\n    await migrateVersesWithJoin();\n    \n    // 결과 확인\n    const verseCount = await db.select().from(bibleVerses);\n    console.log(`\\n📊 최종 이관된 구절 수: ${verseCount.length}개`);\n    \n    // 샘플 구절 확인\n    const sampleVerses = verseCount.slice(0, 3);\n    console.log('\\n📋 이관된 구절 샘플:');\n    sampleVerses.forEach((verse, i) => {\n      console.log(`${i + 1}. ${verse.bookCode} ${verse.chapter}:${verse.verse} - ${verse.content?.substring(0, 50)}...`);\n    });\n    \n  } catch (error) {\n    console.error('❌ 이관 실패:', error);\n  } finally {\n    sqliteDb.close();\n    process.exit(0);\n  }\n}\n\nmain();","size_bytes":3510},"scripts/fix-verses-migration.ts":{"content":"#!/usr/bin/env tsx\n/**\n * 구절 데이터 이관 문제 해결 및 대량 이관\n */\n\nimport Database from 'sqlite3';\nimport { db } from '../server/db';\nimport { languages, translations, bibleBooks, bibleVerses } from '../shared/schema';\n\nconst sqliteDb = new Database.Database('../bible_comprehensive.db', Database.OPEN_READONLY);\n\nasync function checkSQLiteVerses() {\n  console.log('🔍 SQLite verses 테이블 확인 중...');\n  \n  return new Promise<void>((resolve, reject) => {\n    // 테이블 구조 확인\n    sqliteDb.all('PRAGMA table_info(verses)', (err, columns: any[]) => {\n      if (err) {\n        console.error('❌ verses 테이블 구조 확인 실패:', err);\n        reject(err);\n        return;\n      }\n      \n      console.log('📋 verses 테이블 컬럼들:');\n      columns.forEach(col => {\n        console.log(`  - ${col.name}: ${col.type}`);\n      });\n      \n      // 데이터 개수 확인\n      sqliteDb.get('SELECT COUNT(*) as count FROM verses', (err, result: any) => {\n        if (err) {\n          console.error('❌ verses 데이터 개수 확인 실패:', err);\n          reject(err);\n          return;\n        }\n        \n        console.log(`📊 총 구절 개수: ${result.count}`);\n        \n        // 샘플 데이터 확인\n        sqliteDb.all('SELECT * FROM verses LIMIT 3', (err, samples: any[]) => {\n          if (err) {\n            console.error('❌ 샘플 데이터 확인 실패:', err);\n            reject(err);\n            return;\n          }\n          \n          console.log('📋 샘플 구절들:');\n          samples.forEach((sample, i) => {\n            console.log(`${i + 1}. ${sample.book_code} ${sample.chapter}:${sample.verse} - ${sample.content?.substring(0, 50)}...`);\n          });\n          \n          resolve();\n        });\n      });\n    });\n  });\n}\n\nasync function migrateBibleVersesFixed() {\n  console.log('📜 구절 데이터 대량 이관 시작...');\n  \n  // PostgreSQL에서 매핑 데이터 가져오기\n  const bookMap = await db.select().from(bibleBooks);\n  const translationMap = await db.select().from(translations);\n  const languageMap = await db.select().from(languages);\n  \n  console.log(`📚 성경책 ${bookMap.length}개, 번역본 ${translationMap.length}개, 언어 ${languageMap.length}개 발견`);\n  \n  // 매핑 테이블 생성\n  const bookIdMap: { [key: string]: string } = {};\n  bookMap.forEach(book => {\n    if (book.bookCode) bookIdMap[book.bookCode] = book.id;\n  });\n  \n  const defaultTranslation = translationMap.find(t => t.code === 'GAE') || translationMap[0];\n  const defaultLanguage = languageMap.find(l => l.code === 'ko') || languageMap[0];\n  \n  if (!defaultTranslation || !defaultLanguage) {\n    console.error('❌ 기본 번역본/언어를 찾을 수 없습니다');\n    return;\n  }\n  \n  console.log(`✅ 기본 번역본: ${defaultTranslation.name}, 언어: ${defaultLanguage.name}`);\n  \n  return new Promise<void>((resolve, reject) => {\n    // 배치 단위로 처리 (1000개씩)\n    const batchSize = 1000;\n    let offset = 0;\n    let totalMigrated = 0;\n    \n    const processBatch = async () => {\n      sqliteDb.all(\n        `SELECT * FROM verses LIMIT ${batchSize} OFFSET ${offset}`,\n        async (err, rows: any[]) => {\n          if (err) {\n            console.error('❌ 배치 처리 실패:', err);\n            reject(err);\n            return;\n          }\n          \n          if (rows.length === 0) {\n            console.log(`🎉 총 ${totalMigrated}개 구절 이관 완료!`);\n            resolve();\n            return;\n          }\n          \n          let batchMigrated = 0;\n          for (const row of rows) {\n            const bookId = bookIdMap[row.book_code];\n            \n            if (!bookId || !row.content) continue;\n            \n            try {\n              await db.insert(bibleVerses).values({\n                bookId: bookId,\n                translationId: defaultTranslation.id,\n                languageId: defaultLanguage.id,\n                bookCode: row.book_code,\n                chapter: row.chapter || 1,\n                verse: row.verse || 1,\n                content: row.content\n              }).onConflictDoNothing();\n              \n              batchMigrated++;\n            } catch (insertErr) {\n              // 개별 오류는 조용히 넘어감\n              console.error(`구절 삽입 실패: ${row.book_code} ${row.chapter}:${row.verse}`, insertErr);\n            }\n          }\n          \n          totalMigrated += batchMigrated;\n          console.log(`✅ 배치 ${Math.floor(offset / batchSize) + 1}: ${batchMigrated}/${rows.length}개 이관 (총 ${totalMigrated}개)`);\n          \n          offset += batchSize;\n          \n          // 다음 배치 처리\n          setTimeout(processBatch, 100); // 100ms 딜레이로 DB 부하 방지\n        }\n      );\n    };\n    \n    processBatch();\n  });\n}\n\nasync function main() {\n  try {\n    console.log('🚀 구절 이관 문제 해결 시작!');\n    \n    await checkSQLiteVerses();\n    await migrateBibleVersesFixed();\n    \n    // 이관 결과 확인\n    const verseCount = await db.select().from(bibleVerses);\n    console.log(`\\n📊 최종 이관된 구절 수: ${verseCount.length}개`);\n    \n  } catch (error) {\n    console.error('❌ 구절 이관 실패:', error);\n  } finally {\n    sqliteDb.close();\n    process.exit(0);\n  }\n}\n\nmain();","size_bytes":5353},"tests/api.test.ts":{"content":"import { describe, test, expect, beforeAll, afterAll } from 'vitest';\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../server/routes';\nimport { db } from '../server/db';\n\n// Test용 app 생성\nlet app: express.Application;\n\nbeforeAll(async () => {\n  app = express();\n  app.use(express.json());\n  await registerRoutes(app);\n});\n\ndescribe('Bible API Tests', () => {\n  describe('GET /api/bible/books', () => {\n    test('성경책 목록을 반환해야 함', async () => {\n      const response = await request(app).get('/api/bible/books');\n      \n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      \n      // 첫 번째 성경책 구조 검증\n      const firstBook = response.body[0];\n      expect(firstBook).toHaveProperty('id');\n      expect(firstBook).toHaveProperty('bookCode');\n      expect(firstBook).toHaveProperty('bookNameKr');\n      expect(firstBook).toHaveProperty('bookOrder');\n    });\n\n    test('성경책이 순서대로 정렬되어야 함', async () => {\n      const response = await request(app).get('/api/bible/books');\n      const books = response.body;\n      \n      // bookOrder 기준으로 정렬 확인\n      for (let i = 1; i < books.length; i++) {\n        if (books[i-1].bookOrder && books[i].bookOrder) {\n          expect(books[i-1].bookOrder).toBeLessThanOrEqual(books[i].bookOrder);\n        }\n      }\n    });\n  });\n\n  describe('GET /api/bible/random-verse', () => {\n    test('랜덤 구절을 반환해야 함', async () => {\n      const response = await request(app).get('/api/bible/random-verse');\n      \n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body).toHaveProperty('content');\n      expect(response.body).toHaveProperty('chapter');\n      expect(response.body).toHaveProperty('verse');\n      expect(typeof response.body.content).toBe('string');\n      expect(response.body.content.length).toBeGreaterThan(0);\n    });\n\n    test('여러 번 호출시 다른 구절이 나올 수 있음', async () => {\n      const response1 = await request(app).get('/api/bible/random-verse');\n      const response2 = await request(app).get('/api/bible/random-verse');\n      \n      expect(response1.status).toBe(200);\n      expect(response2.status).toBe(200);\n      \n      // 동일할 수도 있지만, 데이터가 있다는 것을 확인\n      expect(response1.body.content).toBeTruthy();\n      expect(response2.body.content).toBeTruthy();\n    });\n  });\n\n  describe('GET /api/challenges', () => {\n    test('챌린지 목록을 반환해야 함', async () => {\n      const response = await request(app).get('/api/challenges');\n      \n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      \n      // 첫 번째 챌린지 구조 검증\n      const firstChallenge = response.body[0];\n      expect(firstChallenge).toHaveProperty('id');\n      expect(firstChallenge).toHaveProperty('title');\n      expect(firstChallenge).toHaveProperty('description');\n      expect(firstChallenge).toHaveProperty('type');\n      expect(firstChallenge).toHaveProperty('requiredAccuracy');\n      expect(firstChallenge).toHaveProperty('requiredWpm');\n    });\n\n    test('활성 챌린지만 반환해야 함', async () => {\n      const response = await request(app).get('/api/challenges');\n      const challenges = response.body;\n      \n      challenges.forEach((challenge: any) => {\n        expect(challenge.isActive).toBe(true);\n      });\n    });\n  });\n});","size_bytes":3670},"tests/bible-data.test.ts":{"content":"import { describe, test, expect } from 'vitest';\nimport { db } from '../server/db';\nimport { bibleBooks, bibleVerses, languages, translations } from '../shared/schema';\nimport { eq, count } from 'drizzle-orm';\n\ndescribe('Bible Data Tests', () => {\n  test('언어 데이터가 존재해야 함', async () => {\n    const languageCount = await db.select({ count: count() }).from(languages);\n    expect(languageCount[0].count).toBeGreaterThan(0);\n    \n    // 한국어 존재 확인\n    const koreanLang = await db.select().from(languages).where(eq(languages.code, 'ko'));\n    expect(koreanLang.length).toBeGreaterThan(0);\n    expect(koreanLang[0].name).toContain('Korean');\n  });\n\n  test('번역본 데이터가 존재해야 함', async () => {\n    const translationCount = await db.select({ count: count() }).from(translations);\n    expect(translationCount[0].count).toBeGreaterThan(0);\n    \n    // 개역성경 존재 확인\n    const gaeTranslation = await db.select().from(translations)\n      .where(eq(translations.name, '개역성경'));\n    expect(gaeTranslation.length).toBeGreaterThan(0);\n  });\n\n  test('성경책 데이터가 존재해야 함', async () => {\n    const bookCount = await db.select({ count: count() }).from(bibleBooks);\n    expect(bookCount[0].count).toBeGreaterThan(0);\n    \n    // 창세기 존재 확인\n    const genesis = await db.select().from(bibleBooks)\n      .where(eq(bibleBooks.bookCode, 'gen'));\n    expect(genesis.length).toBeGreaterThan(0);\n    expect(genesis[0].bookNameKr).toBe('창세기');\n    expect(genesis[0].bookNameEn).toBe('Genesis');\n  });\n\n  test('성경 구절 데이터가 존재해야 함', async () => {\n    const verseCount = await db.select({ count: count() }).from(bibleVerses);\n    expect(verseCount[0].count).toBeGreaterThan(0);\n    \n    // 창세기 1:1 존재 확인\n    const genesis11 = await db.select().from(bibleVerses)\n      .where(eq(bibleVerses.bookCode, 'gen'))\n      .where(eq(bibleVerses.chapter, 1))\n      .where(eq(bibleVerses.verse, 1));\n    \n    expect(genesis11.length).toBeGreaterThan(0);\n    if (genesis11[0]?.content) {\n      expect(genesis11[0].content).toContain('태초에');\n    }\n  });\n\n  test('요한복음 3:16이 존재해야 함', async () => {\n    const john316 = await db.select().from(bibleVerses)\n      .where(eq(bibleVerses.bookCode, 'joh'))\n      .where(eq(bibleVerses.chapter, 3))\n      .where(eq(bibleVerses.verse, 16));\n    \n    expect(john316.length).toBeGreaterThan(0);\n    if (john316[0]?.content) {\n      expect(john316[0].content).toContain('하나님이 세상을 이처럼 사랑하사');\n    }\n  });\n\n  test('시편 23편이 존재해야 함', async () => {\n    const psalm23 = await db.select().from(bibleVerses)\n      .where(eq(bibleVerses.bookCode, 'psa'))\n      .where(eq(bibleVerses.chapter, 23));\n    \n    expect(psalm23.length).toBeGreaterThan(0);\n    \n    // 시편 23:1 확인\n    const psalm23v1 = psalm23.find(v => v.verse === 1);\n    expect(psalm23v1).toBeTruthy();\n    if (psalm23v1?.content) {\n      expect(psalm23v1.content).toContain('여호와는 나의 목자시니');\n    }\n  });\n});","size_bytes":3106},"tests/setup.ts":{"content":"import { beforeAll, afterAll } from 'vitest';\n\nbeforeAll(async () => {\n  // 테스트 환경 설정\n  process.env.NODE_ENV = 'test';\n  console.log('🧪 테스트 환경 설정 완료');\n});\n\nafterAll(async () => {\n  // 정리 작업\n  console.log('🧹 테스트 환경 정리 완료');\n});","size_bytes":291},"tests/vitest.config.ts":{"content":"import { defineConfig } from 'vitest/config';\nimport path from 'path';\n\nexport default defineConfig({\n  test: {\n    environment: 'node',\n    globals: true,\n    setupFiles: ['./tests/setup.ts'],\n    timeout: 30000,\n  },\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, '../client/src'),\n      '@shared': path.resolve(__dirname, '../shared'),\n    },\n  },\n});","size_bytes":368},"scripts/seed-translations.ts":{"content":"import { db } from \"../server/db\";\nimport { languages, translations } from \"@shared/schema\";\nimport { nanoid } from \"nanoid\";\n\nasync function seedLanguagesAndTranslations() {\n  console.log(\"🌍 Seeding languages and translations...\");\n\n  try {\n    // 1. Seed languages\n    const languageData = [\n      { code: \"ko\", name: \"한국어\", encoding: \"utf-8\", direction: \"ltr\" },\n      { code: \"en\", name: \"English\", encoding: \"utf-8\", direction: \"ltr\" },\n      { code: \"zh_CN\", name: \"中文 (简体)\", encoding: \"utf-8\", direction: \"ltr\" },\n      { code: \"ja\", name: \"日本語\", encoding: \"utf-8\", direction: \"ltr\" },\n    ];\n\n    for (const lang of languageData) {\n      await db.insert(languages).values({\n        id: nanoid(),\n        ...lang,\n      }).onConflictDoNothing();\n    }\n\n    console.log(`✅ Seeded ${languageData.length} languages`);\n\n    // Get language IDs\n    const langRecords = await db.select().from(languages);\n    const langCodeToId = new Map();\n    langRecords.forEach(lang => {\n      langCodeToId.set(lang.code, lang.id);\n    });\n\n    // 2. Seed translations\n    const translationData = [\n      {\n        code: \"GAE\",\n        name: \"개역개정\",\n        languageId: langCodeToId.get(\"ko\"),\n        fullName: \"개역개정 성경\",\n        year: 1998,\n        publisher: \"대한성서공회\"\n      },\n      {\n        code: \"NIV\",\n        name: \"New International Version\",\n        languageId: langCodeToId.get(\"en\"),\n        fullName: \"New International Version\",\n        year: 1978,\n        publisher: \"Zondervan\"\n      },\n      {\n        code: \"ESV\",\n        name: \"English Standard Version\",\n        languageId: langCodeToId.get(\"en\"),\n        fullName: \"English Standard Version\",\n        year: 2001,\n        publisher: \"Crossway\"\n      },\n      {\n        code: \"CUV\",\n        name: \"和合本\",\n        languageId: langCodeToId.get(\"zh_CN\"),\n        fullName: \"新标点和合本\",\n        year: 1919,\n        publisher: \"Chinese Union Version\"\n      }\n    ];\n\n    for (const translation of translationData) {\n      if (translation.languageId) {\n        await db.insert(translations).values({\n          id: nanoid(),\n          ...translation,\n        }).onConflictDoNothing();\n      }\n    }\n\n    console.log(`✅ Seeded ${translationData.length} translations`);\n    console.log(\"🎉 Language and translation seeding completed!\");\n\n  } catch (error) {\n    console.error(\"❌ Error seeding languages and translations:\", error);\n    throw error;\n  }\n}\n\n// Only run if called directly (equivalent to require.main === module)\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedLanguagesAndTranslations()\n    .then(() => process.exit(0))\n    .catch((error) => {\n      console.error(error);\n      process.exit(1);\n    });\n}\n\nexport { seedLanguagesAndTranslations };","size_bytes":2798},"scripts/comprehensive-migration.ts":{"content":"#!/usr/bin/env tsx\n/**\n * 포괄적 성경 데이터 마이그레이션\n * 모든 언어, 번역본, 성경책, 구절을 SQLite에서 PostgreSQL로 완전 이관\n */\n\nimport Database from 'sqlite3';\nimport { db } from '../server/db';\nimport { languages, translations, bibleBooks, bibleVerses } from '../shared/schema';\n\nconst sqliteDb = new Database.Database('./bible_comprehensive.db', Database.OPEN_READONLY);\n\n// 1. 언어 이관\nasync function migrateLanguages() {\n  console.log('🌍 언어 데이터 이관 중...');\n  \n  return new Promise<void>((resolve, reject) => {\n    sqliteDb.all('SELECT * FROM languages', async (err, rows: any[]) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      \n      console.log(`📊 ${rows.length}개 언어 이관 시작`);\n      \n      for (const row of rows) {\n        try {\n          await db.insert(languages).values({\n            code: row.code,\n            name: row.name,\n            encoding: row.encoding || 'utf-8',\n            direction: row.direction || 'ltr'\n          }).onConflictDoNothing();\n        } catch (err) {\n          console.error(`언어 이관 실패: ${row.name}`, err);\n        }\n      }\n      \n      console.log('✅ 언어 이관 완료');\n      resolve();\n    });\n  });\n}\n\n// 2. 번역본 이관\nasync function migrateTranslations() {\n  console.log('📖 번역본 데이터 이관 중...');\n  \n  const pgLanguages = await db.select().from(languages);\n  const languageMap: { [key: number]: string } = {};\n  pgLanguages.forEach(lang => {\n    // SQLite ID를 PostgreSQL ID로 매핑\n    const sqliteId = parseInt(lang.id.split('-')[0]) || 1;\n    languageMap[sqliteId] = lang.id;\n  });\n  \n  return new Promise<void>((resolve, reject) => {\n    sqliteDb.all('SELECT * FROM translations', async (err, rows: any[]) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      \n      console.log(`📊 ${rows.length}개 번역본 이관 시작`);\n      \n      for (const row of rows) {\n        try {\n          const languageId = languageMap[row.language_id] || pgLanguages[0]?.id;\n          \n          await db.insert(translations).values({\n            code: row.code,\n            name: row.name,\n            languageId: languageId,\n            fullName: row.full_name || row.name,\n            year: row.year || null,\n            publisher: row.publisher || null,\n            description: row.description || null\n          }).onConflictDoNothing();\n        } catch (err) {\n          console.error(`번역본 이관 실패: ${row.name}`, err);\n        }\n      }\n      \n      console.log('✅ 번역본 이관 완료');\n      resolve();\n    });\n  });\n}\n\n// 3. 성경책 이관  \nasync function migrateBibleBooks() {\n  console.log('📚 성경책 데이터 이관 중...');\n  \n  return new Promise<void>((resolve, reject) => {\n    sqliteDb.all('SELECT * FROM books ORDER BY book_order', async (err, rows: any[]) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      \n      console.log(`📊 ${rows.length}개 성경책 이관 시작`);\n      \n      for (const row of rows) {\n        try {\n          await db.insert(bibleBooks).values({\n            bookCode: row.book_code,\n            bookNameKr: row.book_name_kr || '',\n            bookNameEn: row.book_name_en || '',\n            bookOrder: row.book_order || 1,\n            testament: row.testament || 'old',\n            chapters: row.chapters || 1,\n            verses: row.verses || 1\n          }).onConflictDoNothing();\n        } catch (err) {\n          console.error(`성경책 이관 실패: ${row.book_name_kr}`, err);\n        }\n      }\n      \n      console.log('✅ 성경책 이관 완료');\n      resolve();\n    });\n  });\n}\n\n// 4. 구절 이관 (모든 번역본)\nasync function migrateBibleVerses() {\n  console.log('📖 구절 데이터 이관 중...');\n  \n  // PostgreSQL 매핑 데이터\n  const pgBooks = await db.select().from(bibleBooks);\n  const pgTranslations = await db.select().from(translations);\n  const pgLanguages = await db.select().from(languages);\n  \n  const bookCodeMap: { [key: string]: string } = {};\n  pgBooks.forEach(book => {\n    if (book.bookCode) bookCodeMap[book.bookCode] = book.id;\n  });\n  \n  const translationCodeMap: { [key: string]: string } = {};\n  pgTranslations.forEach(trans => {\n    if (trans.code) translationCodeMap[trans.code] = trans.id;\n  });\n  \n  const defaultLanguage = pgLanguages.find(l => l.code === 'ko') || pgLanguages[0];\n  \n  console.log(`🔗 매핑 준비: ${Object.keys(bookCodeMap).length}개 성경책, ${Object.keys(translationCodeMap).length}개 번역본`);\n  \n  return new Promise<void>((resolve, reject) => {\n    // 모든 번역본의 구절을 가져오는 쿼리\n    const query = `\n      SELECT v.*, b.book_code, t.code as translation_code \n      FROM verses v \n      JOIN books b ON v.book_id = b.id \n      JOIN translations t ON v.translation_id = t.id\n      WHERE v.content IS NOT NULL AND v.content != ''\n      ORDER BY b.book_order, v.chapter, v.verse\n    `;\n    \n    sqliteDb.all(query, async (err, rows: any[]) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      \n      console.log(`📊 ${rows.length}개 구절 이관 시작`);\n      \n      let migrated = 0;\n      let skipped = 0;\n      \n      for (const row of rows) {\n        if (!row.book_code || !bookCodeMap[row.book_code] || !row.content) {\n          skipped++;\n          continue;\n        }\n        \n        const translationId = translationCodeMap[row.translation_code] || pgTranslations[0]?.id;\n        \n        try {\n          await db.insert(bibleVerses).values({\n            bookId: bookCodeMap[row.book_code],\n            translationId: translationId,\n            languageId: defaultLanguage?.id || '',\n            bookCode: row.book_code,\n            chapter: row.chapter || 1,\n            verse: row.verse || 1,\n            content: row.content.trim()\n          }).onConflictDoNothing();\n          \n          migrated++;\n          \n          if (migrated % 1000 === 0) {\n            console.log(`⏳ ${migrated}개 구절 이관 완료...`);\n          }\n        } catch (err) {\n          skipped++;\n          if (skipped < 5) {\n            console.error(`구절 이관 실패: ${row.book_code} ${row.chapter}:${row.verse}`, err);\n          }\n        }\n      }\n      \n      console.log(`✅ 구절 이관 완료: ${migrated}개 성공, ${skipped}개 건너뜀`);\n      resolve();\n    });\n  });\n}\n\n// 메인 실행\nasync function main() {\n  try {\n    console.log('🚀 포괄적 성경 데이터 마이그레이션 시작!');\n    console.log('='.repeat(50));\n    \n    await migrateLanguages();\n    await migrateTranslations();\n    await migrateBibleBooks();\n    await migrateBibleVerses();\n    \n    console.log('='.repeat(50));\n    console.log('🎉 전체 마이그레이션 완료!');\n    \n    // 최종 통계\n    const finalStats = await db.select().from(bibleVerses);\n    console.log(`📊 최종 통계: ${finalStats.length}개 구절 이관됨`);\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('❌ 마이그레이션 실패:', error);\n    process.exit(1);\n  }\n}\n\nmain();","size_bytes":7127},"scripts/check-original-db.ts":{"content":"import Database from 'sqlite3';\n\nconst sqliteDb = new Database.Database('./bible_comprehensive.db', Database.OPEN_READONLY);\n\nconsole.log('🔍 원본 SQLite 데이터베이스 분석 중...\\n');\n\n// 총 구절 수\nsqliteDb.get('SELECT COUNT(*) as total FROM verses', (err, row: any) => {\n  if (err) {\n    console.error('❌ 구절 수 조회 실패:', err);\n  } else {\n    console.log(`📊 총 구절 수: ${row.total.toLocaleString()}개`);\n  }\n});\n\n// 총 성경책 수\nsqliteDb.get('SELECT COUNT(DISTINCT book_id) as total FROM verses', (err, row: any) => {\n  if (err) {\n    console.error('❌ 성경책 수 조회 실패:', err);\n  } else {\n    console.log(`📚 구절이 있는 성경책 수: ${row.total}개`);\n  }\n});\n\n// 성경책별 구절 수 (상위 10개)\nsqliteDb.all(`\n  SELECT \n    b.name_ko,\n    b.book_order, \n    COUNT(v.id) as verse_count\n  FROM verses v \n  JOIN books b ON v.book_id = b.id\n  GROUP BY v.book_id, b.name_ko, b.book_order\n  ORDER BY COUNT(v.id) DESC\n  LIMIT 10\n`, (err, rows: any[]) => {\n  if (err) {\n    console.error('❌ 성경책별 구절 수 조회 실패:', err);\n  } else {\n    console.log('\\n📖 구절 수 TOP 10 성경책들:');\n    rows.forEach((book, i) => {\n      console.log(`${i + 1}. ${book.name_ko} (${book.book_order}): ${book.verse_count.toLocaleString()}구절`);\n    });\n  }\n  \n  sqliteDb.close();\n});","size_bytes":1361},"scripts/check-sqlite-schema.ts":{"content":"import Database from 'sqlite3';\n\nconst sqliteDb = new Database.Database('../bible_comprehensive.db', Database.OPEN_READONLY);\n\nconsole.log('🔍 SQLite 데이터베이스 스키마 분석 중...\\n');\n\n// 모든 테이블 목록\nsqliteDb.all(`SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'`, (err, tables: any[]) => {\n  if (err) {\n    console.error('❌ 테이블 목록 조회 실패:', err);\n    return;\n  }\n  \n  console.log('📋 테이블 목록:');\n  tables.forEach(table => console.log(`  - ${table.name}`));\n  \n  // books 테이블 구조\n  sqliteDb.all(`PRAGMA table_info(books)`, (err, bookColumns: any[]) => {\n    if (err) {\n      console.error('❌ books 테이블 구조 조회 실패:', err);\n    } else {\n      console.log('\\n📚 books 테이블 구조:');\n      bookColumns.forEach(col => {\n        console.log(`  - ${col.name}: ${col.type}`);\n      });\n      \n      // books 테이블 샘플 데이터\n      sqliteDb.all(`SELECT * FROM books LIMIT 5`, (err, bookSamples: any[]) => {\n        if (err) {\n          console.error('❌ books 샘플 데이터 조회 실패:', err);\n        } else {\n          console.log('\\n📋 books 테이블 샘플:');\n          bookSamples.forEach((book, i) => {\n            console.log(`${i + 1}. ${Object.entries(book).map(([k, v]) => `${k}: ${v}`).join(', ')}`);\n          });\n        }\n      });\n    }\n  });\n  \n  // verses 테이블 구조\n  sqliteDb.all(`PRAGMA table_info(verses)`, (err, verseColumns: any[]) => {\n    if (err) {\n      console.error('❌ verses 테이블 구조 조회 실패:', err);\n    } else {\n      console.log('\\n📖 verses 테이블 구조:');\n      verseColumns.forEach(col => {\n        console.log(`  - ${col.name}: ${col.type}`);\n      });\n      \n      // verses 테이블 샘플 데이터\n      sqliteDb.all(`SELECT * FROM verses LIMIT 3`, (err, verseSamples: any[]) => {\n        if (err) {\n          console.error('❌ verses 샘플 데이터 조회 실패:', err);\n        } else {\n          console.log('\\n📋 verses 테이블 샘플:');\n          verseSamples.forEach((verse, i) => {\n            console.log(`${i + 1}. ${Object.entries(verse).map(([k, v]) => `${k}: ${v}`).join(', ')}`);\n          });\n        }\n        \n        sqliteDb.close();\n      });\n    }\n  });\n});","size_bytes":2292},"scripts/complete-migration.ts":{"content":"import Database from 'sqlite3';\nimport { db } from '../server/db';\nimport { languages, translations, bibleBooks, bibleVerses } from '../shared/schema';\nimport { eq } from 'drizzle-orm';\nimport { nanoid } from 'nanoid';\n\nconst sqliteDb = new Database.Database('./bible_comprehensive.db', Database.OPEN_READONLY);\n\nasync function completeDataMigration() {\n  console.log('🚀 완전한 성경 데이터 마이그레이션 시작...\\n');\n\n  try {\n    // 1. 기존 데이터 정리 (verses만)\n    console.log('🧹 기존 구절 데이터 정리 중...');\n    await db.delete(bibleVerses);\n    console.log('✅ 기존 구절 데이터 삭제 완료');\n    \n    // 2. 새로운 성경책 데이터 마이그레이션\n    console.log('📚 성경책 데이터 마이그레이션 중...');\n    \n    const booksMigrationPromise = new Promise<{[bookId: number]: string}>((resolve, reject) => {\n      sqliteDb.all('SELECT * FROM books ORDER BY book_order', async (err, books: any[]) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        \n        const bookIdMap: {[sqliteBookId: number]: string} = {};\n        \n        // 기존 books 데이터 삭제하고 새로 생성\n        await db.delete(bibleBooks);\n        \n        for (const book of books) {\n          const newBookId = nanoid();\n          bookIdMap[book.id] = newBookId;\n          \n          await db.insert(bibleBooks).values({\n            id: newBookId,\n            bookCode: book.book_code,\n            bookNameKr: book.book_name_kr,\n            bookNameEn: book.book_name_en,\n            bookOrder: book.book_order,\n            testament: book.testament || (book.book_order <= 39 ? 'OLD' : 'NEW'),\n            chapters: book.chapters || 0,\n            verses: book.verses || 0,\n          }).onConflictDoNothing();\n        }\n        \n        console.log(`✅ ${books.length}개 성경책 마이그레이션 완료`);\n        resolve(bookIdMap);\n      });\n    });\n    \n    const bookIdMap = await booksMigrationPromise;\n    \n    // 3. 기본 언어와 번역본 확인\n    const defaultLanguage = await db.select().from(languages).where(eq(languages.code, 'ko')).then(rows => rows[0]);\n    const defaultTranslation = await db.select().from(translations).where(eq(translations.code, 'GAEREVIS')).then(rows => rows[0]) ||\n                              await db.select().from(translations).where(eq(translations.code, 'GAE')).then(rows => rows[0]) ||\n                              await db.select().from(translations).limit(1).then(rows => rows[0]);\n                              \n    if (!defaultLanguage || !defaultTranslation) {\n      throw new Error('기본 언어 또는 번역본을 찾을 수 없습니다.');\n    }\n    \n    console.log(`🌍 기본 언어: ${defaultLanguage.name}`);\n    console.log(`📖 기본 번역본: ${defaultTranslation.name}`);\n    \n    // 4. 구절 데이터 마이그레이션 (배치로 처리)\n    console.log('📜 구절 데이터 마이그레이션 시작... (770K+ 구절)');\n    \n    const versesMigrationPromise = new Promise<void>((resolve, reject) => {\n      let offset = 0;\n      const batchSize = 5000;\n      let totalMigrated = 0;\n      \n      const migrateBatch = () => {\n        sqliteDb.all(`\n          SELECT v.*, b.book_code \n          FROM verses v \n          JOIN books b ON v.book_id = b.id \n          LIMIT ${batchSize} OFFSET ${offset}\n        `, async (err, verses: any[]) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          \n          if (verses.length === 0) {\n            console.log(`🎉 총 ${totalMigrated.toLocaleString()}개 구절 마이그레이션 완료!`);\n            resolve();\n            return;\n          }\n          \n          // 배치 삽입\n          const versesToInsert = verses\n            .filter(v => bookIdMap[v.book_id] && v.content)\n            .map(verse => ({\n              bookId: bookIdMap[verse.book_id],\n              translationId: defaultTranslation.id,\n              languageId: defaultLanguage.id,\n              bookCode: verse.book_code,\n              chapter: verse.chapter || 1,\n              verse: verse.verse || 1,\n              content: verse.content\n            }));\n          \n          if (versesToInsert.length > 0) {\n            try {\n              await db.insert(bibleVerses).values(versesToInsert);\n              totalMigrated += versesToInsert.length;\n              \n              if (totalMigrated % 10000 === 0) {\n                console.log(`📊 진행 상황: ${totalMigrated.toLocaleString()}개 구절 이관 완료...`);\n              }\n            } catch (insertErr) {\n              console.error(`❌ 배치 삽입 실패:`, insertErr);\n            }\n          }\n          \n          offset += batchSize;\n          \n          // 다음 배치 처리\n          setTimeout(migrateBatch, 100); // 100ms 딜레이\n        });\n      };\n      \n      migrateBatch();\n    });\n    \n    await versesMigrationPromise;\n    \n    console.log('\\n🎉 완전한 성경 데이터 마이그레이션 성공!');\n    console.log('📊 최종 결과 확인 중...');\n    \n    // 최종 결과 확인\n    const finalBooks = await db.select().from(bibleBooks);\n    const finalVerses = await db.select().from(bibleVerses);\n    \n    console.log(`📚 총 성경책: ${finalBooks.length}권`);\n    console.log(`📜 총 구절: ${finalVerses.length.toLocaleString()}개`);\n    \n  } catch (error) {\n    console.error('❌ 마이그레이션 실패:', error);\n  } finally {\n    sqliteDb.close();\n  }\n}\n\n// 실행\ncompleteDataMigration().catch(console.error);","size_bytes":5581},"server/cache.ts":{"content":"interface CacheItem<T> {\n  value: T;\n  expiresAt: number | null; // null means no expiration (permanent cache)\n}\n\nexport class MemoryCache {\n  private cache = new Map<string, CacheItem<any>>();\n  private cleanupInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    // Run cleanup every 5 minutes to remove expired items\n    this.cleanupInterval = setInterval(() => {\n      this.cleanup();\n    }, 5 * 60 * 1000); // 5 minutes\n  }\n\n  /**\n   * Set a cache item with TTL in milliseconds\n   * @param key Cache key\n   * @param value Value to cache\n   * @param ttlMs TTL in milliseconds, null for permanent cache\n   */\n  set<T>(key: string, value: T, ttlMs: number | null = null): void {\n    const expiresAt = ttlMs ? Date.now() + ttlMs : null;\n    this.cache.set(key, { value, expiresAt });\n  }\n\n  /**\n   * Get a cache item, returns undefined if not found or expired\n   * @param key Cache key\n   * @returns Cached value or undefined\n   */\n  get<T>(key: string): T | undefined {\n    const item = this.cache.get(key);\n    \n    if (!item) {\n      return undefined;\n    }\n\n    // Check if item has expired\n    if (item.expiresAt && Date.now() > item.expiresAt) {\n      this.cache.delete(key);\n      return undefined;\n    }\n\n    return item.value;\n  }\n\n  /**\n   * Check if a key exists and is not expired\n   * @param key Cache key\n   * @returns true if key exists and is valid\n   */\n  has(key: string): boolean {\n    const item = this.cache.get(key);\n    \n    if (!item) {\n      return false;\n    }\n\n    // Check if item has expired\n    if (item.expiresAt && Date.now() > item.expiresAt) {\n      this.cache.delete(key);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Delete a cache item\n   * @param key Cache key\n   */\n  delete(key: string): boolean {\n    return this.cache.delete(key);\n  }\n\n  /**\n   * Clear all cache items\n   */\n  clear(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats(): { \n    totalItems: number; \n    expiredItems: number; \n    permanentItems: number; \n    temporaryItems: number;\n  } {\n    let expiredItems = 0;\n    let permanentItems = 0;\n    let temporaryItems = 0;\n    const now = Date.now();\n\n    this.cache.forEach((item) => {\n      if (item.expiresAt === null) {\n        permanentItems++;\n      } else if (now > item.expiresAt) {\n        expiredItems++;\n      } else {\n        temporaryItems++;\n      }\n    });\n\n    return {\n      totalItems: this.cache.size,\n      expiredItems,\n      permanentItems,\n      temporaryItems\n    };\n  }\n\n  /**\n   * Get or set pattern - useful for caching function results\n   * @param key Cache key\n   * @param getValue Function to get value if not cached\n   * @param ttlMs TTL in milliseconds\n   * @returns Cached or newly fetched value\n   */\n  async getOrSet<T>(\n    key: string, \n    getValue: () => Promise<T>, \n    ttlMs: number | null = null\n  ): Promise<T> {\n    const cached = this.get<T>(key);\n    if (cached !== undefined) {\n      return cached;\n    }\n\n    const value = await getValue();\n    this.set(key, value, ttlMs);\n    return value;\n  }\n\n  /**\n   * Remove expired items from cache\n   */\n  private cleanup(): void {\n    const now = Date.now();\n    const keysToDelete: string[] = [];\n\n    this.cache.forEach((item, key) => {\n      if (item.expiresAt && now > item.expiresAt) {\n        keysToDelete.push(key);\n      }\n    });\n\n    keysToDelete.forEach(key => this.cache.delete(key));\n\n    if (keysToDelete.length > 0) {\n      console.log(`Cache cleanup: removed ${keysToDelete.length} expired items`);\n    }\n  }\n\n  /**\n   * Destroy the cache and cleanup intervals\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    this.clear();\n  }\n}\n\n// Create a singleton cache instance\nexport const cache = new MemoryCache();\n\n// TTL constants\nexport const TTL = {\n  ONE_MINUTE: 60 * 1000,\n  TWO_MINUTES: 2 * 60 * 1000,\n  FIVE_MINUTES: 5 * 60 * 1000,\n  TEN_MINUTES: 10 * 60 * 1000,\n  ONE_HOUR: 60 * 60 * 1000,\n  TWENTY_FOUR_HOURS: 24 * 60 * 60 * 1000,\n  ONE_WEEK: 7 * 24 * 60 * 60 * 1000,\n  PERMANENT: null\n} as const;","size_bytes":4123},"scripts/fix-gaerevis-only.ts":{"content":"#!/usr/bin/env tsx\n/**\n * 개역개정(GAEREVIS) 번역본 데이터만 완전 재임포트\n * 오염된 다국어 데이터를 순수 한국어로 교체\n */\n\nimport Database from 'sqlite3';\nimport { db } from '../server/db';\nimport { languages, translations, bibleBooks, bibleVerses } from '../shared/schema';\nimport { eq, and } from 'drizzle-orm';\n\nconst sqliteDb = new Database.Database('../bible_comprehensive.db', Database.OPEN_READONLY);\n\nasync function cleanGAEREVISData() {\n  console.log('🧹 개역개정 오염 데이터 삭제 중...');\n  \n  // 개역개정 번역본 ID 확인\n  const gaerevisTranslation = await db.select()\n    .from(translations)\n    .where(eq(translations.code, 'GAEREVIS'))\n    .limit(1);\n    \n  if (!gaerevisTranslation.length) {\n    console.error('❌ 개역개정 번역본을 찾을 수 없습니다');\n    return;\n  }\n  \n  const translationId = gaerevisTranslation[0].id;\n  console.log(`🎯 개역개정 번역본 ID: ${translationId}`);\n  \n  // 오염된 데이터 완전 삭제\n  await db.delete(bibleVerses)\n    .where(eq(bibleVerses.translationId, translationId));\n    \n  console.log(`🗑️ 개역개정 오염 데이터 삭제 완료`);\n  return translationId;\n}\n\nasync function importPureKoreanVerses(translationId: string) {\n  console.log('📥 순수 한국어 구절 임포트 중...');\n  \n  // PostgreSQL 매핑 데이터 가져오기\n  const bookMap = await db.select().from(bibleBooks);\n  const koreanLanguage = await db.select()\n    .from(languages)\n    .where(eq(languages.code, 'ko'))\n    .limit(1);\n    \n  if (!koreanLanguage.length) {\n    console.error('❌ 한국어 언어를 찾을 수 없습니다');\n    return;\n  }\n  \n  const languageId = koreanLanguage[0].id;\n  \n  // 성경책 코드 매핑\n  const bookIdMap: { [key: string]: string } = {};\n  bookMap.forEach(book => {\n    if (book.bookCode) bookIdMap[book.bookCode] = book.id;\n  });\n  \n  console.log(`📚 매핑된 성경책: ${Object.keys(bookIdMap).length}개`);\n  console.log(`🌏 한국어 언어 ID: ${languageId}`);\n  \n  return new Promise<void>((resolve, reject) => {\n    // SQLite에서 순수 한국어 구절만 가져오기\n    // 개역개정, 개역성경, 개역한글 등 한국어 번역본만 필터링\n    const koreanTranslationCodes = ['GAEREVIS', 'GAE', 'KRV', 'RHV'];\n    const query = `\n      SELECT DISTINCT b.book_code, v.chapter, v.verse, v.content, t.code as translation_code\n      FROM verses v\n      INNER JOIN translations t ON v.translation_id = t.id  \n      INNER JOIN books b ON v.book_id = b.id\n      WHERE t.code IN (${koreanTranslationCodes.map(() => '?').join(',')})\n      AND v.content IS NOT NULL \n      AND LENGTH(v.content) > 0\n      ORDER BY b.book_code, v.chapter, v.verse\n    `;\n    \n    sqliteDb.all(query, koreanTranslationCodes, async (err, rows: any[]) => {\n      if (err) {\n        console.error('❌ SQLite 쿼리 실패:', err);\n        reject(err);\n        return;\n      }\n      \n      console.log(`📊 SQLite에서 발견된 한국어 구절: ${rows.length}개`);\n      \n      // 개역개정 우선, 그 다음 개역성경, 개역한글 순으로 선택\n      const priorityMap: { [key: string]: { [key: string]: any } } = {};\n      \n      rows.forEach(row => {\n        const key = `${row.book_code}-${row.chapter}-${row.verse}`;\n        const priority = koreanTranslationCodes.indexOf(row.translation_code);\n        \n        if (!priorityMap[key] || priority < koreanTranslationCodes.indexOf(priorityMap[key].translation_code)) {\n          priorityMap[key] = row;\n        }\n      });\n      \n      const uniqueVerses = Object.values(priorityMap);\n      console.log(`🎯 중복 제거 후 고유 구절: ${uniqueVerses.length}개`);\n      \n      // 배치 삽입 (1000개씩)\n      const batchSize = 1000;\n      let totalInserted = 0;\n      \n      for (let i = 0; i < uniqueVerses.length; i += batchSize) {\n        const batch = uniqueVerses.slice(i, i + batchSize);\n        const versesToInsert = [];\n        \n        for (const row of batch) {\n          const bookId = bookIdMap[row.book_code];\n          if (!bookId) continue;\n          \n          // 텍스트가 순수 한국어인지 간단 검증\n          const content = row.content.trim();\n          if (!content || content.length < 5) continue;\n          \n          // 라틴 문자나 특수 기호가 너무 많으면 제외 (영어/기타 언어)\n          const latinRatio = (content.match(/[a-zA-Z]/g) || []).length / content.length;\n          if (latinRatio > 0.3) continue; // 30% 이상 라틴 문자면 제외\n          \n          versesToInsert.push({\n            bookId: bookId,\n            translationId: translationId,\n            languageId: languageId,\n            bookCode: row.book_code,\n            chapter: row.chapter || 1,\n            verse: row.verse || 1,\n            content: content\n          });\n        }\n        \n        if (versesToInsert.length > 0) {\n          try {\n            await db.insert(bibleVerses).values(versesToInsert as any);\n            totalInserted += versesToInsert.length;\n            console.log(`✅ 배치 ${Math.floor(i / batchSize) + 1}: ${versesToInsert.length}개 삽입 (총 ${totalInserted}개)`);\n          } catch (insertErr) {\n            console.error('❌ 배치 삽입 실패:', insertErr);\n          }\n        }\n      }\n      \n      console.log(`🎉 총 ${totalInserted}개 순수 한국어 구절 임포트 완료!`);\n      resolve();\n    });\n  });\n}\n\nasync function verifyResults(translationId: string) {\n  console.log('🔍 결과 검증 중...');\n  \n  // 마가복음 2장 샘플 확인\n  const sampleVerses = await db.select()\n    .from(bibleVerses)\n    .innerJoin(bibleBooks, eq(bibleVerses.bookId, bibleBooks.id))\n    .where(\n      and(\n        eq(bibleVerses.translationId, translationId),\n        eq(bibleBooks.bookNameKr, '마가복음'),\n        eq(bibleVerses.chapter, 2)\n      )\n    )\n    .limit(3);\n    \n  console.log('📋 검증 샘플 (마가복음 2장):');\n  sampleVerses.forEach(row => {\n    console.log(`  ${row.bible_verses.verse}절: ${row.bible_verses.content.substring(0, 50)}...`);\n  });\n  \n  // 전체 개수 확인\n  const totalCount = await db.select()\n    .from(bibleVerses)\n    .where(eq(bibleVerses.translationId, translationId));\n    \n  console.log(`📊 개역개정 총 구절 수: ${totalCount.length}개`);\n}\n\nasync function main() {\n  try {\n    console.log('🚀 개역개정 데이터 정화 시작!');\n    \n    const translationId = await cleanGAEREVISData();\n    if (!translationId) return;\n    \n    await importPureKoreanVerses(translationId);\n    await verifyResults(translationId);\n    \n    console.log('✨ 개역개정 데이터 정화 완료!');\n    \n  } catch (error) {\n    console.error('❌ 정화 작업 실패:', error);\n  } finally {\n    sqliteDb.close();\n    process.exit(0);\n  }\n}\n\nmain();","size_bytes":6849},"client/src/pages/complete-profile.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { UserPlus, MapPin, Users, Search, Loader2, CheckCircle, Info, Clock } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport type { Church } from \"@shared/schema\";\n\n// Form validation schema\nconst completeProfileSchema = z.object({\n  age: z.number().min(10).max(100).optional(),\n  region: z.string().max(100).optional(),\n  churchId: z.string().nullable().optional(),\n});\n\ntype CompleteProfileFormData = z.infer<typeof completeProfileSchema>;\n\n// 한국 시/도 목록\nconst koreanRegions = [\n  \"서울특별시\",\n  \"부산광역시\", \n  \"대구광역시\",\n  \"인천광역시\",\n  \"광주광역시\",\n  \"대전광역시\",\n  \"울산광역시\",\n  \"세종특별자치시\",\n  \"경기도\",\n  \"강원특별자치도\",\n  \"충청북도\",\n  \"충청남도\",\n  \"전라북도\",\n  \"전라남도\",\n  \"경상북도\",\n  \"경상남도\",\n  \"제주특별자치도\",\n];\n\n// 연령 옵션 생성 (10-90세)\nconst generateAgeOptions = () => {\n  const ages = [];\n  for (let age = 10; age <= 90; age++) {\n    ages.push(age);\n  }\n  return ages;\n};\n\nexport default function CompleteProfile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const [churchSearch, setChurchSearch] = useState(\"\");\n  const [isChurchSearchOpen, setIsChurchSearchOpen] = useState(false);\n  const [isNavigating, setIsNavigating] = useState(false);\n\n  // 사용자의 현재 교회 정보 조회\n  const { data: userChurch } = useQuery<Church>({\n    queryKey: [\"/api/user/church\"],\n    enabled: !!user,\n  });\n\n  const form = useForm<CompleteProfileFormData>({\n    resolver: zodResolver(completeProfileSchema),\n    defaultValues: {\n      age: user?.age || undefined,\n      region: user?.region || undefined,\n      churchId: user?.churchId || undefined,\n    },\n  });\n\n  // 사용자 데이터가 로드되면 폼 기본값 업데이트\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        age: user.age || undefined,\n        region: user.region || undefined,\n        churchId: user.churchId || undefined,\n      });\n      \n      // 교회 정보가 있으면 검색창에도 설정\n      if (userChurch) {\n        setChurchSearch(userChurch.name);\n      }\n    }\n  }, [user, userChurch, form]);\n\n  // 교회 목록 조회\n  const { data: churches, isLoading: churchesLoading } = useQuery<Church[]>({\n    queryKey: [\"/api/churches\", { search: churchSearch }],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (churchSearch.trim()) {\n        params.append(\"search\", churchSearch.trim());\n      }\n      params.append(\"limit\", \"20\");\n      return fetch(`/api/churches?${params.toString()}`).then(res => res.json());\n    },\n    enabled: isChurchSearchOpen,\n  });\n\n  // 프로필 업데이트 mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: CompleteProfileFormData) => {\n      const response = await apiRequest(\"PATCH\", \"/api/users/profile\", data);\n      return response.json();\n    },\n    onSuccess: async () => {\n      console.log(\"Profile update success - starting navigation process\");\n      setIsNavigating(true);\n      \n      toast({\n        title: \"프로필이 완성되었습니다! 🎉\",\n        description: \"추가 정보가 저장되었습니다. 이제 모든 기능을 이용하실 수 있습니다.\",\n        duration: 2000,\n      });\n      \n      try {\n        console.log(\"Invalidating queries...\");\n        // 캐시 무효화 후 새로운 사용자 데이터 로드 대기\n        await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n        await queryClient.invalidateQueries({ queryKey: [\"/api/user/church\"] });\n        await queryClient.invalidateQueries({ queryKey: [\"/api/churches\"] });\n        \n        console.log(\"Refetching user data...\");\n        // 사용자 데이터가 실제로 업데이트될 때까지 기다림\n        await queryClient.refetchQueries({ queryKey: [\"/api/auth/user\"] });\n        \n        console.log(\"Setting up navigation timeout...\");\n        // 성공 메시지를 사용자가 볼 수 있도록 짧은 딜레이 후 홈으로 이동\n        setTimeout(() => {\n          console.log(\"Navigating to home page...\");\n          // wouter navigate 대신 window.location 사용\n          window.location.href = \"/\";\n          console.log(\"Navigation call completed\");\n        }, 500);\n      } catch (error) {\n        console.error(\"Error during profile completion:\", error);\n        // 에러가 발생해도 리다이렉션은 진행\n        setTimeout(() => {\n          console.log(\"Error fallback - navigating to home page...\");\n          window.location.href = \"/\";\n        }, 500);\n      }\n    },\n    onError: (error: any) => {\n      setIsNavigating(false);\n      toast({\n        title: \"프로필 업데이트에 실패했습니다\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CompleteProfileFormData) => {\n    // 빈 값들을 필터링하되 null은 유지 (교회 선택 해제를 의미)\n    const filteredData = Object.fromEntries(\n      Object.entries(data).filter(([_, value]) => value !== undefined && value !== \"\" || value === null)\n    );\n    updateProfileMutation.mutate(filteredData);\n  };\n\n  // Skip 기능을 위한 mutation (빈 데이터로 profileCompleted만 true로 설정)\n  const skipProfileMutation = useMutation({\n    mutationFn: async () => {\n      // 빈 객체를 보내더라도 서버에서 profileCompleted를 true로 설정함\n      const response = await apiRequest(\"PATCH\", \"/api/users/profile\", {});\n      return response.json();\n    },\n    onSuccess: async () => {\n      console.log(\"Profile skip success - starting navigation process\");\n      setIsNavigating(true);\n      \n      toast({\n        title: \"나중에 완성하기로 했습니다\",\n        description: \"언제든지 프로필 페이지에서 추가 정보를 입력하실 수 있습니다.\",\n        duration: 2000,\n      });\n      \n      try {\n        console.log(\"Skip: Invalidating queries...\");\n        // 캐시 무효화 후 새로운 사용자 데이터 로드 대기\n        await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n        await queryClient.refetchQueries({ queryKey: [\"/api/auth/user\"] });\n        \n        console.log(\"Skip: Setting up navigation timeout...\");\n        // 짧은 딜레이 후 홈으로 이동\n        setTimeout(() => {\n          console.log(\"Skip: Navigating to home page...\");\n          window.location.href = \"/\";\n          console.log(\"Skip: Navigation call completed\");\n        }, 500);\n      } catch (error) {\n        console.error(\"Error during profile skip:\", error);\n        setTimeout(() => {\n          console.log(\"Skip error fallback - navigating to home page...\");\n          window.location.href = \"/\";\n        }, 500);\n      }\n    },\n    onError: (error: any) => {\n      setIsNavigating(false);\n      toast({\n        title: \"오류가 발생했습니다\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSkip = () => {\n    if (!updateProfileMutation.isPending && !skipProfileMutation.isPending && !isNavigating) {\n      skipProfileMutation.mutate();\n    }\n  };\n\n  const handleChurchSelect = (churchId: string, churchName: string) => {\n    form.setValue(\"churchId\", churchId);\n    setIsChurchSearchOpen(false);\n    setChurchSearch(churchName);\n  };\n\n  const selectedChurch = form.watch('churchId') \n    ? churches?.find(c => c.id === form.watch('churchId')) ?? null \n    : null;\n  \n  // 업데이트될 정보 표시를 위한 상태\n  const formValues = form.watch();\n  const hasChanges = (\n    formValues.age !== (user?.age || undefined) ||\n    formValues.region !== (user?.region || undefined) ||\n    formValues.churchId !== (user?.churchId || undefined)\n  );\n\n  // 변경될 항목들 계산\n  const getChangingSections = () => {\n    const changes = [];\n    if (formValues.age !== (user?.age || undefined)) {\n      changes.push('연령');\n    }\n    if (formValues.region !== (user?.region || undefined)) {\n      changes.push('지역');\n    }\n    if (formValues.churchId !== (user?.churchId || undefined)) {\n      changes.push('교회');\n    }\n    return changes;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-blue-950 dark:via-indigo-950 dark:to-purple-950\">\n      <main className=\"container mx-auto px-4 py-8 max-w-2xl\">\n        {/* 헤더 */}\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-primary/10 rounded-full mb-4\">\n            <UserPlus className=\"h-8 w-8 text-primary\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n            프로필 완성하기\n          </h1>\n          <p className=\"text-muted-foreground text-lg\">\n            더 나은 서비스를 위해 몇 가지 추가 정보를 알려주세요. \n            <br />모든 항목은 선택사항이며 언제든지 변경할 수 있습니다.\n          </p>\n        </div>\n\n        {/* 진행 상태 표시 카드 */}\n        {hasChanges && (\n          <Card className=\"mb-6 bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n            <CardContent className=\"pt-4\">\n              <div className=\"flex items-start space-x-3\">\n                <Info className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                <div>\n                  <h3 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2\">\n                    다음 정보가 업데이트됩니다:\n                  </h3>\n                  <div className=\"space-y-1\">\n                    {getChangingSections().map((section, index) => (\n                      <div key={index} className=\"flex items-center text-sm text-blue-700 dark:text-blue-300\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-2\" />\n                        {section} 정보\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* 현재 설정 정보 표시 */}\n        {(user?.age || user?.region || userChurch) && (\n          <Card className=\"mb-6 bg-muted/30\">\n            <CardContent className=\"pt-4\">\n              <h3 className=\"font-medium mb-3 text-sm text-muted-foreground flex items-center\">\n                <Clock className=\"h-4 w-4 mr-2\" />\n                현재 설정된 정보\n              </h3>\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">연령:</span>\n                  <span className=\"ml-2 font-medium\" data-testid=\"text-current-age\">\n                    {user?.age ? `${user.age}세` : '미설정'}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">지역:</span>\n                  <span className=\"ml-2 font-medium\" data-testid=\"text-current-region\">\n                    {user?.region || '미설정'}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">교회:</span>\n                  <span className=\"ml-2 font-medium\" data-testid=\"text-current-church\">\n                    {userChurch?.name || '미설정'}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* 프로필 폼 */}\n        <Card className=\"shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <CheckCircle className=\"h-5 w-5 mr-2 text-primary\" />\n              추가 정보 입력\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* 연령 선택 */}\n                <FormField\n                  control={form.control}\n                  name=\"age\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center\">\n                        <UserPlus className=\"h-4 w-4 mr-2\" />\n                        연령 (선택사항)\n                      </FormLabel>\n                      <Select \n                        onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)}\n                        value={field.value ? field.value.toString() : undefined}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-age\">\n                            <SelectValue placeholder=\"연령을 선택해주세요\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {generateAgeOptions().map((age) => (\n                            <SelectItem key={age} value={age.toString()}>\n                              {age}세\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* 지역 선택 */}\n                <FormField\n                  control={form.control}\n                  name=\"region\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center\">\n                        <MapPin className=\"h-4 w-4 mr-2\" />\n                        지역 (선택사항)\n                      </FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-region\">\n                            <SelectValue placeholder=\"거주 지역을 선택해주세요\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {koreanRegions.map((region) => (\n                            <SelectItem key={region} value={region}>\n                              {region}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* 교회 선택 */}\n                <FormField\n                  control={form.control}\n                  name=\"churchId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center\">\n                        <Users className=\"h-4 w-4 mr-2\" />\n                        교회 (선택사항)\n                      </FormLabel>\n                      <div className=\"space-y-3\">\n                        {/* 교회 검색 입력 */}\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            placeholder=\"교회명을 검색해주세요\"\n                            value={churchSearch}\n                            onChange={(e) => {\n                              setChurchSearch(e.target.value);\n                              setIsChurchSearchOpen(true);\n                            }}\n                            data-testid=\"input-church-search\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => setIsChurchSearchOpen(true)}\n                            data-testid=\"button-church-search\"\n                          >\n                            <Search className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n\n                        {/* 선택된 교회 표시 */}\n                        {selectedChurch && (\n                          <div className=\"p-3 bg-primary/5 border border-primary/20 rounded-md\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <p className=\"font-medium text-primary\" data-testid=\"text-selected-church\">\n                                  {selectedChurch.name}\n                                </p>\n                                {selectedChurch.description && (\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {selectedChurch.description}\n                                  </p>\n                                )}\n                              </div>\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  form.setValue(\"churchId\", null);\n                                  setChurchSearch(\"\");\n                                }}\n                                data-testid=\"button-clear-church\"\n                              >\n                                ×\n                              </Button>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* 교회 검색 결과 */}\n                        {isChurchSearchOpen && churchSearch.trim() && (\n                          <div className=\"border border-border rounded-md max-h-60 overflow-y-auto\">\n                            {churchesLoading ? (\n                              <div className=\"p-4 text-center\">\n                                <Loader2 className=\"h-4 w-4 animate-spin mx-auto mb-2\" />\n                                <p className=\"text-sm text-muted-foreground\">검색 중...</p>\n                              </div>\n                            ) : churches && churches.length > 0 ? (\n                              <div className=\"space-y-1 p-2\">\n                                {churches.map((church) => (\n                                  <button\n                                    key={church.id}\n                                    type=\"button\"\n                                    onClick={() => handleChurchSelect(church.id, church.name)}\n                                    className=\"w-full text-left p-3 hover:bg-muted rounded-md transition-colors\"\n                                    data-testid={`button-church-option-${church.id}`}\n                                  >\n                                    <div className=\"font-medium\">{church.name}</div>\n                                    {church.description && (\n                                      <div className=\"text-sm text-muted-foreground mt-1\">\n                                        {church.description}\n                                      </div>\n                                    )}\n                                  </button>\n                                ))}\n                              </div>\n                            ) : (\n                              <div className=\"p-4 text-center\">\n                                <p className=\"text-sm text-muted-foreground\">\n                                  검색 결과가 없습니다.\n                                </p>\n                              </div>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* 버튼들 */}\n                <div className=\"flex flex-col sm:flex-row gap-3 pt-6\">\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1 relative\"\n                    disabled={updateProfileMutation.isPending || skipProfileMutation.isPending || isNavigating}\n                    data-testid=\"button-submit-profile\"\n                  >\n                    {updateProfileMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        저장 중...\n                      </>\n                    ) : isNavigating ? (\n                      <>\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        완료! 홈으로 이동 중...\n                      </>\n                    ) : (\n                      <>\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        {hasChanges ? `변경사항 저장하기` : '완료하기'}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleSkip}\n                    disabled={updateProfileMutation.isPending || skipProfileMutation.isPending || isNavigating}\n                    data-testid=\"button-skip-profile\"\n                  >\n                    {skipProfileMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        처리 중...\n                      </>\n                    ) : (\n                      '나중에 하기'\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* 안내 메시지 */}\n        <Card className=\"mt-6 bg-muted/50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-sm text-muted-foreground text-center space-y-2\">\n              <p>\n                💡 <strong>알려드립니다:</strong> 모든 정보는 선택사항이며, 나중에 프로필 페이지에서 언제든지 변경하실 수 있습니다.\n              </p>\n              {(updateProfileMutation.isPending || isNavigating) && (\n                <p className=\"text-primary font-medium flex items-center justify-center mt-3\">\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  {updateProfileMutation.isPending ? '정보를 저장하고 있습니다...' : '성공적으로 저장되었습니다! 홈으로 이동 중...'}\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":23550},"server/koreanOAuth.ts":{"content":"import type { Express, RequestHandler } from \"express\";\nimport { nanoid } from \"nanoid\";\nimport CryptoJS from \"crypto-js\";\nimport { storage } from \"./storage\";\nimport \"./types\"; // Import session type augmentation\n\n// Types for OAuth responses\ninterface KakaoUserInfo {\n  id: number;\n  properties: {\n    nickname?: string;\n    profile_image?: string;\n    thumbnail_image?: string;\n  };\n  kakao_account: {\n    email?: string;\n    profile?: {\n      nickname?: string;\n      profile_image_url?: string;\n      thumbnail_image_url?: string;\n    };\n  };\n}\n\ninterface NaverUserInfo {\n  resultcode: string;\n  message: string;\n  response: {\n    id: string;\n    nickname?: string;\n    email?: string;\n    name?: string;\n    profile_image?: string;\n  };\n}\n\ninterface GoogleUserInfo {\n  id: string;\n  email: string;\n  verified_email: boolean;\n  name: string;\n  given_name?: string;\n  family_name?: string;\n  picture?: string;\n  locale?: string;\n}\n\ninterface OAuthTokenResponse {\n  access_token: string;\n  token_type: string;\n  refresh_token?: string;\n  expires_in: number;\n  scope?: string;\n}\n\n// Store state tokens and PKCE verifiers temporarily (in production, use Redis or database)\nconst stateStore = new Map<string, { provider: string; createdAt: number; codeVerifier?: string }>();\n\n// Clean up expired state tokens (older than 10 minutes)\nsetInterval(() => {\n  const tenMinutesAgo = Date.now() - 10 * 60 * 1000;\n  for (const [state, data] of Array.from(stateStore.entries())) {\n    if (data.createdAt < tenMinutesAgo) {\n      stateStore.delete(state);\n    }\n  }\n}, 5 * 60 * 1000); // Run cleanup every 5 minutes\n\n/**\n * Generate a secure state parameter for OAuth flow with optional PKCE\n */\nfunction generateState(provider: string, codeVerifier?: string): string {\n  const state = nanoid(32);\n  stateStore.set(state, { provider, createdAt: Date.now(), codeVerifier });\n  return state;\n}\n\n/**\n * Validate state parameter and get provider + PKCE verifier\n */\nfunction validateState(state: string): { provider: string; codeVerifier?: string } | null {\n  const data = stateStore.get(state);\n  if (!data) return null;\n  \n  stateStore.delete(state); // One-time use\n  return { provider: data.provider, codeVerifier: data.codeVerifier };\n}\n\n/**\n * Get OAuth configuration based on provider\n */\nfunction getOAuthConfig(provider: string) {\n  switch (provider) {\n    case 'kakao':\n      return {\n        clientId: process.env.KAKAO_CLIENT_ID,\n        clientSecret: process.env.KAKAO_CLIENT_SECRET,\n        authUrl: 'https://kauth.kakao.com/oauth/authorize',\n        tokenUrl: 'https://kauth.kakao.com/oauth/token',\n        userInfoUrl: 'https://kapi.kakao.com/v2/user/me',\n        scope: 'profile_nickname,profile_image,account_email',\n      };\n    case 'naver':\n      return {\n        clientId: process.env.NAVER_CLIENT_ID,\n        clientSecret: process.env.NAVER_CLIENT_SECRET,\n        authUrl: 'https://nid.naver.com/oauth2.0/authorize',\n        tokenUrl: 'https://nid.naver.com/oauth2.0/token',\n        userInfoUrl: 'https://openapi.naver.com/v1/nid/me',\n        scope: 'name,email,profile_image',\n      };\n    case 'google':\n      return {\n        clientId: process.env.GOOGLE_CLIENT_ID,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n        authUrl: 'https://accounts.google.com/o/oauth2/v2/auth',\n        tokenUrl: 'https://oauth2.googleapis.com/token',\n        userInfoUrl: 'https://www.googleapis.com/oauth2/v2/userinfo',\n        scope: 'openid email profile',\n      };\n    default:\n      throw new Error(`Unsupported OAuth provider: ${provider}`);\n  }\n}\n\n/**\n * Generate PKCE code verifier and challenge\n */\nfunction generatePKCE() {\n  const codeVerifier = nanoid(128); // 128 character random string\n  const codeChallenge = CryptoJS.SHA256(codeVerifier)\n    .toString(CryptoJS.enc.Base64url)\n    .replace(/=/g, '');\n  \n  return { codeVerifier, codeChallenge };\n}\n\n/**\n * Get allowed redirect URI based on environment and request\n */\nfunction getAllowedRedirectUri(req: any, provider: string): string {\n  // Allow explicit override for production deployments\n  if (process.env.PUBLIC_BASE_URL) {\n    const redirectUri = `${process.env.PUBLIC_BASE_URL}/auth/${provider}/callback`;\n    console.log(`OAuth ${provider} - Using PUBLIC_BASE_URL override: ${redirectUri}`);\n    return redirectUri;\n  }\n  \n  const protocol = req.get('X-Forwarded-Proto') || req.protocol;\n  const host = req.get('host') || req.hostname;\n  \n  console.log(`OAuth ${provider} - Protocol: ${protocol}, Host: ${host}`);\n  \n  // Always derive from the actual request\n  const redirectUri = `${protocol}://${host}/auth/${provider}/callback`;\n  console.log(`OAuth ${provider} - Final redirect URI: ${redirectUri}`);\n  return redirectUri;\n}\n\n/**\n * Exchange authorization code for access token\n */\nasync function exchangeCodeForToken(\n  provider: string,\n  code: string,\n  redirectUri: string,\n  state?: string,\n  codeVerifier?: string\n): Promise<OAuthTokenResponse> {\n  const config = getOAuthConfig(provider);\n  \n  if (!config.clientId || !config.clientSecret) {\n    throw new Error(`Missing ${provider.toUpperCase()} OAuth credentials`);\n  }\n\n  const params = new URLSearchParams({\n    grant_type: 'authorization_code',\n    client_id: config.clientId,\n    client_secret: config.clientSecret,\n    code,\n    redirect_uri: redirectUri,\n  });\n\n  // Add PKCE code verifier for Google (and optionally other providers)\n  if ((provider === 'google' || provider === 'naver') && codeVerifier) {\n    params.append('code_verifier', codeVerifier);\n  }\n\n  // Naver requires state parameter in token exchange\n  if (provider === 'naver' && state) {\n    params.append('state', state);\n  }\n\n  const response = await fetch(config.tokenUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.text();\n    throw new Error(`Token exchange failed: ${errorData}`);\n  }\n\n  return await response.json();\n}\n\n/**\n * Get user information from OAuth provider\n */\nasync function getUserInfo(provider: string, accessToken: string): Promise<KakaoUserInfo | NaverUserInfo | GoogleUserInfo> {\n  const config = getOAuthConfig(provider);\n\n  const headers: Record<string, string> = {\n    'Authorization': `Bearer ${accessToken}`,\n  };\n\n  // Naver requires additional headers\n  if (provider === 'naver') {\n    headers['X-Naver-Client-Id'] = config.clientId!;\n    headers['X-Naver-Client-Secret'] = config.clientSecret!;\n  }\n\n  const response = await fetch(config.userInfoUrl, {\n    method: 'GET',\n    headers,\n  });\n\n  if (!response.ok) {\n    const errorData = await response.text();\n    throw new Error(`User info fetch failed: ${errorData}`);\n  }\n\n  return await response.json();\n}\n\n/**\n * Convert OAuth user info to our user format\n */\nfunction convertToSafeAuthUser(provider: string, userInfo: KakaoUserInfo | NaverUserInfo | GoogleUserInfo) {\n  if (provider === 'kakao') {\n    const kakaoUser = userInfo as KakaoUserInfo;\n    return {\n      id: undefined, // Let the system generate a new ID\n      email: kakaoUser.kakao_account.email,\n      firstName: kakaoUser.kakao_account.profile?.nickname || kakaoUser.properties.nickname,\n      lastName: undefined,\n      profileImageUrl: kakaoUser.kakao_account.profile?.profile_image_url || kakaoUser.properties.profile_image,\n      authProvider: 'kakao',\n      authProviderId: kakaoUser.id.toString(),\n      emailVerified: true, // OAuth providers verify email\n    };\n  } else if (provider === 'naver') {\n    const naverUser = userInfo as NaverUserInfo;\n    if (naverUser.resultcode !== '00') {\n      throw new Error(`Naver API error: ${naverUser.message}`);\n    }\n    \n    // Split name into first and last name if available\n    const fullName = naverUser.response.name || naverUser.response.nickname;\n    const firstName = fullName;\n    \n    return {\n      id: undefined,\n      email: naverUser.response.email,\n      firstName,\n      lastName: undefined,\n      profileImageUrl: naverUser.response.profile_image,\n      authProvider: 'naver',\n      authProviderId: naverUser.response.id,\n      emailVerified: true, // OAuth providers verify email\n    };\n  } else if (provider === 'google') {\n    const googleUser = userInfo as GoogleUserInfo;\n    \n    return {\n      id: undefined,\n      email: googleUser.email,\n      firstName: googleUser.given_name || googleUser.name,\n      lastName: googleUser.family_name,\n      profileImageUrl: googleUser.picture,\n      authProvider: 'google',\n      authProviderId: googleUser.id,\n      emailVerified: googleUser.verified_email, // Use Google's email verification status\n    };\n  }\n  \n  throw new Error(`Unsupported provider: ${provider}`);\n}\n\n/**\n * Setup Korean OAuth routes\n */\nexport function setupKoreanOAuth(app: Express) {\n  // Kakao login initiation\n  app.get('/auth/kakao', (req, res) => {\n    const config = getOAuthConfig('kakao');\n    \n    if (!config.clientId) {\n      return res.status(500).json({ message: 'Kakao OAuth not configured' });\n    }\n\n    try {\n      const redirectUri = getAllowedRedirectUri(req, 'kakao');\n      const state = generateState('kakao');\n      \n      const params = new URLSearchParams({\n        client_id: config.clientId,\n        redirect_uri: redirectUri,\n        response_type: 'code',\n        scope: config.scope,\n        state,\n      });\n\n      const authUrl = `${config.authUrl}?${params.toString()}`;\n      res.redirect(authUrl);\n    } catch (error) {\n      console.error('Kakao OAuth initiation error:', error);\n      res.status(400).json({ message: 'Invalid OAuth configuration' });\n    }\n  });\n\n  // Naver login initiation\n  app.get('/auth/naver', (req, res) => {\n    const config = getOAuthConfig('naver');\n    \n    if (!config.clientId) {\n      return res.status(500).json({ message: 'Naver OAuth not configured' });\n    }\n\n    try {\n      const redirectUri = getAllowedRedirectUri(req, 'naver');\n      const { codeVerifier, codeChallenge } = generatePKCE();\n      const state = generateState('naver', codeVerifier);\n      \n      const params = new URLSearchParams({\n        client_id: config.clientId,\n        redirect_uri: redirectUri,\n        response_type: 'code',\n        scope: config.scope,\n        state,\n        code_challenge: codeChallenge,\n        code_challenge_method: 'S256',\n      });\n\n      const authUrl = `${config.authUrl}?${params.toString()}`;\n      res.redirect(authUrl);\n    } catch (error) {\n      console.error('Naver OAuth initiation error:', error);\n      res.status(400).json({ message: 'Invalid OAuth configuration' });\n    }\n  });\n\n  // Google login initiation\n  app.get('/auth/google', (req, res) => {\n    const config = getOAuthConfig('google');\n    \n    if (!config.clientId) {\n      return res.status(500).json({ message: 'Google OAuth not configured' });\n    }\n\n    try {\n      const redirectUri = getAllowedRedirectUri(req, 'google');\n      const { codeVerifier, codeChallenge } = generatePKCE();\n      const state = generateState('google', codeVerifier);\n      \n      const params = new URLSearchParams({\n        client_id: config.clientId,\n        redirect_uri: redirectUri,\n        response_type: 'code',\n        scope: config.scope,\n        state,\n        access_type: 'offline', // Required for Google OAuth\n        code_challenge: codeChallenge,\n        code_challenge_method: 'S256',\n      });\n\n      const authUrl = `${config.authUrl}?${params.toString()}`;\n      res.redirect(authUrl);\n    } catch (error) {\n      console.error('Google OAuth initiation error:', error);\n      res.status(400).json({ message: 'Invalid OAuth configuration' });\n    }\n  });\n\n  // Kakao callback handler\n  app.get('/auth/kakao/callback', async (req, res) => {\n    try {\n      const { code, state, error } = req.query;\n\n      if (error) {\n        console.error('Kakao OAuth error:', error);\n        return res.redirect('/?error=oauth_denied');\n      }\n\n      if (!code || !state) {\n        return res.redirect('/?error=oauth_invalid');\n      }\n\n      // Validate state\n      const stateData = validateState(state as string);\n      if (!stateData || stateData.provider !== 'kakao') {\n        return res.redirect('/?error=oauth_state_mismatch');\n      }\n\n      // Exchange code for token\n      const redirectUri = getAllowedRedirectUri(req, 'kakao');\n      const tokenResponse = await exchangeCodeForToken('kakao', code as string, redirectUri);\n\n      // Get user information\n      const userInfo = await getUserInfo('kakao', tokenResponse.access_token);\n\n      // Convert to our user format and save\n      const safeAuthUser = convertToSafeAuthUser('kakao', userInfo);\n      const user = await storage.safeUpsertUserFromAuth(safeAuthUser);\n\n      // Regenerate session to prevent session fixation attacks\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error('Kakao session regeneration error:', err);\n          return res.redirect('/?error=session_error');\n        }\n\n        // Set up session after regeneration\n        req.session.user = {\n          id: user.id,\n          email: user.email || undefined,\n          firstName: user.firstName || undefined,\n          lastName: user.lastName || undefined,\n          profileImageUrl: user.profileImageUrl || undefined,\n          authProvider: user.authProvider || undefined,\n        };\n\n        // Save session to ensure it's persisted\n        req.session.save((saveErr) => {\n          if (saveErr) {\n            console.error('Kakao session save error:', saveErr);\n            return res.redirect('/?error=session_error');\n          }\n\n          // Redirect to profile completion or home based on user profile completeness\n          if (!user.age || !user.region) {\n            res.redirect('/complete-profile');\n          } else {\n            res.redirect('/');\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Kakao OAuth callback error:', error);\n      res.redirect('/?error=oauth_error');\n    }\n  });\n\n  // Naver callback handler\n  app.get('/auth/naver/callback', async (req, res) => {\n    try {\n      const { code, state, error } = req.query;\n\n      if (error) {\n        console.error('Naver OAuth error:', error);\n        return res.redirect('/?error=oauth_denied');\n      }\n\n      if (!code || !state) {\n        return res.redirect('/?error=oauth_invalid');\n      }\n\n      // Validate state\n      const stateData = validateState(state as string);\n      if (!stateData || stateData.provider !== 'naver') {\n        return res.redirect('/?error=oauth_state_mismatch');\n      }\n\n      // Exchange code for token\n      const redirectUri = getAllowedRedirectUri(req, 'naver');\n      const tokenResponse = await exchangeCodeForToken(\n        'naver', \n        code as string, \n        redirectUri, \n        state as string, \n        stateData.codeVerifier\n      );\n\n      // Get user information\n      const userInfo = await getUserInfo('naver', tokenResponse.access_token);\n\n      // Convert to our user format and save\n      const safeAuthUser = convertToSafeAuthUser('naver', userInfo);\n      const user = await storage.safeUpsertUserFromAuth(safeAuthUser);\n\n      // Regenerate session to prevent session fixation attacks\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error('Naver session regeneration error:', err);\n          return res.redirect('/?error=session_error');\n        }\n\n        // Set up session after regeneration\n        req.session.user = {\n          id: user.id,\n          email: user.email || undefined,\n          firstName: user.firstName || undefined,\n          lastName: user.lastName || undefined,\n          profileImageUrl: user.profileImageUrl || undefined,\n          authProvider: user.authProvider || undefined,\n        };\n\n        // Save session to ensure it's persisted\n        req.session.save((saveErr) => {\n          if (saveErr) {\n            console.error('Naver session save error:', saveErr);\n            return res.redirect('/?error=session_error');\n          }\n\n          // Redirect to profile completion or home based on user profile completeness\n          if (!user.age || !user.region) {\n            res.redirect('/complete-profile');\n          } else {\n            res.redirect('/');\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Naver OAuth callback error:', error);\n      res.redirect('/?error=oauth_error');\n    }\n  });\n\n  // Google callback handler\n  app.get('/auth/google/callback', async (req, res) => {\n    try {\n      const { code, state, error } = req.query;\n\n      if (error) {\n        console.error('Google OAuth error:', error);\n        return res.redirect('/?error=oauth_denied');\n      }\n\n      if (!code || !state) {\n        return res.redirect('/?error=oauth_invalid');\n      }\n\n      // Validate state\n      const stateData = validateState(state as string);\n      if (!stateData || stateData.provider !== 'google') {\n        return res.redirect('/?error=oauth_state_mismatch');\n      }\n\n      // Exchange code for token\n      const redirectUri = getAllowedRedirectUri(req, 'google');\n      const tokenResponse = await exchangeCodeForToken(\n        'google', \n        code as string, \n        redirectUri, \n        undefined, \n        stateData.codeVerifier\n      );\n\n      // Get user information\n      const userInfo = await getUserInfo('google', tokenResponse.access_token);\n\n      // Convert to our user format and save\n      const safeAuthUser = convertToSafeAuthUser('google', userInfo);\n      const user = await storage.safeUpsertUserFromAuth(safeAuthUser);\n\n      // Regenerate session to prevent session fixation attacks\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error('Google session regeneration error:', err);\n          return res.redirect('/?error=session_error');\n        }\n\n        // Set up session after regeneration\n        req.session.user = {\n          id: user.id,\n          email: user.email || undefined,\n          firstName: user.firstName || undefined,\n          lastName: user.lastName || undefined,\n          profileImageUrl: user.profileImageUrl || undefined,\n          authProvider: user.authProvider || undefined,\n        };\n\n        // Save session to ensure it's persisted\n        req.session.save((saveErr) => {\n          if (saveErr) {\n            console.error('Google session save error:', saveErr);\n            return res.redirect('/?error=session_error');\n          }\n\n          // Redirect to profile completion or home based on user profile completeness\n          if (!user.age || !user.region) {\n            res.redirect('/complete-profile');\n          } else {\n            res.redirect('/');\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Google OAuth callback error:', error);\n      res.redirect('/?error=oauth_error');\n    }\n  });\n}\n\n/**\n * Check if user is authenticated via Korean OAuth\n */\nexport const isKoreanOAuthAuthenticated: RequestHandler = (req, res, next) => {\n  const user = req.session?.user;\n  \n  if (!user || !user.id) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  // Add user info to request for downstream handlers\n  (req as any).user = {\n    claims: { sub: user.id },\n    ...user,\n  };\n\n  next();\n};","size_bytes":19230},"server/types.ts":{"content":"import type { SessionData } from \"express-session\";\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    user?: {\n      id: string;\n      email?: string;\n      firstName?: string;\n      lastName?: string;\n      profileImageUrl?: string;\n      authProvider?: string;\n    };\n  }\n}\n\ndeclare global {\n  namespace Express {\n    interface User {\n      claims?: { sub: string };\n      id?: string;\n      email?: string;\n      firstName?: string;\n      lastName?: string;\n      profileImageUrl?: string;\n      authProvider?: string;\n      access_token?: string;\n      refresh_token?: string;\n      expires_at?: number;\n    }\n  }\n}","size_bytes":635},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  Area,\n  AreaChart\n} from 'recharts';\nimport { \n  Users, \n  Building2, \n  Activity, \n  TrendingUp, \n  Target, \n  Clock,\n  AlertTriangle,\n  CheckCircle2,\n  UserCheck,\n  Calendar\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface AdminStats {\n  totalUsers: number;\n  totalChurches: number;\n  totalTypingSessions: number;\n  averageWpm: number;\n  averageAccuracy: number;\n  newUsersThisWeek: number;\n  activeUsersToday: number;\n  usersByAge: Array<{ ageRange: string; count: number }>;\n  usersByRegion: Array<{ region: string; count: number }>;\n  churchMemberStats: Array<{ churchName: string; memberCount: number; averageWpm: number }>;\n  recentActivity: Array<{ date: string; sessions: number; newUsers: number }>;\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC658'];\n\nexport default function AdminDashboard() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const [, navigate] = useLocation();\n\n  // Admin access check\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || !(user as any)?.isAdmin)) {\n      navigate(\"/\");\n    }\n  }, [isAuthenticated, user, authLoading, navigate]);\n\n  const { data: stats, isLoading, error } = useQuery<AdminStats>({\n    queryKey: ['/api/admin/stats'],\n    enabled: isAuthenticated && (user as any)?.isAdmin,\n  });\n\n  if (authLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !(user as any)?.isAdmin) {\n    return null;\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Alert variant=\"destructive\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            관리자 통계를 불러오는 중 오류가 발생했습니다. 다시 시도해주세요.\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\" data-testid=\"admin-dashboard\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"title-admin-dashboard\">\n          관리자 대시보드\n        </h1>\n        <p className=\"text-muted-foreground\">\n          홀리넷 성경필사 서비스의 주요 통계와 현황을 확인하세요.\n        </p>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4 mb-8\">\n          {[...Array(8)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <Skeleton className=\"h-4 w-20\" />\n                <Skeleton className=\"h-4 w-4\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-8 w-16 mb-2\" />\n                <Skeleton className=\"h-3 w-24\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <>\n          {/* Summary Statistics */}\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4 mb-8\">\n            <Card data-testid=\"card-total-users\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">총 사용자</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-users\">\n                  {stats?.totalUsers.toLocaleString()}명\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  이번 주 신규: {stats?.newUsersThisWeek}명\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-active-users\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">오늘 활성 사용자</CardTitle>\n                <UserCheck className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-active-users\">\n                  {stats?.activeUsersToday}명\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  오늘 활동한 사용자\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-total-churches\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">등록된 교회</CardTitle>\n                <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-churches\">\n                  {stats?.totalChurches}개\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  활성화된 교회 커뮤니티\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-typing-sessions\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">총 연습 세션</CardTitle>\n                <Activity className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-typing-sessions\">\n                  {stats?.totalTypingSessions.toLocaleString()}회\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  누적 필사 연습 횟수\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-average-wpm\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">평균 타자 속도</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"stat-average-wpm\">\n                  {stats?.averageWpm}WPM\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  전체 사용자 평균\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-average-accuracy\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">평균 정확도</CardTitle>\n                <Target className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-average-accuracy\">\n                  {stats?.averageAccuracy}%\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  전체 사용자 평균\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-new-users-week\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">이번 주 신규</CardTitle>\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"stat-new-users-week\">\n                  {stats?.newUsersThisWeek}명\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  지난 7일간 가입\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-status\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">서비스 상태</CardTitle>\n                <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-service-status\">\n                  정상\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  모든 시스템 작동 중\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Charts Grid */}\n          <div className=\"grid gap-6 lg:grid-cols-2 mb-8\">\n            {/* Age Distribution Chart */}\n            <Card data-testid=\"chart-age-distribution\">\n              <CardHeader>\n                <CardTitle>연령대별 사용자 분포</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={stats?.usersByAge}\n                      dataKey=\"count\"\n                      nameKey=\"ageRange\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      label={({ ageRange, count, percent }) => \n                        `${ageRange}: ${count}명 (${(percent * 100).toFixed(0)}%)`\n                      }\n                    >\n                      {stats?.usersByAge?.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Region Distribution Chart */}\n            <Card data-testid=\"chart-region-distribution\">\n              <CardHeader>\n                <CardTitle>지역별 사용자 분포</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={stats?.usersByRegion?.slice(0, 10)}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"region\" \n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={100}\n                      interval={0}\n                    />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"count\" fill=\"#0088FE\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Church Stats and Recent Activity */}\n          <div className=\"grid gap-6 lg:grid-cols-2 mb-8\">\n            {/* Church Member Stats */}\n            <Card data-testid=\"chart-church-stats\">\n              <CardHeader>\n                <CardTitle>교회별 사용자 현황 (상위 10개)</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={stats?.churchMemberStats?.slice(0, 10)}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"churchName\" \n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={100}\n                      interval={0}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value, name) => [\n                        name === 'memberCount' ? `${value}명` : `${value}WPM`,\n                        name === 'memberCount' ? '회원 수' : '평균 WPM'\n                      ]}\n                    />\n                    <Bar dataKey=\"memberCount\" fill=\"#00C49F\" name=\"memberCount\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity Chart */}\n            <Card data-testid=\"chart-recent-activity\">\n              <CardHeader>\n                <CardTitle>최근 7일 활동 현황</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={stats?.recentActivity}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tickFormatter={(value) => {\n                        const date = new Date(value);\n                        return `${date.getMonth() + 1}/${date.getDate()}`;\n                      }}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(value) => {\n                        const date = new Date(value);\n                        return `${date.getFullYear()}년 ${date.getMonth() + 1}월 ${date.getDate()}일`;\n                      }}\n                      formatter={(value, name) => [\n                        `${value}${name === 'sessions' ? '회' : '명'}`,\n                        name === 'sessions' ? '연습 세션' : '신규 가입자'\n                      ]}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"sessions\" \n                      stackId=\"1\"\n                      stroke=\"#8884d8\" \n                      fill=\"#8884d8\" \n                      name=\"sessions\"\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"newUsers\" \n                      stackId=\"2\"\n                      stroke=\"#82ca9d\" \n                      fill=\"#82ca9d\" \n                      name=\"newUsers\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <Card data-testid=\"info-admin-tools\">\n            <CardHeader>\n              <CardTitle>관리자 도구</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-4\">\n                현재 대시보드는 실시간 통계 정보를 제공합니다. \n                사용자 관리, 교회 관리, 시스템 모니터링 등의 추가 기능은 향후 추가될 예정입니다.\n              </p>\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <Clock className=\"h-4 w-4\" />\n                <span>마지막 업데이트: {new Date().toLocaleString('ko-KR')}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":15794},"client/src/pages/church-register.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Users, \n  CheckCircle, \n  ArrowLeft,\n  Info,\n  Plus,\n  Church\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\n// Form Schema\nconst createChurchSchema = z.object({\n  name: z.string().min(1, \"교회 이름을 입력해주세요\").max(100, \"교회 이름은 100자 이내로 입력해주세요\"),\n  description: z.string().optional(),\n});\n\ntype CreateChurchFormData = z.infer<typeof createChurchSchema>;\n\nexport default function ChurchRegister() {\n  const [, navigate] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<CreateChurchFormData>({\n    resolver: zodResolver(createChurchSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const createChurchMutation = useMutation({\n    mutationFn: async (data: CreateChurchFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/churches\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"교회가 성공적으로 생성되었습니다!\",\n        description: `${data.name}의 관리자가 되었습니다. 교회 코드를 통해 다른 성도들을 초대하세요.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard/churches\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/church\"] });\n      \n      // Redirect to the new church detail page\n      navigate(`/churches/${data.id}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"교회 생성에 실패했습니다\",\n        description: error.message || \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateChurchFormData) => {\n    createChurchMutation.mutate(data);\n  };\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated) {\n      navigate(\"/\");\n    }\n  }, [isAuthenticated, navigate]);\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"max-w-md mx-auto\">\n          <CardContent className=\"pt-6 text-center\">\n            <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold mb-2\">로그인이 필요합니다</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              교회를 생성하려면 먼저 로그인해주세요.\n            </p>\n            <a href=\"/api/auth/login\">\n              <Button data-testid=\"login-required-btn\">\n                로그인하기\n              </Button>\n            </a>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 max-w-2xl\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center mb-4\">\n            <Link href=\"/churches\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"back-to-churches\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                교회 그룹으로 돌아가기\n              </Button>\n            </Link>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n                <Church className=\"h-8 w-8 text-primary\" />\n              </div>\n            </div>\n            <h1 className=\"text-3xl md:text-4xl font-bold text-foreground mb-2\">\n              새 교회 그룹 생성\n            </h1>\n            <p className=\"text-lg text-muted-foreground\">\n              성경 필사를 함께할 교회 그룹을 만들어보세요\n            </p>\n          </div>\n        </div>\n\n        {/* Info Card */}\n        <Alert className=\"mb-8\">\n          <Info className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-sm\">\n            <strong>교회 그룹을 만들면:</strong>\n            <ul className=\"mt-2 space-y-1 text-muted-foreground\">\n              <li>• 고유한 8자리 교회 코드가 자동으로 생성됩니다</li>\n              <li>• 다른 성도들이 코드를 통해 쉽게 참여할 수 있습니다</li>\n              <li>• 교회별 통계와 랭킹을 확인할 수 있습니다</li>\n              <li>• 당신이 교회의 관리자가 됩니다</li>\n            </ul>\n          </AlertDescription>\n        </Alert>\n\n        {/* Registration Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Plus className=\"h-5 w-5 mr-2 text-primary\" />\n              교회 정보 입력\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>교회 이름 *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"예: 새소망교회, 온누리교회\" \n                          data-testid=\"input-church-name\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>교회 소개 (선택사항)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"교회에 대한 간단한 소개나 목표를 적어주세요&#10;예: 말씀과 기도로 하나되어 성장하는 공동체\"\n                          data-testid=\"input-church-description\"\n                          rows={4}\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n                  <Link href=\"/churches\" className=\"sm:w-auto w-full\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      className=\"w-full\"\n                      data-testid=\"button-cancel-register\"\n                    >\n                      취소\n                    </Button>\n                  </Link>\n                  <Button \n                    type=\"submit\" \n                    disabled={createChurchMutation.isPending}\n                    className=\"flex-1 sm:flex-none sm:min-w-32\"\n                    data-testid=\"button-submit-register\"\n                  >\n                    {createChurchMutation.isPending ? (\n                      <>생성 중...</>\n                    ) : (\n                      <>\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        교회 생성하기\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Footer Info */}\n        <div className=\"mt-8 text-center text-sm text-muted-foreground\">\n          <p>\n            교회 생성 후 교회 코드를 통해 다른 성도들을 초대하실 수 있습니다.\n          </p>\n          <p className=\"mt-1\">\n            교회 정보는 언제든지 수정할 수 있습니다.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8787},"client/src/components/dashboard-charts.tsx":{"content":"import {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from \"recharts\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendingUp, BookOpen, Calendar, Clock } from \"lucide-react\";\n\ninterface WeeklyProgressData {\n  day: string;\n  sessions: number;\n  wpm: number;\n  accuracy: number;\n  wordsTyped: number;\n}\n\ninterface BookProgressData {\n  book: string;\n  progress: number;\n  totalVerses: number;\n  completedVerses: number;\n}\n\ninterface SessionTrendData {\n  date: string;\n  wpm: number;\n  accuracy: number;\n  duration: number;\n  points: number;\n}\n\ninterface ChartProps {\n  className?: string;\n}\n\n// 주간 진행률 차트\ninterface WeeklyProgressChartProps extends ChartProps {\n  data: WeeklyProgressData[];\n}\n\nexport function WeeklyProgressChart({ data, className = \"\" }: WeeklyProgressChartProps) {\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Calendar className=\"h-5 w-5 text-blue-500\" />\n          <span>주간 연습 현황</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[300px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={data}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                dataKey=\"day\" \n                tick={{ fontSize: 12 }}\n                axisLine={false}\n              />\n              <YAxis \n                yAxisId=\"sessions\"\n                orientation=\"left\"\n                tick={{ fontSize: 12 }}\n                axisLine={false}\n              />\n              <YAxis \n                yAxisId=\"wpm\"\n                orientation=\"right\"\n                tick={{ fontSize: 12 }}\n                axisLine={false}\n              />\n              <Tooltip \n                content={({ active, payload, label }) => {\n                  if (active && payload && payload.length) {\n                    return (\n                      <div className=\"bg-background border rounded-lg p-3 shadow-lg\">\n                        <p className=\"font-medium\">{label}</p>\n                        <div className=\"space-y-1 mt-2\">\n                          {payload.map((entry, index) => (\n                            <p key={index} style={{ color: entry.color }} className=\"text-sm\">\n                              {entry.name}: {entry.value}\n                              {entry.dataKey === 'wpm' ? ' WPM' : \n                               entry.dataKey === 'accuracy' ? '%' : \n                               entry.dataKey === 'sessions' ? '회' : ''}\n                            </p>\n                          ))}\n                        </div>\n                      </div>\n                    );\n                  }\n                  return null;\n                }}\n              />\n              <Line \n                yAxisId=\"sessions\"\n                type=\"monotone\" \n                dataKey=\"sessions\" \n                stroke=\"#3b82f6\" \n                strokeWidth={2}\n                name=\"연습 세션\"\n                dot={{ fill: '#3b82f6' }}\n              />\n              <Line \n                yAxisId=\"wpm\"\n                type=\"monotone\" \n                dataKey=\"wpm\" \n                stroke=\"#10b981\" \n                strokeWidth={2}\n                name=\"평균 WPM\"\n                dot={{ fill: '#10b981' }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// 성경 책별 진행률 차트\ninterface BibleProgressChartProps extends ChartProps {\n  data: BookProgressData[];\n}\n\nexport function BibleProgressChart({ data, className = \"\" }: BibleProgressChartProps) {\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <BookOpen className=\"h-5 w-5 text-green-500\" />\n          <span>성경 책별 진행률</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[300px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={data} layout=\"horizontal\">\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                type=\"number\" \n                domain={[0, 100]}\n                tick={{ fontSize: 12 }}\n                axisLine={false}\n              />\n              <YAxis \n                type=\"category\" \n                dataKey=\"book\" \n                tick={{ fontSize: 12 }}\n                axisLine={false}\n                width={80}\n              />\n              <Tooltip \n                content={({ active, payload, label }) => {\n                  if (active && payload && payload.length) {\n                    const data = payload[0].payload;\n                    return (\n                      <div className=\"bg-background border rounded-lg p-3 shadow-lg\">\n                        <p className=\"font-medium\">{label}</p>\n                        <div className=\"space-y-1 mt-2\">\n                          <p className=\"text-sm\">진행률: {data.progress}%</p>\n                          <p className=\"text-sm\">완료: {data.completedVerses}/{data.totalVerses}절</p>\n                        </div>\n                      </div>\n                    );\n                  }\n                  return null;\n                }}\n              />\n              <Bar \n                dataKey=\"progress\" \n                fill=\"#10b981\"\n                radius={[0, 4, 4, 0]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// 최근 세션 성과 추세 차트\ninterface SessionTrendChartProps extends ChartProps {\n  data: SessionTrendData[];\n}\n\nexport function SessionTrendChart({ data, className = \"\" }: SessionTrendChartProps) {\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <TrendingUp className=\"h-5 w-5 text-purple-500\" />\n          <span>최근 성과 추세</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[300px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <AreaChart data={data}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                dataKey=\"date\" \n                tick={{ fontSize: 12 }}\n                axisLine={false}\n              />\n              <YAxis \n                yAxisId=\"wpm\"\n                orientation=\"left\"\n                tick={{ fontSize: 12 }}\n                axisLine={false}\n              />\n              <YAxis \n                yAxisId=\"accuracy\"\n                orientation=\"right\"\n                domain={[0, 100]}\n                tick={{ fontSize: 12 }}\n                axisLine={false}\n              />\n              <Tooltip \n                content={({ active, payload, label }) => {\n                  if (active && payload && payload.length) {\n                    return (\n                      <div className=\"bg-background border rounded-lg p-3 shadow-lg\">\n                        <p className=\"font-medium\">{label}</p>\n                        <div className=\"space-y-1 mt-2\">\n                          {payload.map((entry, index) => (\n                            <p key={index} style={{ color: entry.color }} className=\"text-sm\">\n                              {entry.name}: {entry.value}\n                              {entry.dataKey === 'wpm' ? ' WPM' : \n                               entry.dataKey === 'accuracy' ? '%' : \n                               entry.dataKey === 'duration' ? '분' : \n                               entry.dataKey === 'points' ? '점' : ''}\n                            </p>\n                          ))}\n                        </div>\n                      </div>\n                    );\n                  }\n                  return null;\n                }}\n              />\n              <Area\n                yAxisId=\"wpm\"\n                type=\"monotone\"\n                dataKey=\"wpm\"\n                stackId=\"1\"\n                stroke=\"#8b5cf6\"\n                fill=\"#8b5cf6\"\n                fillOpacity={0.3}\n                name=\"WPM\"\n              />\n              <Area\n                yAxisId=\"accuracy\"\n                type=\"monotone\"\n                dataKey=\"accuracy\"\n                stackId=\"2\"\n                stroke=\"#f59e0b\"\n                fill=\"#f59e0b\"\n                fillOpacity={0.3}\n                name=\"정확도\"\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// 연습 시간 분포 파이 차트\ninterface PracticeTimeDistributionData {\n  period: string;\n  hours: number;\n  sessions: number;\n}\n\ninterface PracticeTimeChartProps extends ChartProps {\n  data: PracticeTimeDistributionData[];\n}\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#6b7280'];\n\nexport function PracticeTimeChart({ data, className = \"\" }: PracticeTimeChartProps) {\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Clock className=\"h-5 w-5 text-orange-500\" />\n          <span>연습 시간 분포</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[300px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={data}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                label={({ period, percent }) => `${period} ${(percent * 100).toFixed(0)}%`}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"hours\"\n              >\n                {data.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip \n                content={({ active, payload }) => {\n                  if (active && payload && payload.length) {\n                    const data = payload[0].payload;\n                    return (\n                      <div className=\"bg-background border rounded-lg p-3 shadow-lg\">\n                        <p className=\"font-medium\">{data.period}</p>\n                        <div className=\"space-y-1 mt-2\">\n                          <p className=\"text-sm\">연습 시간: {data.hours}시간</p>\n                          <p className=\"text-sm\">세션 수: {data.sessions}회</p>\n                        </div>\n                      </div>\n                    );\n                  }\n                  return null;\n                }}\n              />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// 월간 진행률 요약 차트\ninterface MonthlyProgressData {\n  month: string;\n  sessions: number;\n  wordsTyped: number;\n  avgWpm: number;\n  avgAccuracy: number;\n  practiceTime: number;\n}\n\ninterface MonthlyProgressChartProps extends ChartProps {\n  data: MonthlyProgressData[];\n}\n\nexport function MonthlyProgressChart({ data, className = \"\" }: MonthlyProgressChartProps) {\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Calendar className=\"h-5 w-5 text-indigo-500\" />\n          <span>월간 진행률</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[400px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={data}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                dataKey=\"month\" \n                tick={{ fontSize: 12 }}\n                axisLine={false}\n              />\n              <YAxis \n                yAxisId=\"sessions\"\n                orientation=\"left\"\n                tick={{ fontSize: 12 }}\n                axisLine={false}\n              />\n              <YAxis \n                yAxisId=\"wpm\"\n                orientation=\"right\"\n                tick={{ fontSize: 12 }}\n                axisLine={false}\n              />\n              <Tooltip \n                content={({ active, payload, label }) => {\n                  if (active && payload && payload.length) {\n                    const data = payload[0].payload;\n                    return (\n                      <div className=\"bg-background border rounded-lg p-3 shadow-lg\">\n                        <p className=\"font-medium\">{label}</p>\n                        <div className=\"space-y-1 mt-2\">\n                          <p className=\"text-sm\">연습 세션: {data.sessions}회</p>\n                          <p className=\"text-sm\">타자 수: {data.wordsTyped.toLocaleString()}단어</p>\n                          <p className=\"text-sm\">평균 WPM: {data.avgWpm}</p>\n                          <p className=\"text-sm\">평균 정확도: {data.avgAccuracy}%</p>\n                          <p className=\"text-sm\">연습 시간: {data.practiceTime}시간</p>\n                        </div>\n                      </div>\n                    );\n                  }\n                  return null;\n                }}\n              />\n              <Bar \n                yAxisId=\"sessions\"\n                dataKey=\"sessions\" \n                fill=\"#3b82f6\"\n                name=\"연습 세션\"\n              />\n              <Bar \n                yAxisId=\"wpm\"\n                dataKey=\"avgWpm\" \n                fill=\"#10b981\"\n                name=\"평균 WPM\"\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13840},"client/src/components/skeleton-loader.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\n// 기본 스켈레톤 컴포넌트\nexport function Skeleton({ className = \"\", width, height }: { \n  className?: string; \n  width?: string | number; \n  height?: string | number; \n}) {\n  return (\n    <div \n      className={`animate-pulse bg-muted rounded ${className}`}\n      style={{ \n        width: typeof width === 'number' ? `${width}px` : width, \n        height: typeof height === 'number' ? `${height}px` : height \n      }}\n      aria-label=\"로딩 중\"\n    />\n  );\n}\n\n// 통계 카드 스켈레톤\nexport function StatCardSkeleton({ className = \"\" }: { className?: string }) {\n  return (\n    <Card className={className} aria-label=\"통계 카드 로딩 중\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <Skeleton width=\"80px\" height=\"16px\" />\n        <Skeleton width=\"16px\" height=\"16px\" />\n      </CardHeader>\n      <CardContent>\n        <Skeleton width=\"60px\" height=\"28px\" className=\"mb-2\" />\n        <Skeleton width=\"120px\" height=\"12px\" />\n      </CardContent>\n    </Card>\n  );\n}\n\n// 차트 스켈레톤\nexport function ChartSkeleton({ className = \"\" }: { className?: string }) {\n  return (\n    <Card className={className} aria-label=\"차트 로딩 중\">\n      <CardHeader>\n        <div className=\"flex items-center space-x-2\">\n          <Skeleton width=\"20px\" height=\"20px\" />\n          <Skeleton width=\"120px\" height=\"20px\" />\n        </div>\n      </CardHeader>\n      <CardContent>\n        <Skeleton width=\"100%\" height=\"300px\" />\n      </CardContent>\n    </Card>\n  );\n}\n\n// 목표 카드 스켈레톤\nexport function GoalCardSkeleton({ className = \"\" }: { className?: string }) {\n  return (\n    <Card className={className} aria-label=\"목표 카드 로딩 중\">\n      <CardHeader>\n        <div className=\"flex items-center space-x-2\">\n          <Skeleton width=\"20px\" height=\"20px\" />\n          <Skeleton width=\"100px\" height=\"20px\" />\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <div className=\"flex justify-between mb-2\">\n            <Skeleton width=\"60px\" height=\"14px\" />\n            <Skeleton width=\"40px\" height=\"14px\" />\n          </div>\n          <Skeleton width=\"100%\" height=\"8px\" />\n        </div>\n        <div>\n          <div className=\"flex justify-between mb-2\">\n            <Skeleton width=\"50px\" height=\"14px\" />\n            <Skeleton width=\"50px\" height=\"14px\" />\n          </div>\n          <Skeleton width=\"100%\" height=\"8px\" />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// 최근 세션 스켈레톤\nexport function SessionItemSkeleton() {\n  return (\n    <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\" aria-label=\"연습 기록 로딩 중\">\n      <div className=\"flex items-center space-x-3\">\n        <Skeleton width=\"16px\" height=\"16px\" />\n        <div>\n          <Skeleton width=\"100px\" height=\"14px\" className=\"mb-1\" />\n          <Skeleton width=\"80px\" height=\"12px\" />\n        </div>\n      </div>\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"text-center\">\n          <Skeleton width=\"40px\" height=\"14px\" className=\"mb-1\" />\n          <Skeleton width=\"20px\" height=\"12px\" />\n        </div>\n        <div className=\"text-center\">\n          <Skeleton width=\"30px\" height=\"14px\" className=\"mb-1\" />\n          <Skeleton width=\"25px\" height=\"12px\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// 업적 카드 스켈레톤\nexport function AchievementSkeleton() {\n  return (\n    <div className=\"p-3 rounded-lg border bg-muted/50\" aria-label=\"업적 로딩 중\">\n      <div className=\"flex items-center space-x-3\">\n        <Skeleton width=\"32px\" height=\"32px\" />\n        <div className=\"flex-1\">\n          <Skeleton width=\"120px\" height=\"14px\" className=\"mb-1\" />\n          <Skeleton width=\"150px\" height=\"12px\" className=\"mb-2\" />\n          <Skeleton width=\"100%\" height=\"4px\" className=\"mb-1\" />\n          <Skeleton width=\"40px\" height=\"12px\" />\n        </div>\n        <Skeleton width=\"30px\" height=\"20px\" />\n      </div>\n    </div>\n  );\n}\n\n// 대시보드 통합 스켈레톤\nexport function DashboardSkeleton() {\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\" aria-label=\"대시보드 로딩 중\">\n      {/* 헤더 스켈레톤 */}\n      <div className=\"mb-8\">\n        <Skeleton width=\"200px\" height=\"32px\" className=\"mb-2\" />\n        <Skeleton width=\"300px\" height=\"16px\" />\n      </div>\n\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6 lg:gap-8\">\n        {/* 왼쪽 컬럼 */}\n        <div className=\"xl:col-span-2 space-y-6\">\n          {/* 통계 카드들 */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <StatCardSkeleton key={i} />\n            ))}\n          </div>\n\n          {/* 목표 카드들 */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <GoalCardSkeleton />\n            <GoalCardSkeleton />\n          </div>\n\n          {/* 최근 세션 */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center space-x-2\">\n                <Skeleton width=\"20px\" height=\"20px\" />\n                <Skeleton width=\"120px\" height=\"20px\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map((i) => (\n                  <SessionItemSkeleton key={i} />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* 차트들 */}\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n              <ChartSkeleton />\n              <ChartSkeleton />\n            </div>\n            <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n              <ChartSkeleton />\n              <ChartSkeleton />\n            </div>\n          </div>\n        </div>\n\n        {/* 오른쪽 컬럼 */}\n        <div className=\"space-y-6\">\n          {/* 업적 */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center space-x-2\">\n                <Skeleton width=\"20px\" height=\"20px\" />\n                <Skeleton width=\"60px\" height=\"20px\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map((i) => (\n                  <AchievementSkeleton key={i} />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* 랭킹 카드 */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center space-x-2\">\n                <Skeleton width=\"20px\" height=\"20px\" />\n                <Skeleton width=\"80px\" height=\"20px\" />\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Skeleton width=\"24px\" height=\"24px\" />\n                    <Skeleton width=\"80px\" height=\"14px\" />\n                  </div>\n                  <Skeleton width=\"60px\" height=\"14px\" />\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7473},"client/src/components/stat-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  iconColor?: string;\n  subtitle?: string;\n  trend?: {\n    value: string;\n    isPositive: boolean;\n  };\n  className?: string;\n  testId?: string;\n}\n\ninterface ProgressStatCardProps {\n  title: string;\n  current: number;\n  total: number;\n  icon: LucideIcon;\n  iconColor?: string;\n  subtitle?: string;\n  className?: string;\n  testId?: string;\n}\n\ninterface RankingStatCardProps {\n  title: string;\n  rank: number;\n  total?: number;\n  percentile?: number;\n  icon: LucideIcon;\n  iconColor?: string;\n  subtitle?: string;\n  className?: string;\n  testId?: string;\n}\n\n// 기본 통계 카드\nexport function StatCard({ \n  title, \n  value, \n  icon: Icon, \n  iconColor = \"text-primary\", \n  subtitle, \n  trend,\n  className = \"\",\n  testId \n}: StatCardProps) {\n  return (\n    <Card className={className}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className={`h-4 w-4 ${iconColor}`} />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\" data-testid={testId}>\n          {typeof value === 'number' ? value.toLocaleString() : value}\n        </div>\n        {subtitle && (\n          <p className=\"text-xs text-muted-foreground\">{subtitle}</p>\n        )}\n        {trend && (\n          <div className=\"flex items-center mt-1\">\n            <span \n              className={`text-xs ${\n                trend.isPositive ? 'text-green-600' : 'text-red-600'\n              }`}\n            >\n              {trend.isPositive ? '↗' : '↘'} {trend.value}\n            </span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// 진행률 통계 카드 (프로그레스 바 포함)\nexport function ProgressStatCard({\n  title,\n  current,\n  total,\n  icon: Icon,\n  iconColor = \"text-primary\",\n  subtitle,\n  className = \"\",\n  testId\n}: ProgressStatCardProps) {\n  const percentage = total > 0 ? Math.round((current / total) * 100) : 0;\n  \n  return (\n    <Card className={className}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className={`h-4 w-4 ${iconColor}`} />\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"text-2xl font-bold\" data-testid={testId}>\n          {current.toLocaleString()}/{total.toLocaleString()}\n        </div>\n        <Progress value={percentage} className=\"h-2\" />\n        <div className=\"flex items-center justify-between text-xs\">\n          <span className=\"text-muted-foreground\">{percentage}% 완료</span>\n          {subtitle && <span className=\"text-muted-foreground\">{subtitle}</span>}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// 순위 통계 카드\nexport function RankingStatCard({\n  title,\n  rank,\n  total,\n  percentile,\n  icon: Icon,\n  iconColor = \"text-primary\",\n  subtitle,\n  className = \"\",\n  testId\n}: RankingStatCardProps) {\n  const getRankDisplay = () => {\n    if (rank <= 3) {\n      const medals = ['🥇', '🥈', '🥉'];\n      return `${medals[rank - 1]} #${rank}`;\n    }\n    return `#${rank}`;\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className={`h-4 w-4 ${iconColor}`} />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\" data-testid={testId}>\n          {getRankDisplay()}\n        </div>\n        {percentile && (\n          <p className=\"text-xs text-muted-foreground\">\n            상위 {Math.round(percentile)}%\n          </p>\n        )}\n        {total && (\n          <p className=\"text-xs text-muted-foreground\">\n            총 {total.toLocaleString()}명 중\n          </p>\n        )}\n        {subtitle && (\n          <p className=\"text-xs text-muted-foreground mt-1\">{subtitle}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// 멀티 통계 카드 (여러 지표를 한 카드에)\ninterface MultiStatCardProps {\n  title: string;\n  icon: LucideIcon;\n  iconColor?: string;\n  stats: Array<{\n    label: string;\n    value: string | number;\n    color?: string;\n  }>;\n  className?: string;\n  testId?: string;\n}\n\nexport function MultiStatCard({\n  title,\n  icon: Icon,\n  iconColor = \"text-primary\",\n  stats,\n  className = \"\",\n  testId\n}: MultiStatCardProps) {\n  return (\n    <Card className={className}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className={`h-4 w-4 ${iconColor}`} />\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-4\" data-testid={testId}>\n          {stats.map((stat, index) => (\n            <div key={index} className=\"text-center\">\n              <div className={`text-lg font-bold ${stat.color || 'text-foreground'}`}>\n                {typeof stat.value === 'number' ? stat.value.toLocaleString() : stat.value}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">{stat.label}</p>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// 목표 달성 카드 (일일/주간 목표용)\ninterface GoalStatCardProps {\n  title: string;\n  icon: LucideIcon;\n  iconColor?: string;\n  goals: Array<{\n    label: string;\n    current: number;\n    target: number;\n    unit?: string;\n  }>;\n  className?: string;\n  testId?: string;\n}\n\nexport function GoalStatCard({\n  title,\n  icon: Icon,\n  iconColor = \"text-primary\",\n  goals,\n  className = \"\",\n  testId\n}: GoalStatCardProps) {\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Icon className={`h-5 w-5 ${iconColor}`} />\n          <span>{title}</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\" data-testid={testId}>\n        {goals.map((goal, index) => {\n          const percentage = goal.target > 0 ? Math.round((goal.current / goal.target) * 100) : 0;\n          const isCompleted = goal.current >= goal.target;\n          \n          return (\n            <div key={index}>\n              <div className=\"flex justify-between text-sm mb-2\">\n                <span>{goal.label}</span>\n                <span className={isCompleted ? 'text-green-600 font-medium' : ''}>\n                  {goal.current.toLocaleString()}/{goal.target.toLocaleString()}\n                  {goal.unit && ` ${goal.unit}`}\n                </span>\n              </div>\n              <Progress \n                value={percentage} \n                className={`h-2 ${isCompleted ? 'bg-green-100' : ''}`}\n              />\n              {isCompleted && (\n                <div className=\"flex items-center justify-center mt-2\">\n                  <Badge variant=\"secondary\" className=\"text-xs bg-green-100 text-green-800\">\n                    🎉 목표 달성!\n                  </Badge>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n}\n\n// 업적 카드\ninterface AchievementCardProps {\n  achievement: {\n    id: string;\n    name: string;\n    description: string;\n    icon: string;\n    category: string;\n    progress: number;\n    total: number;\n    isUnlocked: boolean;\n    unlockedAt?: Date | null;\n  };\n  className?: string;\n  testId?: string;\n}\n\nexport function AchievementCard({\n  achievement,\n  className = \"\",\n  testId\n}: AchievementCardProps) {\n  const progressPercentage = (achievement.progress / achievement.total) * 100;\n  \n  return (\n    <div\n      className={`p-3 rounded-lg border ${\n        achievement.isUnlocked \n          ? 'bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:border-yellow-800' \n          : 'bg-muted/50 border-border'\n      } ${className}`}\n      data-testid={testId}\n    >\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"text-2xl\">\n          {achievement.icon}\n        </div>\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium\">{achievement.name}</p>\n          <p className=\"text-xs text-muted-foreground\">\n            {achievement.description}\n          </p>\n          <div className=\"mt-2\">\n            <Progress value={progressPercentage} className=\"h-1\" />\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {achievement.progress}/{achievement.total}\n            </p>\n          </div>\n        </div>\n        {achievement.isUnlocked && (\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            달성\n          </Badge>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9063},"client/src/pages/dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  TrendingUp, \n  Target, \n  Award, \n  Calendar, \n  Trophy, \n  Users, \n  BookOpen,\n  Clock,\n  BarChart3,\n  ArrowUp,\n  ArrowDown,\n  Play,\n  Flame,\n  Star\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\nimport { ko } from \"date-fns/locale\";\nimport StatsDisplay from \"@/components/stats-display\";\nimport { \n  StatCard, \n  RankingStatCard, \n  GoalStatCard, \n  AchievementCard \n} from \"@/components/stat-card\";\nimport {\n  WeeklyProgressChart,\n  BibleProgressChart,\n  SessionTrendChart,\n  PracticeTimeChart,\n  MonthlyProgressChart\n} from \"@/components/dashboard-charts\";\nimport { \n  DashboardSkeleton, \n  StatCardSkeleton, \n  ChartSkeleton,\n  SessionItemSkeleton,\n  AchievementSkeleton \n} from \"@/components/skeleton-loader\";\n\nexport default function Dashboard() {\n  const { user, isAuthenticated } = useAuth();\n\n  // Transform real data for charts\n  const getWeeklyProgressData = () => {\n    if (!dashboardData?.weeklyProgress || dashboardData.weeklyProgress.length === 0) {\n      return [];\n    }\n    \n    const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\n    return dashboardData.weeklyProgress.map(item => {\n      const date = new Date(item.date);\n      const dayName = dayNames[date.getDay()];\n      return {\n        day: dayName,\n        sessions: item.sessions,\n        wpm: item.avgWpm,\n        accuracy: 95, // Placeholder - accuracy not in weekly progress API\n        wordsTyped: item.wordsTyped\n      };\n    });\n  };\n\n  const getBibleProgressData = () => {\n    if (!progressData?.bibleProgress || progressData.bibleProgress.length === 0) {\n      return [];\n    }\n    \n    return progressData.bibleProgress.slice(0, 5).map(book => ({\n      book: book.bookName,\n      progress: book.progressPercentage,\n      totalVerses: book.totalChapters * 30, // Estimate 30 verses per chapter\n      completedVerses: Math.round((book.progressPercentage / 100) * book.totalChapters * 30)\n    }));\n  };\n\n  const getSessionTrendData = () => {\n    if (!recentSessions || recentSessions.length === 0) {\n      return [];\n    }\n    \n    return recentSessions.slice(0, 7).map(session => {\n      const date = new Date(session.createdAt);\n      return {\n        date: `${date.getMonth() + 1}/${date.getDate()}`,\n        wpm: session.wpm,\n        accuracy: session.accuracy,\n        duration: Math.round(session.duration / 60), // Convert to minutes\n        points: Math.round(session.wpm * session.accuracy * 0.1) // Calculate estimated points\n      };\n    }).reverse(); // Show chronologically\n  };\n\n  const getPracticeTimeData = () => {\n    // This would need additional API data - for now return empty or fallback\n    if (!recentSessions || recentSessions.length === 0) {\n      return [];\n    }\n    \n    // Group sessions by time of day as a fallback\n    const timeGroups = {\n      오전: { hours: 0, sessions: 0 },\n      오후: { hours: 0, sessions: 0 },\n      저녁: { hours: 0, sessions: 0 },\n      밤: { hours: 0, sessions: 0 }\n    };\n    \n    recentSessions.forEach(session => {\n      const hour = new Date(session.createdAt).getHours();\n      const duration = session.duration / 3600; // Convert to hours\n      \n      if (hour >= 6 && hour < 12) {\n        timeGroups.오전.hours += duration;\n        timeGroups.오전.sessions += 1;\n      } else if (hour >= 12 && hour < 18) {\n        timeGroups.오후.hours += duration;\n        timeGroups.오후.sessions += 1;\n      } else if (hour >= 18 && hour < 24) {\n        timeGroups.저녁.hours += duration;\n        timeGroups.저녁.sessions += 1;\n      } else {\n        timeGroups.밤.hours += duration;\n        timeGroups.밤.sessions += 1;\n      }\n    });\n    \n    return Object.entries(timeGroups).map(([period, data]) => ({\n      period,\n      hours: Math.round(data.hours * 10) / 10, // Round to 1 decimal\n      sessions: data.sessions\n    })).filter(item => item.sessions > 0); // Only include periods with sessions\n  };\n\n  // Dashboard 종합 정보\n  const { \n    data: dashboardData, \n    isLoading: dashboardLoading, \n    error: dashboardError,\n    isError: isDashboardError \n  } = useQuery<{\n    user: any;\n    stats: {\n      totalWords: number;\n      averageWpm: number;\n      averageAccuracy: number;\n      totalSessions: number;\n      practiceStreak: number;\n      totalPoints: number;\n    };\n    rankings: {\n      globalRank: number;\n      churchRank: number | null;\n      totalUsers: number;\n      percentile: number;\n    };\n    recentSessions: any[];\n    achievements: Array<{\n      id: string;\n      name: string;\n      description: string;\n      icon: string;\n      unlockedAt: Date | null;\n      progress: number;\n      total: number;\n    }>;\n    weeklyProgress: Array<{\n      date: string;\n      sessions: number;\n      wordsTyped: number;\n      avgWpm: number;\n    }>;\n  }>({\n    queryKey: [\"/api/user/dashboard\"],\n    enabled: isAuthenticated,\n    retry: 2,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // 최근 세션 기록\n  const { \n    data: recentSessions, \n    isLoading: sessionsLoading, \n    error: sessionsError,\n    isError: isSessionsError \n  } = useQuery<Array<{\n    id: string;\n    wpm: number;\n    accuracy: number;\n    wordsTyped: number;\n    duration: number;\n    createdAt: string;\n    bookName: string;\n    chapter: number;\n    verse: number;\n  }>>({\n    queryKey: [\"/api/user/recent-sessions\"],\n    enabled: isAuthenticated,\n    retry: 2,\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n\n  // 진행률 정보\n  const { \n    data: progressData, \n    isLoading: progressLoading, \n    error: progressError,\n    isError: isProgressError \n  } = useQuery<{\n    bibleProgress: Array<{\n      bookId: string;\n      bookName: string;\n      chaptersCompleted: number;\n      totalChapters: number;\n      progressPercentage: number;\n    }>;\n    dailyGoal: {\n      targetSessions: number;\n      targetWords: number;\n      currentSessions: number;\n      currentWords: number;\n    };\n    weeklyGoal: {\n      targetSessions: number;\n      targetWords: number;\n      currentSessions: number;\n      currentWords: number;\n    };\n  }>({\n    queryKey: [\"/api/user/progress\"],\n    enabled: isAuthenticated,\n    retry: 2,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // 업적 정보\n  const { \n    data: achievements, \n    isLoading: achievementsLoading, \n    error: achievementsError,\n    isError: isAchievementsError \n  } = useQuery<Array<{\n    id: string;\n    name: string;\n    description: string;\n    icon: string;\n    category: 'typing' | 'speed' | 'accuracy' | 'streak' | 'bible';\n    unlockedAt: Date | null;\n    progress: number;\n    total: number;\n    isUnlocked: boolean;\n  }>>({\n    queryKey: [\"/api/user/achievements\"],\n    enabled: isAuthenticated,\n    retry: 2,\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  });\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle>로그인이 필요합니다</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <p className=\"text-muted-foreground mb-4\">\n              대시보드를 이용하려면 로그인해주세요.\n            </p>\n            <a href=\"/api/login\">\n              <Button size=\"lg\" data-testid=\"button-login-required\">로그인</Button>\n            </a>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // 주요 데이터 로딩 중일 때 스켈레톤 표시\n  if (dashboardLoading) {\n    return <DashboardSkeleton />;\n  }\n\n  // 주요 데이터 에러 처리\n  if (isDashboardError) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-red-600\">데이터 로드 실패</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <p className=\"text-muted-foreground mb-4\">\n              대시보드 데이터를 불러오는 데 실패했습니다.\n            </p>\n            <Button \n              onClick={() => window.location.reload()} \n              data-testid=\"button-retry-dashboard\"\n            >\n              다시 시도\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const stats = dashboardData?.stats;\n  const rankings = dashboardData?.rankings;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"container mx-auto px-4 py-8 max-w-7xl\">\n        {/* Welcome Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"text-welcome\">\n            안녕하세요, {user?.firstName || user?.email}님! 👋\n          </h1>\n          <p className=\"text-muted-foreground\">\n            오늘도 성경 필사로 하나님의 말씀과 함께하세요.\n          </p>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-wrap gap-4\">\n            <Link href=\"/practice\">\n              <Button size=\"lg\" className=\"flex items-center space-x-2\" data-testid=\"button-quick-practice\">\n                <Play className=\"h-5 w-5\" />\n                <span>연습 시작하기</span>\n              </Button>\n            </Link>\n            <Link href=\"/challenges\">\n              <Button variant=\"outline\" size=\"lg\" className=\"flex items-center space-x-2\" data-testid=\"button-challenges\">\n                <Trophy className=\"h-5 w-5\" />\n                <span>챌린지 참여</span>\n              </Button>\n            </Link>\n            <Link href=\"/leaderboard\">\n              <Button variant=\"outline\" size=\"lg\" className=\"flex items-center space-x-2\" data-testid=\"button-leaderboard\">\n                <BarChart3 className=\"h-5 w-5\" />\n                <span>순위 보기</span>\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6 lg:gap-8\">\n          {/* Left Column - Main Stats & Goals */}\n          <div className=\"xl:col-span-2 space-y-6\">\n            {/* Personal Stats Cards */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <StatCard\n                title=\"평균 속도\"\n                value={`${Math.round(stats?.averageWpm || 0)} WPM`}\n                icon={TrendingUp}\n                iconColor=\"text-blue-500\"\n                subtitle=\"전체 평균보다 +15% 빠름\"\n                trend={{ value: \"+15%\", isPositive: true }}\n                testId=\"stat-average-wpm\"\n              />\n\n              <StatCard\n                title=\"정확도\"\n                value={`${Math.round(stats?.averageAccuracy || 0)}%`}\n                icon={Target}\n                iconColor=\"text-green-500\"\n                subtitle=\"지난주보다 +2% 향상\"\n                trend={{ value: \"+2%\", isPositive: true }}\n                testId=\"stat-accuracy\"\n              />\n\n              <StatCard\n                title=\"연속 연습\"\n                value={`${stats?.practiceStreak || 0}일`}\n                icon={Flame}\n                iconColor=\"text-orange-500\"\n                subtitle=\"지금까지 최고 기록!\"\n                testId=\"stat-practice-streak\"\n              />\n\n              <StatCard\n                title=\"총 세션\"\n                value={`${stats?.totalSessions || 0}회`}\n                icon={Clock}\n                iconColor=\"text-purple-500\"\n                subtitle=\"지난달 대비 +25%\"\n                trend={{ value: \"+25%\", isPositive: true }}\n                testId=\"stat-total-sessions\"\n              />\n\n              <StatCard\n                title=\"총 포인트\"\n                value={stats?.totalPoints?.toLocaleString() || 0}\n                icon={Star}\n                iconColor=\"text-yellow-500\"\n                subtitle=\"다음 레벨까지 500점\"\n                testId=\"stat-total-points\"\n              />\n\n              <RankingStatCard\n                title=\"전체 순위\"\n                rank={rankings?.globalRank || 0}\n                total={rankings?.totalUsers}\n                percentile={rankings?.percentile}\n                icon={Trophy}\n                iconColor=\"text-amber-500\"\n                testId=\"stat-global-rank\"\n              />\n            </div>\n\n            {/* Daily & Weekly Goals */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <GoalStatCard\n                title=\"오늘의 목표\"\n                icon={Calendar}\n                iconColor=\"text-green-500\"\n                goals={[\n                  {\n                    label: \"연습 세션\",\n                    current: progressData?.dailyGoal.currentSessions || 0,\n                    target: progressData?.dailyGoal.targetSessions || 3,\n                    unit: \"회\"\n                  },\n                  {\n                    label: \"타자 수\",\n                    current: progressData?.dailyGoal.currentWords || 0,\n                    target: progressData?.dailyGoal.targetWords || 500,\n                    unit: \"단어\"\n                  }\n                ]}\n                testId=\"daily-goals\"\n              />\n\n              <GoalStatCard\n                title=\"이번 주 목표\"\n                icon={BarChart3}\n                iconColor=\"text-blue-500\"\n                goals={[\n                  {\n                    label: \"연습 세션\",\n                    current: progressData?.weeklyGoal.currentSessions || 0,\n                    target: progressData?.weeklyGoal.targetSessions || 20,\n                    unit: \"회\"\n                  },\n                  {\n                    label: \"타자 수\",\n                    current: progressData?.weeklyGoal.currentWords || 0,\n                    target: progressData?.weeklyGoal.targetWords || 3500,\n                    unit: \"단어\"\n                  }\n                ]}\n                testId=\"weekly-goals\"\n              />\n            </div>\n\n            {/* Recent Sessions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Clock className=\"h-5 w-5 text-blue-500\" />\n                  <span>최근 연습 기록</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {sessionsLoading ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map((i) => (\n                      <SessionItemSkeleton key={i} />\n                    ))}\n                  </div>\n                ) : isSessionsError ? (\n                  <div className=\"text-center py-8\">\n                    <Clock className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground mb-4\">최근 세션 데이터를 불러올 수 없습니다.</p>\n                    <Button size=\"sm\" onClick={() => window.location.reload()} data-testid=\"button-retry-sessions\">\n                      다시 시도\n                    </Button>\n                  </div>\n                ) : recentSessions && recentSessions.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {recentSessions.slice(0, 5).map((session) => (\n                      <div\n                        key={session.id}\n                        className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\"\n                        data-testid={`session-${session.id}`}\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n                          <div>\n                            <p className=\"text-sm font-medium\">\n                              {session.bookName} {session.chapter}:{session.verse}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {format(new Date(session.createdAt), 'M월 d일 HH:mm', { locale: ko })}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-4 text-sm\">\n                          <div className=\"text-center\">\n                            <p className=\"font-medium\">{session.wpm} WPM</p>\n                            <p className=\"text-xs text-muted-foreground\">속도</p>\n                          </div>\n                          <div className=\"text-center\">\n                            <p className=\"font-medium\">{session.accuracy}%</p>\n                            <p className=\"text-xs text-muted-foreground\">정확도</p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">아직 연습 기록이 없습니다.</p>\n                    <Link href=\"/practice\">\n                      <Button className=\"mt-4\" data-testid=\"button-start-practice\">\n                        첫 연습 시작하기\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Charts Section */}\n            <div className=\"space-y-6\">\n              {/* Weekly Progress and Session Trend */}\n              <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n                {dashboardLoading ? (\n                  <ChartSkeleton />\n                ) : isDashboardError ? (\n                  <Card>\n                    <CardContent className=\"p-6 text-center\">\n                      <Calendar className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">주간 데이터를 불러올 수 없습니다.</p>\n                    </CardContent>\n                  </Card>\n                ) : getWeeklyProgressData().length === 0 ? (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Calendar className=\"h-5 w-5 text-blue-500\" />\n                        <span>주간 연습 현황</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"text-center py-8\">\n                      <Calendar className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground mb-4\">이번 주 연습 기록이 없습니다.</p>\n                      <Link href=\"/practice\">\n                        <Button size=\"sm\" data-testid=\"button-start-weekly-practice\">\n                          연습 시작하기\n                        </Button>\n                      </Link>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <WeeklyProgressChart data={getWeeklyProgressData()} />\n                )}\n                \n                {sessionsLoading ? (\n                  <ChartSkeleton />\n                ) : isSessionsError ? (\n                  <Card>\n                    <CardContent className=\"p-6 text-center\">\n                      <TrendingUp className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">세션 데이터를 불러올 수 없습니다.</p>\n                    </CardContent>\n                  </Card>\n                ) : getSessionTrendData().length === 0 ? (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <TrendingUp className=\"h-5 w-5 text-purple-500\" />\n                        <span>최근 성과 추세</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"text-center py-8\">\n                      <TrendingUp className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground mb-4\">최근 연습 기록이 없습니다.</p>\n                      <Link href=\"/practice\">\n                        <Button size=\"sm\" data-testid=\"button-start-trend-practice\">\n                          연습 시작하기\n                        </Button>\n                      </Link>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <SessionTrendChart data={getSessionTrendData()} />\n                )}\n              </div>\n\n              {/* Bible Progress and Practice Time */}\n              <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n                {progressLoading ? (\n                  <ChartSkeleton />\n                ) : isProgressError ? (\n                  <Card>\n                    <CardContent className=\"p-6 text-center\">\n                      <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">성경 진행률 데이터를 불러올 수 없습니다.</p>\n                    </CardContent>\n                  </Card>\n                ) : getBibleProgressData().length === 0 ? (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <BookOpen className=\"h-5 w-5 text-green-500\" />\n                        <span>성경 책별 진행률</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"text-center py-8\">\n                      <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground mb-4\">아직 성경 필사 기록이 없습니다.</p>\n                      <Link href=\"/practice\">\n                        <Button size=\"sm\" data-testid=\"button-start-bible-chart\">\n                          성경 필사 시작하기\n                        </Button>\n                      </Link>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <BibleProgressChart data={getBibleProgressData()} />\n                )}\n                \n                {/* Practice Time Chart - always show something */}\n                <PracticeTimeChart data={getPracticeTimeData()} />\n              </div>\n            </div>\n          </div>\n\n          {/* Right Column - Achievements & Progress */}\n          <div className=\"space-y-6\">\n            {/* Achievements */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Award className=\"h-5 w-5 text-yellow-500\" />\n                  <span>업적</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {achievementsLoading ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map((i) => (\n                      <AchievementSkeleton key={i} />\n                    ))}\n                  </div>\n                ) : isAchievementsError ? (\n                  <div className=\"text-center py-8\">\n                    <Award className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground mb-4\">업적 데이터를 불러올 수 없습니다.</p>\n                    <Button size=\"sm\" onClick={() => window.location.reload()} data-testid=\"button-retry-achievements\">\n                      다시 시도\n                    </Button>\n                  </div>\n                ) : achievements && achievements.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {achievements.slice(0, 6).map((achievement) => (\n                      <AchievementCard\n                        key={achievement.id}\n                        achievement={achievement}\n                        testId={`achievement-${achievement.id}`}\n                      />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Award className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">아직 달성한 업적이 없습니다.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Bible Progress */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <BookOpen className=\"h-5 w-5 text-purple-500\" />\n                  <span>성경 진행률</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {progressLoading ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"h-12 bg-muted rounded animate-pulse\"></div>\n                    ))}\n                  </div>\n                ) : progressData && progressData.bibleProgress.length > 0 ? (\n                  <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                    {progressData.bibleProgress.slice(0, 10).map((book) => (\n                      <div key={book.bookId} className=\"space-y-2\" data-testid={`book-progress-${book.bookId}`}>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"font-medium\">{book.bookName}</span>\n                          <span className=\"text-muted-foreground\">\n                            {book.chaptersCompleted}/{book.totalChapters}\n                          </span>\n                        </div>\n                        <Progress value={book.progressPercentage} className=\"h-2\" />\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">아직 연습한 성경이 없습니다.</p>\n                    <Link href=\"/practice\">\n                      <Button className=\"mt-4\" size=\"sm\" data-testid=\"button-start-bible-practice\">\n                        성경 필사 시작하기\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Church Ranking */}\n            {rankings?.churchRank && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Users className=\"h-5 w-5 text-green-500\" />\n                    <span>교회 내 순위</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-green-600\" data-testid=\"stat-church-rank\">\n                      #{rankings.churchRank}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      교회 내 순위\n                    </p>\n                    <Link href=\"/churches\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"mt-4\" data-testid=\"button-view-church\">\n                        교회 페이지 보기\n                      </Button>\n                    </Link>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":28410},"client/src/components/social-login-modal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { SiKakaotalk, SiGoogle, SiReplit } from \"react-icons/si\";\n\ninterface SocialLoginModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function SocialLoginModal({ open, onOpenChange }: SocialLoginModalProps) {\n  const handleSocialLogin = (provider: string) => {\n    console.log(`${provider} 로그인 시도`);\n    // 실제 인증은 나중에 구현\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md w-[95%] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-xl font-semibold\">\n            소셜 로그인\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-sm text-muted-foreground\">\n            간편하게 로그인하고 성경 필사를 시작하세요\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-3 pt-4\">\n          {/* 카카오 로그인 */}\n          <Button\n            onClick={() => handleSocialLogin('카카오')}\n            className=\"w-full h-12 bg-yellow-400 hover:bg-yellow-500 text-black font-medium relative\"\n            data-testid=\"button-kakao-auth\"\n          >\n            <SiKakaotalk className=\"absolute left-4 h-5 w-5\" />\n            카카오로 로그인\n          </Button>\n\n          {/* 네이버 로그인 */}\n          <Button\n            onClick={() => handleSocialLogin('네이버')}\n            className=\"w-full h-12 bg-green-500 hover:bg-green-600 text-white font-medium relative\"\n            data-testid=\"button-naver-auth\"\n          >\n            <div className=\"absolute left-4 h-5 w-5 bg-white rounded text-green-500 flex items-center justify-center text-xs font-bold\">\n              N\n            </div>\n            네이버로 로그인\n          </Button>\n\n          {/* 구글 로그인 */}\n          <Button\n            onClick={() => handleSocialLogin('구글')}\n            variant=\"outline\"\n            className=\"w-full h-12 bg-white hover:bg-gray-50 text-gray-700 border-gray-300 font-medium relative\"\n            data-testid=\"button-google-auth\"\n          >\n            <SiGoogle className=\"absolute left-4 h-5 w-5 text-blue-500\" />\n            구글로 로그인\n          </Button>\n\n          {/* Replit 로그인 */}\n          <Button\n            onClick={() => handleSocialLogin('Replit')}\n            className=\"w-full h-12 bg-orange-500 hover:bg-orange-600 text-white font-medium relative\"\n            data-testid=\"button-replit-auth\"\n          >\n            <SiReplit className=\"absolute left-4 h-5 w-5\" />\n            Replit으로 로그인\n          </Button>\n        </div>\n\n        <div className=\"pt-4 text-center\">\n          <p className=\"text-xs text-muted-foreground\">\n            로그인하면 서비스 이용약관과 개인정보처리방침에 동의하게 됩니다\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3167},"client/src/components/AuthModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n// Removed Tabs import - now login only\nimport { Separator } from \"@/components/ui/separator\";\nimport { SiKakaotalk, SiGoogle, SiNaver } from \"react-icons/si\";\nimport { Mail, Lock, Eye, EyeOff } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n// Removed insertUserSchema import - not needed for login only\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AuthModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSwitchToSignup?: () => void;\n}\n\n// 로그인 폼 스키마 - 백엔드 API와 동일\nconst loginSchema = z.object({\n  email: z.string().email(\"올바른 이메일 주소를 입력해주세요\"),\n  password: z.string().min(1, \"비밀번호를 입력해주세요\"),\n});\n\n// Removed signup schema - login only modal\n\n// Removed email resend schema - login only modal\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function AuthModal({ open, onOpenChange, onSwitchToSignup }: AuthModalProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  \n  // 이메일 재발송 관련 상태 (로그인 실패 시에만)\n  const [loginFailedEmail, setLoginFailedEmail] = useState<string | null>(null);\n  const [resendCooldown, setResendCooldown] = useState(0);\n  \n  const { toast } = useToast();\n\n  // 로그인 폼\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  // Removed signup form - login only modal\n\n  // Removed signup mutation - login only modal\n\n  // 로그인 mutation\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/email/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"로그인 성공\",\n        description: data.message || \"로그인이 완료되었습니다.\",\n      });\n      loginForm.reset();\n      // 사용자 정보 캐시 무효화하여 새로운 사용자 정보 가져오기\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      onOpenChange(false); // 모달 닫기\n      // 페이지 새로고침으로 사용자 상태 업데이트\n      window.location.reload();\n    },\n    onError: (error: Error) => {\n      console.error(\"로그인 오류:\", error);\n      console.error(\"로그인 오류 메시지:\", error.message);\n      \n      let errorMessage = \"로그인 중 오류가 발생했습니다. 다시 시도해주세요.\";\n      let isEmailNotVerified = false;\n      \n      // Check for specific error messages\n      if (error.message.includes(\"이메일 또는 비밀번호가 올바르지 않거나\")) {\n        errorMessage = \"이메일 또는 비밀번호가 올바르지 않거나, 이메일 인증이 완료되지 않았습니다.\";\n        isEmailNotVerified = true;\n      } else if (error.message.includes(\"401\") || error.message.includes(\"Unauthorized\")) {\n        errorMessage = \"이메일 또는 비밀번호가 올바르지 않습니다.\";\n        isEmailNotVerified = true;\n      } else if (error.message.includes(\"400\")) {\n        errorMessage = \"입력 데이터가 올바르지 않습니다. 다시 확인해주세요.\";\n      }\n      \n      console.log(\"최종 오류 메시지:\", errorMessage);\n      \n      // 이메일 미인증으로 인한 로그인 실패인 경우 재발송 옵션 제공\n      if (isEmailNotVerified) {\n        const currentEmail = loginForm.getValues('email');\n        if (currentEmail && currentEmail.includes('@')) {\n          setLoginFailedEmail(currentEmail);\n        }\n      }\n      \n      // Display toast with error message\n      toast({\n        variant: \"destructive\",\n        title: \"로그인 실패\",\n        description: errorMessage,\n      });\n      \n      console.log(\"Toast 호출됨:\", { title: \"로그인 실패\", description: errorMessage });\n    },\n  });\n\n  // 이메일 재발송 mutation\n  const emailResendMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/email/resend\", { email });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"이메일 재발송 완료\",\n        description: data.message || \"인증 이메일이 재발송되었습니다. 이메일을 확인해주세요.\",\n      });\n      \n      // 재발송 쿨다운 시작 (3분)\n      setResendCooldown(180);\n      \n      // 재발송 후 상태 초기화\n      setLoginFailedEmail(null);\n    },\n    onError: (error: Error) => {\n      console.error(\"이메일 재발송 오류:\", error);\n      let errorMessage = \"이메일 재발송 중 오류가 발생했습니다. 다시 시도해주세요.\";\n      \n      if (error.message.includes(\"503\")) {\n        errorMessage = \"이메일 서비스가 일시적으로 사용할 수 없습니다. 관리자에게 문의해주세요.\";\n      } else if (error.message.includes(\"404\")) {\n        errorMessage = \"해당 이메일로 등록된 계정을 찾을 수 없습니다.\";\n      } else if (error.message.includes(\"400\") && error.message.includes(\"이미 인증된\")) {\n        errorMessage = \"이미 인증된 이메일입니다. 로그인을 시도해주세요.\";\n      } else if (error.message.includes(\"429\")) {\n        errorMessage = \"너무 많은 요청입니다. 잠시 후 다시 시도해주세요.\";\n      }\n      \n      toast({\n        variant: \"destructive\",\n        title: \"이메일 재발송 실패\",\n        description: errorMessage,\n      });\n    },\n  });\n\n  // 쿨다운 타이머 관리\n  useEffect(() => {\n    if (resendCooldown > 0) {\n      const timer = setTimeout(() => setResendCooldown(resendCooldown - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [resendCooldown]);\n\n  const handleSocialLogin = (provider: string) => {\n    if (provider === '카카오') {\n      // 카카오 로그인 페이지로 리다이렉트\n      window.location.href = '/auth/kakao';\n    } else if (provider === '네이버') {\n      // 네이버 로그인 페이지로 리다이렉트\n      window.location.href = '/auth/naver';\n    } else if (provider === 'Google') {\n      // 구글 로그인 페이지로 리다이렉트\n      window.location.href = '/auth/google';\n    } else {\n      // 다른 소셜 로그인들은 아직 구현되지 않음\n      toast({\n        title: \"준비 중\",\n        description: `${provider} 로그인은 곧 지원될 예정입니다.`,\n      });\n    }\n  };\n\n  const handleLogin = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  // Removed handleSignup - login only modal\n\n  const handleEmailResend = (email: string) => {\n    emailResendMutation.mutate(email);\n  };\n\n  // 이메일 재발송 컴포넌트 (로그인 실패시에만)\n  const EmailResendComponent = () => {\n    const emailToResend = loginFailedEmail;\n    const isSignupSuccess = false;\n    \n    if (!emailToResend) return null;\n\n    return (\n      <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4 space-y-3\" data-testid=\"container-email-resend\">\n        <div className=\"flex items-start space-x-3\">\n          <Mail className=\"h-5 w-5 text-blue-500 mt-0.5\" />\n          <div className=\"flex-1\">\n            <h4 className=\"text-sm font-medium text-blue-900 dark:text-blue-100\" data-testid=\"text-resend-title\">\n              {isSignupSuccess ? \"이메일 인증이 필요합니다\" : \"이메일 인증을 완료해주세요\"}\n            </h4>\n            <p className=\"text-sm text-blue-700 dark:text-blue-300 mt-1\" data-testid=\"text-resend-description\">\n              {isSignupSuccess \n                ? `${emailToResend}로 인증 이메일을 발송했습니다. 이메일을 확인해주세요.`\n                : `${emailToResend}의 이메일 인증이 필요합니다. 이메일을 확인하거나 재발송해주세요.`\n              }\n            </p>\n            \n            <div className=\"mt-3 flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleEmailResend(emailToResend)}\n                disabled={emailResendMutation.isPending || resendCooldown > 0}\n                className=\"text-blue-600 border-blue-300 hover:bg-blue-50 dark:text-blue-400 dark:border-blue-600 dark:hover:bg-blue-900\"\n                data-testid=\"button-resend-email\"\n              >\n                {emailResendMutation.isPending \n                  ? \"재발송 중...\" \n                  : resendCooldown > 0 \n                    ? `재발송 (${Math.floor(resendCooldown / 60)}:${(resendCooldown % 60).toString().padStart(2, '0')})`\n                    : \"이메일 재발송\"\n                }\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => {\n                  setLoginFailedEmail(null);\n                }}\n                className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n                data-testid=\"button-dismiss-resend\"\n              >\n                닫기\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md w-[95%] max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-auth-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-xl font-semibold\" data-testid=\"text-auth-modal-title\">\n            성경 필사 시작하기\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-sm text-muted-foreground\" data-testid=\"text-auth-modal-description\">\n            로그인하고 성경 필사의 즐거움을 경험해보세요\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* 소셜 로그인 - 큰 버튼으로 상단에 배치 */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-medium text-center text-muted-foreground mb-4\" data-testid=\"text-social-login-title\">\n            간편하게 로그인하세요\n          </h3>\n          \n          <div className=\"space-y-3\">\n            <Button\n              onClick={() => handleSocialLogin('카카오')}\n              className=\"w-full h-12 bg-[#FEE500] hover:bg-[#FEE500]/90 text-black font-medium flex items-center justify-center space-x-3\"\n              data-testid=\"button-kakao-login\"\n            >\n              <SiKakaotalk className=\"w-5 h-5\" />\n              <span>카카오로 3초 만에 로그인</span>\n            </Button>\n\n            <Button\n              onClick={() => handleSocialLogin('네이버')}\n              className=\"w-full h-12 bg-[#03C75A] hover:bg-[#03C75A]/90 text-white font-medium flex items-center justify-center space-x-3\"\n              data-testid=\"button-naver-login\"\n            >\n              <SiNaver className=\"w-5 h-5\" />\n              <span>네이버로 로그인</span>\n            </Button>\n\n            <Button\n              onClick={() => handleSocialLogin('Google')}\n              variant=\"outline\"\n              className=\"w-full h-12 border-2 hover:bg-gray-50 dark:hover:bg-gray-800 font-medium flex items-center justify-center space-x-3\"\n              data-testid=\"button-google-login\"\n            >\n              <SiGoogle className=\"w-5 h-5 text-[#4285f4]\" />\n              <span>Google로 로그인</span>\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <Separator />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-background px-2 text-muted-foreground\">또는</span>\n          </div>\n        </div>\n\n        {/* 이메일 로그인 폼 - 하단에 작게 배치 */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-sm font-medium text-center text-muted-foreground\" data-testid=\"text-email-login-title\">\n            이메일로 로그인\n          </h3>\n          \n          <Form {...loginForm}>\n              <form onSubmit={loginForm.handleSubmit(handleLogin)} className=\"space-y-4\">\n                <FormField\n                  control={loginForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel data-testid=\"label-login-email\">이메일</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                          <Input\n                            type=\"email\"\n                            placeholder=\"이메일을 입력하세요\"\n                            className=\"pl-10\"\n                            data-testid=\"input-login-email\"\n                            {...field}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage data-testid=\"error-login-email\" />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={loginForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel data-testid=\"label-login-password\">비밀번호</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                          <Input\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"비밀번호를 입력하세요\"\n                            className=\"pl-10 pr-10\"\n                            data-testid=\"input-login-password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-login-password\"\n                          >\n                            {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage data-testid=\"error-login-password\" />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  data-testid=\"button-login-submit\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? \"로그인 중...\" : \"로그인\"}\n                </Button>\n              </form>\n          </Form>\n          \n          {/* 비밀번호 재설정 링크 */}\n          <div className=\"text-center mt-4\">\n            <Button \n              variant=\"link\" \n              className=\"p-0 h-auto text-sm text-muted-foreground hover:text-foreground\"\n              onClick={() => {\n                onOpenChange(false);\n                window.location.href = '/forgot-password';\n              }}\n              data-testid=\"link-forgot-password\"\n            >\n              비밀번호를 잊으셨나요?\n            </Button>\n          </div>\n          \n          {/* 이메일 재발송 컴포넌트 - 로그인 실패 시에만 표시 */}\n          <EmailResendComponent />\n        </div>\n        \n        {/* 회원가입 링크 */}\n        <div className=\"text-center pt-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            아직 계정이 없으신가요?{\" \"}\n            <Button \n              variant=\"link\" \n              className=\"p-0 h-auto text-sm font-medium underline\"\n              onClick={() => {\n                onOpenChange(false);\n                onSwitchToSignup?.();\n              }}\n              data-testid=\"link-switch-to-signup\"\n            >\n              회원가입하기\n            </Button>\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17209},"server/emailService.ts":{"content":"import { Resend } from 'resend';\nimport crypto from 'crypto';\n\nexport interface EmailVerificationData {\n  email: string;\n  firstName: string;\n  verificationToken: string;\n}\n\nexport interface PasswordResetData {\n  email: string;\n  firstName: string;\n  resetToken: string;\n}\n\nexport interface EmailServiceResult {\n  success: boolean;\n  error?: 'MISSING_API_KEY' | 'CONFIGURATION_ERROR' | 'SEND_FAILED' | 'UNKNOWN_ERROR';\n  errorMessage?: string;\n  emailId?: string;\n}\n\n/**\n * 안전한 랜덤 토큰 생성 (64바이트 hex 문자열)\n */\nexport function generateSecureToken(): string {\n  return crypto.randomBytes(32).toString('hex');\n}\n\n/**\n * SHA-256 해시로 토큰 해시화 (보안 강화)\n */\nexport function hashToken(token: string): string {\n  return crypto.createHash('sha256').update(token).digest('hex');\n}\n\n/**\n * 이메일 인증을 위한 한국어 HTML 템플릿\n */\nfunction createEmailVerificationTemplate(data: EmailVerificationData): string {\n  // Replit 환경에서는 REPLIT_DOMAINS를 사용, 그 외에는 FRONTEND_URL 또는 localhost\n  const replitDomain = process.env.REPLIT_DOMAINS;\n  const baseUrl = process.env.FRONTEND_URL || \n                  (replitDomain ? `https://${replitDomain}` : 'http://localhost:5000');\n  \n  const verificationUrl = `${baseUrl}/verify-email?token=${data.verificationToken}`;\n  \n  return `\n    <!DOCTYPE html>\n    <html lang=\"ko\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>이메일 인증</title>\n        <style>\n            body {\n                font-family: 'Apple SD Gothic Neo', 'Noto Sans KR', sans-serif;\n                line-height: 1.6;\n                color: #333;\n                max-width: 600px;\n                margin: 0 auto;\n                padding: 20px;\n                background-color: #f9f9f9;\n            }\n            .container {\n                background: white;\n                border-radius: 10px;\n                padding: 40px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            }\n            .header {\n                text-align: center;\n                margin-bottom: 30px;\n            }\n            .logo {\n                font-size: 24px;\n                font-weight: bold;\n                color: #2563eb;\n                margin-bottom: 10px;\n            }\n            .title {\n                font-size: 22px;\n                font-weight: bold;\n                margin-bottom: 20px;\n                color: #1a1a1a;\n            }\n            .content {\n                margin-bottom: 30px;\n                line-height: 1.8;\n            }\n            .button {\n                display: inline-block;\n                background-color: #2563eb;\n                color: white !important;\n                text-decoration: none;\n                padding: 15px 30px;\n                border-radius: 8px;\n                font-weight: bold;\n                font-size: 16px;\n                text-align: center;\n                margin: 20px 0;\n            }\n            .button:hover {\n                background-color: #1d4ed8;\n            }\n            .info-box {\n                background-color: #f8f9fa;\n                border-left: 4px solid #2563eb;\n                padding: 15px;\n                margin: 20px 0;\n                border-radius: 4px;\n            }\n            .footer {\n                text-align: center;\n                color: #666;\n                font-size: 14px;\n                margin-top: 30px;\n                padding-top: 20px;\n                border-top: 1px solid #eee;\n            }\n            .warning {\n                background-color: #fef3c7;\n                border-left: 4px solid #f59e0b;\n                padding: 15px;\n                margin: 20px 0;\n                border-radius: 4px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <div class=\"logo\">📖 성경 타이핑 연습</div>\n            </div>\n            \n            <div class=\"title\">\n                안녕하세요, ${data.firstName || '사용자'}님! 👋\n            </div>\n            \n            <div class=\"content\">\n                <p>성경 타이핑 연습 서비스에 회원가입해 주셔서 감사합니다.</p>\n                <p>아래 버튼을 클릭하여 이메일 주소를 인증해 주세요.</p>\n            </div>\n            \n            <div style=\"text-align: center;\">\n                <a href=\"${verificationUrl}\" class=\"button\">\n                    이메일 인증하기 ✅\n                </a>\n            </div>\n            \n            <div class=\"info-box\">\n                <strong>📋 인증 안내:</strong>\n                <ul style=\"margin: 10px 0; padding-left: 20px;\">\n                    <li>이메일 인증은 <strong>24시간</strong> 후 만료됩니다</li>\n                    <li>인증 완료 후 모든 서비스를 이용하실 수 있습니다</li>\n                    <li>성경 말씀으로 타이핑 실력을 향상시켜보세요</li>\n                </ul>\n            </div>\n            \n            <div class=\"warning\">\n                <strong>⚠️ 주의사항:</strong><br>\n                링크가 작동하지 않는 경우, 아래 주소를 복사해서 브라우저 주소창에 붙여넣어 주세요:<br>\n                <code style=\"word-break: break-all; background: #fff; padding: 5px; border-radius: 3px; font-size: 12px;\">${verificationUrl}</code>\n            </div>\n            \n            <div class=\"footer\">\n                <p>본 이메일은 발신 전용입니다. 문의사항이 있으시면 고객센터를 이용해 주세요.</p>\n                <p style=\"color: #999;\">© 2024 성경 타이핑 연습 서비스. All rights reserved.</p>\n            </div>\n        </div>\n    </body>\n    </html>\n  `;\n}\n\n/**\n * 비밀번호 리셋을 위한 한국어 HTML 템플릿\n */\nfunction createPasswordResetTemplate(data: PasswordResetData): string {\n  // Replit 환경에서는 REPLIT_DOMAINS를 사용, 그 외에는 FRONTEND_URL 또는 localhost\n  const replitDomain = process.env.REPLIT_DOMAINS;\n  const baseUrl = process.env.FRONTEND_URL || \n                  (replitDomain ? `https://${replitDomain}` : 'http://localhost:5000');\n  \n  const resetUrl = `${baseUrl}/reset-password?token=${data.resetToken}`;\n  \n  return `\n    <!DOCTYPE html>\n    <html lang=\"ko\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>비밀번호 재설정</title>\n        <style>\n            body {\n                font-family: 'Apple SD Gothic Neo', 'Noto Sans KR', sans-serif;\n                line-height: 1.6;\n                color: #333;\n                max-width: 600px;\n                margin: 0 auto;\n                padding: 20px;\n                background-color: #f9f9f9;\n            }\n            .container {\n                background: white;\n                border-radius: 10px;\n                padding: 40px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            }\n            .header {\n                text-align: center;\n                margin-bottom: 30px;\n            }\n            .logo {\n                font-size: 24px;\n                font-weight: bold;\n                color: #dc2626;\n                margin-bottom: 10px;\n            }\n            .title {\n                font-size: 22px;\n                font-weight: bold;\n                margin-bottom: 20px;\n                color: #1a1a1a;\n            }\n            .content {\n                margin-bottom: 30px;\n                line-height: 1.8;\n            }\n            .button {\n                display: inline-block;\n                background-color: #dc2626;\n                color: white !important;\n                text-decoration: none;\n                padding: 15px 30px;\n                border-radius: 8px;\n                font-weight: bold;\n                font-size: 16px;\n                text-align: center;\n                margin: 20px 0;\n            }\n            .button:hover {\n                background-color: #b91c1c;\n            }\n            .info-box {\n                background-color: #fef2f2;\n                border-left: 4px solid #dc2626;\n                padding: 15px;\n                margin: 20px 0;\n                border-radius: 4px;\n            }\n            .footer {\n                text-align: center;\n                color: #666;\n                font-size: 14px;\n                margin-top: 30px;\n                padding-top: 20px;\n                border-top: 1px solid #eee;\n            }\n            .warning {\n                background-color: #fef3c7;\n                border-left: 4px solid #f59e0b;\n                padding: 15px;\n                margin: 20px 0;\n                border-radius: 4px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <div class=\"logo\">📖 홀리넷 성경필사</div>\n                <h1 class=\"title\">비밀번호 재설정</h1>\n            </div>\n            \n            <div class=\"content\">\n                <p><strong>${data.firstName}님</strong>, 안녕하세요!</p>\n                <p>비밀번호 재설정을 요청하셨습니다. 아래 버튼을 클릭하여 새 비밀번호를 설정해 주세요.</p>\n            </div>\n            \n            <div style=\"text-align: center;\">\n                <a href=\"${resetUrl}\" class=\"button\">\n                    비밀번호 재설정하기 🔒\n                </a>\n            </div>\n            \n            <div class=\"info-box\">\n                <strong>🔐 보안 안내:</strong>\n                <ul style=\"margin: 10px 0; padding-left: 20px;\">\n                    <li>이 링크는 <strong>1시간</strong> 후 자동으로 만료됩니다</li>\n                    <li>요청하지 않은 경우 이 이메일을 무시하세요</li>\n                    <li>새 비밀번호는 안전하게 설정해 주세요</li>\n                </ul>\n            </div>\n            \n            <div class=\"warning\">\n                <strong>⚠️ 주의사항:</strong><br>\n                링크가 작동하지 않는 경우, 아래 주소를 복사해서 브라우저 주소창에 붙여넣어 주세요:<br>\n                <code style=\"word-break: break-all; background: #fff; padding: 5px; border-radius: 3px; font-size: 12px;\">${resetUrl}</code>\n            </div>\n            \n            <div class=\"footer\">\n                <p>본 이메일은 발신 전용입니다. 문의사항이 있으시면 고객센터를 이용해 주세요.</p>\n                <p style=\"color: #999;\">© 2024 성경 타이핑 연습 서비스. All rights reserved.</p>\n            </div>\n        </div>\n    </body>\n    </html>\n  `;\n}\n\n/**\n * 이메일 인증 메일 발송 - 견고성 강화 버전\n * API 키 검증을 내부에서 수행하고 타입된 오류를 반환\n */\nexport async function sendEmailVerification(data: EmailVerificationData): Promise<EmailServiceResult> {\n  // STEP 1: API 키 검증\n  const apiKey = process.env.RESEND_API_KEY;\n  if (!apiKey) {\n    console.error('❌ RESEND_API_KEY environment variable is missing');\n    return {\n      success: false,\n      error: 'MISSING_API_KEY',\n      errorMessage: 'Email service is not configured. Please contact support.',\n    };\n  }\n\n  // STEP 2: Resend 클라이언트 초기화 (API 키가 있을 때만)\n  let resend: Resend;\n  try {\n    resend = new Resend(apiKey);\n  } catch (error) {\n    console.error('❌ Resend 클라이언트 초기화 실패:', error);\n    return {\n      success: false,\n      error: 'CONFIGURATION_ERROR',\n      errorMessage: 'Email service configuration error. Please contact support.',\n    };\n  }\n\n  // STEP 3: 이메일 발송 시도\n  try {\n    console.log(`🔄 이메일 발송 시도 중: ${data.email} → onboarding@resend.dev`);\n    console.log(`📧 API Key 존재 여부: ${apiKey ? '✅ 있음' : '❌ 없음'}`);\n    console.log(`📧 API Key 길이: ${apiKey ? apiKey.length : 0}자`);\n    \n    // 개발 환경에서는 Resend 테스트 제한으로 인해 허용된 이메일로만 발송\n    const isDevelopment = process.env.NODE_ENV === 'development';\n    const testEmail = 'leejungchul@gmail.com'; // Resend에서 허용된 테스트 이메일\n    \n    const emailPayload = {\n      from: 'onboarding@resend.dev',\n      to: isDevelopment ? [testEmail] : [data.email],\n      subject: '📖 성경 타이핑 연습 - 이메일 인증을 완료해 주세요',\n      html: createEmailVerificationTemplate({\n        ...data,\n        email: isDevelopment ? testEmail : data.email // 템플릿에도 실제 수신자 표시\n      }),\n    };\n    \n    if (isDevelopment) {\n      console.log(`🔧 개발 환경: ${data.email} → ${testEmail}로 이메일 발송 리다이렉트`);\n    }\n    \n    console.log(`📧 발송 데이터:`, {\n      from: emailPayload.from,\n      to: emailPayload.to,\n      subject: emailPayload.subject,\n      htmlLength: emailPayload.html.length\n    });\n    \n    const result = await resend.emails.send(emailPayload);\n    \n    console.log(`📧 Resend API 응답:`, result);\n\n    if (result.error) {\n      console.error('❌ 이메일 발송 실패 (result.error):', result.error);\n      console.error('❌ 오류 상세:', JSON.stringify(result.error, null, 2));\n      return {\n        success: false,\n        error: 'SEND_FAILED',\n        errorMessage: `Failed to send email: ${result.error.message || 'Unknown error'}`,\n      };\n    }\n\n    console.log(`✅ 이메일 인증 메일 발송 성공: ${data.email} (ID: ${result.data?.id})`);\n    return {\n      success: true,\n      emailId: result.data?.id,\n    };\n  } catch (error) {\n    console.error('❌ 이메일 발송 중 예외 발생:', error);\n    console.error('❌ 예외 상세:', error instanceof Error ? {\n      name: error.name,\n      message: error.message,\n      stack: error.stack\n    } : error);\n    return {\n      success: false,\n      error: 'UNKNOWN_ERROR',\n      errorMessage: `Unexpected error during email sending: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    };\n  }\n}\n\n/**\n * 토큰 만료시간 계산 (24시간 후)\n */\nexport function getTokenExpirationTime(): Date {\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours() + 24);\n  return expiration;\n}\n\n/**\n * 토큰이 만료되었는지 확인\n */\nexport function isTokenExpired(expiresAt: Date): boolean {\n  return new Date() > expiresAt;\n}\n\n/**\n * 비밀번호 리셋 메일 발송\n */\nexport async function sendPasswordReset(data: PasswordResetData): Promise<EmailServiceResult> {\n  // STEP 1: API 키 검증\n  const apiKey = process.env.RESEND_API_KEY;\n  if (!apiKey) {\n    console.error('❌ RESEND_API_KEY environment variable is missing');\n    return {\n      success: false,\n      error: 'MISSING_API_KEY',\n      errorMessage: 'Email service is not configured. Please contact support.',\n    };\n  }\n\n  // STEP 2: Resend 클라이언트 초기화 (API 키가 있을 때만)\n  let resend: Resend;\n  try {\n    resend = new Resend(apiKey);\n  } catch (error) {\n    console.error('❌ Resend 클라이언트 초기화 실패:', error);\n    return {\n      success: false,\n      error: 'CONFIGURATION_ERROR',\n      errorMessage: 'Email service configuration error. Please contact support.',\n    };\n  }\n\n  // STEP 3: 이메일 발송 시도\n  try {\n    console.log(`🔄 비밀번호 리셋 이메일 발송 시도 중: ${data.email} → onboarding@resend.dev`);\n    console.log(`📧 API Key 존재 여부: ${apiKey ? '✅ 있음' : '❌ 없음'}`);\n    console.log(`📧 API Key 길이: ${apiKey ? apiKey.length : 0}자`);\n    \n    // 개발 환경에서는 Resend 테스트 제한으로 인해 허용된 이메일로만 발송\n    const isDevelopment = process.env.NODE_ENV === 'development';\n    const testEmail = 'leejungchul@gmail.com'; // Resend에서 허용된 테스트 이메일\n    \n    const emailPayload = {\n      from: 'onboarding@resend.dev',\n      to: isDevelopment ? [testEmail] : [data.email],\n      subject: '🔒 성경 타이핑 연습 - 비밀번호 재설정 요청',\n      html: createPasswordResetTemplate({\n        ...data,\n        email: isDevelopment ? testEmail : data.email // 템플릿에도 실제 수신자 표시\n      }),\n    };\n    \n    if (isDevelopment) {\n      console.log(`🔧 개발 환경: ${data.email} → ${testEmail}로 이메일 발송 리다이렉트`);\n    }\n    \n    console.log(`📧 발송 데이터:`, {\n      from: emailPayload.from,\n      to: emailPayload.to,\n      subject: emailPayload.subject,\n      htmlLength: emailPayload.html.length\n    });\n    \n    const result = await resend.emails.send(emailPayload);\n    \n    console.log(`📧 Resend API 응답:`, result);\n\n    if (result.error) {\n      console.error('❌ 비밀번호 리셋 이메일 발송 실패 (result.error):', result.error);\n      console.error('❌ 오류 상세:', JSON.stringify(result.error, null, 2));\n      return {\n        success: false,\n        error: 'SEND_FAILED',\n        errorMessage: `Failed to send password reset email: ${result.error.message || 'Unknown error'}`,\n      };\n    }\n\n    console.log(`✅ 비밀번호 리셋 메일 발송 성공: ${data.email} (ID: ${result.data?.id})`);\n    return {\n      success: true,\n      emailId: result.data?.id,\n    };\n  } catch (error) {\n    console.error('❌ 비밀번호 리셋 이메일 발송 중 예외 발생:', error);\n    console.error('❌ 예외 상세:', error instanceof Error ? {\n      name: error.name,\n      message: error.message,\n      stack: error.stack\n    } : error);\n    return {\n      success: false,\n      error: 'UNKNOWN_ERROR',\n      errorMessage: `Unexpected error during password reset email sending: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    };\n  }\n}\n\n/**\n * 비밀번호 리셋 토큰 만료시간 계산 (1시간 후)\n */\nexport function getPasswordResetTokenExpirationTime(): Date {\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours() + 1); // 1시간 후 만료 (보안상 짧게)\n  return expiration;\n}","size_bytes":18213},"server/rateLimiter.ts":{"content":"import { Request, Response, NextFunction } from 'express';\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n}\n\nclass MemoryRateLimiter {\n  private store: Map<string, RateLimitEntry> = new Map();\n  private readonly windowMs: number;\n  private readonly maxRequests: number;\n\n  constructor(windowMs: number = 15 * 60 * 1000, maxRequests: number = 5) {\n    this.windowMs = windowMs; // 기본 15분\n    this.maxRequests = maxRequests; // 기본 5회\n    \n    // 주기적으로 만료된 항목 정리 (5분마다)\n    setInterval(() => this.cleanup(), 5 * 60 * 1000);\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    for (const [key, entry] of Array.from(this.store.entries())) {\n      if (now > entry.resetTime) {\n        this.store.delete(key);\n      }\n    }\n  }\n\n  private getKey(req: Request): string {\n    // IP 주소와 User-Agent를 조합하여 키 생성\n    const ip = req.ip || req.connection.remoteAddress || 'unknown';\n    const userAgent = req.get('User-Agent') || 'unknown';\n    return `${ip}:${userAgent.substring(0, 50)}`;\n  }\n\n  public middleware() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const key = this.getKey(req);\n      const now = Date.now();\n      \n      let entry = this.store.get(key);\n      \n      if (!entry || now > entry.resetTime) {\n        // 새 윈도우 시작\n        entry = {\n          count: 1,\n          resetTime: now + this.windowMs\n        };\n        this.store.set(key, entry);\n        return next();\n      }\n      \n      if (entry.count >= this.maxRequests) {\n        // 요청 한도 초과\n        const retryAfter = Math.ceil((entry.resetTime - now) / 1000);\n        \n        res.set({\n          'X-RateLimit-Limit': this.maxRequests.toString(),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': entry.resetTime.toString(),\n          'Retry-After': retryAfter.toString()\n        });\n        \n        return res.status(429).json({\n          message: `요청이 너무 많습니다. ${Math.ceil(retryAfter / 60)}분 후에 다시 시도해주세요.`,\n          retryAfter: retryAfter\n        });\n      }\n      \n      // 요청 카운트 증가\n      entry.count++;\n      this.store.set(key, entry);\n      \n      // 헤더 설정\n      res.set({\n        'X-RateLimit-Limit': this.maxRequests.toString(),\n        'X-RateLimit-Remaining': (this.maxRequests - entry.count).toString(),\n        'X-RateLimit-Reset': entry.resetTime.toString()\n      });\n      \n      next();\n    };\n  }\n}\n\n// 각 엔드포인트별 제한 설정\nexport const authRateLimiter = new MemoryRateLimiter(\n  15 * 60 * 1000, // 15분\n  5 // 최대 5회 시도\n);\n\nexport const verifyRateLimiter = new MemoryRateLimiter(\n  10 * 60 * 1000, // 10분\n  3 // 최대 3회 시도 (이메일 인증은 더 엄격하게)\n);","size_bytes":2817},"client/src/pages/verify-email.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CheckCircle, XCircle, Loader2, Mail, ArrowLeft, RefreshCw } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\ntype VerificationState = 'pending' | 'verifying' | 'success' | 'error' | 'expired' | 'already-verified' | 'invalid-token';\n\ninterface VerificationResponse {\n  message: string;\n  email?: string;\n}\n\nexport default function VerifyEmail() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [verificationState, setVerificationState] = useState<VerificationState>('pending');\n  const [token, setToken] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  // Extract token from URL query parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const verificationToken = urlParams.get('token');\n    \n    if (!verificationToken) {\n      setVerificationState('invalid-token');\n      setErrorMessage('인증 토큰이 없습니다. 이메일에서 올바른 링크를 클릭해주세요.');\n      return;\n    }\n    \n    setToken(verificationToken);\n    // Auto-verify when component mounts\n    verifyEmailMutation.mutate({ token: verificationToken });\n  }, []);\n\n  // Email verification mutation\n  const verifyEmailMutation = useMutation({\n    mutationFn: async ({ token }: { token: string }) => {\n      setVerificationState('verifying');\n      const response = await apiRequest('POST', '/api/auth/email/verify', { token });\n      return response.json();\n    },\n    onSuccess: (data: VerificationResponse) => {\n      setVerificationState('success');\n      setEmail(data.email || '');\n      \n      toast({\n        title: \"이메일 인증 완료! ✅\",\n        description: \"계정이 성공적으로 활성화되었습니다.\",\n        duration: 5000,\n      });\n\n      // Redirect to login/dashboard after 3 seconds\n      setTimeout(() => {\n        navigate('/');\n      }, 3000);\n    },\n    onError: (error: Error) => {\n      console.error('Email verification error:', error);\n      \n      // Parse error message to determine specific error type\n      const errorMsg = error.message;\n      \n      if (errorMsg.includes('유효하지 않은 인증 토큰')) {\n        setVerificationState('invalid-token');\n        setErrorMessage('유효하지 않은 인증 토큰입니다.');\n      } else if (errorMsg.includes('이미 사용된 인증 토큰') || errorMsg.includes('이미 인증된 이메일')) {\n        setVerificationState('already-verified');\n        setErrorMessage('이미 인증된 계정입니다.');\n      } else if (errorMsg.includes('만료된') || errorMsg.includes('만료되었습니다')) {\n        setVerificationState('expired');\n        setErrorMessage('인증 토큰이 만료되었습니다.');\n      } else {\n        setVerificationState('error');\n        setErrorMessage('인증 처리 중 오류가 발생했습니다.');\n      }\n    },\n  });\n\n  // Resend verification email mutation\n  const resendEmailMutation = useMutation({\n    mutationFn: async () => {\n      if (!email) {\n        throw new Error('이메일 주소가 필요합니다.');\n      }\n      const response = await apiRequest('POST', '/api/auth/email/resend', { email });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"인증 이메일 재발송 완료\",\n        description: \"새로운 인증 링크가 이메일로 발송되었습니다.\",\n        duration: 5000,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"재발송 실패\",\n        description: error.message || \"이메일 재발송 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const renderVerificationContent = () => {\n    switch (verificationState) {\n      case 'pending':\n        return (\n          <div className=\"text-center space-y-4\">\n            <Loader2 className=\"h-8 w-8 animate-spin mx-auto text-primary\" />\n            <p className=\"text-muted-foreground\">인증 토큰을 확인하는 중...</p>\n          </div>\n        );\n\n      case 'verifying':\n        return (\n          <div className=\"text-center space-y-4\">\n            <Loader2 className=\"h-12 w-12 animate-spin mx-auto text-primary\" />\n            <div className=\"space-y-2\">\n              <h3 className=\"text-lg font-semibold\">이메일 인증 중입니다</h3>\n              <p className=\"text-muted-foreground\">잠시만 기다려주세요...</p>\n            </div>\n          </div>\n        );\n\n      case 'success':\n        return (\n          <div className=\"text-center space-y-4\">\n            <CheckCircle className=\"h-16 w-16 mx-auto text-green-500\" />\n            <div className=\"space-y-2\">\n              <h3 className=\"text-2xl font-bold text-green-600\">인증 완료!</h3>\n              <p className=\"text-muted-foreground\">\n                {email && `${email} 계정이 성공적으로 활성화되었습니다.`}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                3초 후 메인 페이지로 이동합니다...\n              </p>\n            </div>\n            <Button \n              onClick={() => navigate('/')}\n              data-testid=\"button-go-home\"\n              className=\"mt-4\"\n            >\n              지금 시작하기\n            </Button>\n          </div>\n        );\n\n      case 'already-verified':\n        return (\n          <div className=\"text-center space-y-4\">\n            <CheckCircle className=\"h-12 w-12 mx-auto text-blue-500\" />\n            <div className=\"space-y-2\">\n              <h3 className=\"text-xl font-semibold text-blue-600\">이미 인증된 계정</h3>\n              <p className=\"text-muted-foreground\">\n                해당 계정은 이미 인증이 완료되었습니다.\n              </p>\n            </div>\n            <Button \n              onClick={() => navigate('/')}\n              data-testid=\"button-go-login\"\n              className=\"mt-4\"\n            >\n              로그인하기\n            </Button>\n          </div>\n        );\n\n      case 'expired':\n        return (\n          <div className=\"text-center space-y-4\">\n            <XCircle className=\"h-12 w-12 mx-auto text-amber-500\" />\n            <div className=\"space-y-2\">\n              <h3 className=\"text-xl font-semibold text-amber-600\">인증 링크 만료</h3>\n              <p className=\"text-muted-foreground\">\n                인증 링크가 만료되었습니다. 새로운 인증 이메일을 요청해주세요.\n              </p>\n            </div>\n            <Alert className=\"text-left\">\n              <Mail className=\"h-4 w-4\" />\n              <AlertDescription>\n                이메일 주소를 입력하고 재발송 버튼을 클릭하세요.\n              </AlertDescription>\n            </Alert>\n            <div className=\"space-y-2\">\n              <input\n                type=\"email\"\n                placeholder=\"이메일 주소를 입력하세요\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                data-testid=\"input-email-resend\"\n                className=\"w-full px-3 py-2 border border-input rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              />\n              <Button \n                onClick={() => resendEmailMutation.mutate()}\n                disabled={!email || resendEmailMutation.isPending}\n                data-testid=\"button-resend-email\"\n                className=\"w-full\"\n              >\n                {resendEmailMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    재발송 중...\n                  </>\n                ) : (\n                  <>\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\n                    인증 이메일 재발송\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        );\n\n      case 'invalid-token':\n        return (\n          <div className=\"text-center space-y-4\">\n            <XCircle className=\"h-12 w-12 mx-auto text-red-500\" />\n            <div className=\"space-y-2\">\n              <h3 className=\"text-xl font-semibold text-red-600\">유효하지 않은 링크</h3>\n              <p className=\"text-muted-foreground\">\n                {errorMessage || '인증 링크가 올바르지 않습니다.'}\n              </p>\n            </div>\n            <Button \n              onClick={() => navigate('/')}\n              data-testid=\"button-back-home\"\n              variant=\"outline\"\n              className=\"mt-4\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              메인으로 돌아가기\n            </Button>\n          </div>\n        );\n\n      case 'error':\n      default:\n        return (\n          <div className=\"text-center space-y-4\">\n            <XCircle className=\"h-12 w-12 mx-auto text-red-500\" />\n            <div className=\"space-y-2\">\n              <h3 className=\"text-xl font-semibold text-red-600\">인증 실패</h3>\n              <p className=\"text-muted-foreground\">\n                {errorMessage || '인증 처리 중 오류가 발생했습니다.'}\n              </p>\n            </div>\n            <div className=\"space-x-2\">\n              <Button \n                onClick={() => verifyEmailMutation.mutate({ token })}\n                disabled={verifyEmailMutation.isPending}\n                data-testid=\"button-retry-verification\"\n                variant=\"outline\"\n              >\n                {verifyEmailMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    재시도 중...\n                  </>\n                ) : (\n                  <>\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\n                    다시 시도\n                  </>\n                )}\n              </Button>\n              <Button \n                onClick={() => navigate('/')}\n                data-testid=\"button-back-main\"\n                variant=\"outline\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                메인으로\n              </Button>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center pb-4\">\n          <div className=\"flex justify-center mb-4\">\n            <Mail className=\"h-12 w-12 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\" data-testid=\"text-page-title\">\n            이메일 인증\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {renderVerificationContent()}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11316},"client/src/components/SignupModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { SiKakaotalk, SiGoogle, SiReplit } from \"react-icons/si\";\nimport { Mail, Lock, User, Eye, EyeOff, ArrowLeft, Check } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SignupModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSwitchToLogin?: () => void;\n}\n\n// 간소화된 회원가입 폼 스키마 - 필수 정보만\nconst signupSchema = z.object({\n  email: z.string().email(\"올바른 이메일 주소를 입력해주세요\"),\n  password: z.string().min(8, \"비밀번호는 최소 8자리 이상이어야 합니다\"),\n  confirmPassword: z.string(),\n  firstName: z.string().min(1, \"이름을 입력해주세요\").max(50, \"이름은 50자를 초과할 수 없습니다\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"비밀번호가 일치하지 않습니다\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupFormData = z.infer<typeof signupSchema>;\n\nexport default function SignupModal({ open, onOpenChange, onSwitchToLogin }: SignupModalProps) {\n  const [currentStep, setCurrentStep] = useState<1 | 2>(1);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [signupSuccessEmail, setSignupSuccessEmail] = useState<string | null>(null);\n  const [resendCooldown, setResendCooldown] = useState(0);\n  \n  const { toast } = useToast();\n\n  // 회원가입 폼\n  const signupForm = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n    },\n  });\n\n  // 회원가입 mutation\n  const signupMutation = useMutation({\n    mutationFn: async (data: SignupFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/email/signup\", {\n        email: data.email,\n        password: data.password,\n        firstName: data.firstName,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"회원가입 성공!\",\n        description: \"이메일을 확인하여 계정을 활성화해주세요.\",\n      });\n      \n      setSignupSuccessEmail(data.email || signupForm.getValues('email'));\n      signupForm.reset();\n      setCurrentStep(1);\n    },\n    onError: (error: Error) => {\n      console.error(\"회원가입 오류:\", error);\n      let errorMessage = \"회원가입 중 오류가 발생했습니다. 다시 시도해주세요.\";\n      \n      // 서버에서 보낸 실제 에러 메시지 파싱\n      try {\n        // error.message는 \"500: {json response}\" 형태\n        const colonIndex = error.message.indexOf(': ');\n        if (colonIndex !== -1) {\n          const responseText = error.message.substring(colonIndex + 2);\n          const serverResponse = JSON.parse(responseText);\n          \n          if (serverResponse.message) {\n            errorMessage = serverResponse.message;\n          }\n        }\n      } catch (parseError) {\n        // JSON 파싱 실패 시 기존 로직 사용\n        if (error.message.includes(\"409\") || error.message.includes(\"이미 등록된 이메일\")) {\n          errorMessage = \"이미 등록된 이메일 주소입니다. 다른 이메일을 사용해주세요.\";\n        } else if (error.message.includes(\"400\")) {\n          errorMessage = \"입력 데이터가 올바르지 않습니다. 다시 확인해주세요.\";\n        }\n      }\n      \n      toast({\n        variant: \"destructive\",\n        title: \"회원가입 실패\",\n        description: errorMessage,\n      });\n    },\n  });\n\n  // 이메일 재발송 mutation\n  const emailResendMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/email/resend\", { email });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"이메일 재발송 완료\",\n        description: \"인증 이메일이 재발송되었습니다. 이메일을 확인해주세요.\",\n      });\n      setResendCooldown(180);\n      setSignupSuccessEmail(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"이메일 재발송 실패\",\n        description: \"이메일 재발송 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      });\n    },\n  });\n\n  // 쿨다운 타이머 관리\n  useEffect(() => {\n    if (resendCooldown > 0) {\n      const timer = setTimeout(() => setResendCooldown(resendCooldown - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [resendCooldown]);\n\n  const handleSocialSignup = (provider: string) => {\n    if (provider === '카카오') {\n      window.location.href = '/auth/kakao';\n    } else if (provider === 'Replit') {\n      window.location.href = '/auth/replit';\n    } else {\n      toast({\n        title: \"준비 중\",\n        description: `${provider} 회원가입은 곧 지원될 예정입니다.`,\n      });\n    }\n  };\n\n  const handleEmailSignup = (data: SignupFormData) => {\n    signupMutation.mutate(data);\n  };\n\n  const handleEmailResend = (email: string) => {\n    emailResendMutation.mutate(email);\n  };\n\n  const resetModal = () => {\n    setCurrentStep(1);\n    setSignupSuccessEmail(null);\n    signupForm.reset();\n  };\n\n  // 모달이 닫힐 때 상태 초기화\n  useEffect(() => {\n    if (!open) {\n      resetModal();\n    }\n  }, [open]);\n\n  // 회원가입 성공 화면\n  if (signupSuccessEmail) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"sm:max-w-md w-[95%]\" data-testid=\"dialog-signup-success\">\n          <DialogHeader>\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                <Check className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n            </div>\n            <DialogTitle className=\"text-center text-xl font-semibold\" data-testid=\"text-success-title\">\n              회원가입 완료!\n            </DialogTitle>\n            <DialogDescription className=\"text-center text-sm text-muted-foreground\" data-testid=\"text-success-description\">\n              {signupSuccessEmail}로 인증 이메일을 발송했습니다.<br />\n              이메일을 확인하여 계정을 활성화해주세요.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"bg-amber-50 dark:bg-amber-950 border border-amber-200 dark:border-amber-800 rounded-lg p-4\">\n              <p className=\"text-sm text-amber-800 dark:text-amber-200 text-center\">\n                인증 이메일이 스팸함으로 분류될 수 있으니 스팸함도 확인해주세요.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col space-y-2\">\n              <Button\n                onClick={() => handleEmailResend(signupSuccessEmail)}\n                disabled={emailResendMutation.isPending || resendCooldown > 0}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-resend-success-email\"\n              >\n                {emailResendMutation.isPending \n                  ? \"재발송 중...\" \n                  : resendCooldown > 0 \n                    ? `이메일 재발송 (${Math.floor(resendCooldown / 60)}:${(resendCooldown % 60).toString().padStart(2, '0')})`\n                    : \"이메일 재발송\"\n                }\n              </Button>\n              \n              <Button \n                onClick={() => onOpenChange(false)} \n                className=\"w-full\"\n                data-testid=\"button-close-success\"\n              >\n                확인\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md w-[95%] max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-signup-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-xl font-semibold\" data-testid=\"text-signup-modal-title\">\n            홀리넷에 가입하기\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-sm text-muted-foreground\" data-testid=\"text-signup-modal-description\">\n            성경 필사와 함께하는 믿음의 여정을 시작해보세요\n          </DialogDescription>\n          \n          {/* 진행률 표시 */}\n          <div className=\"flex items-center space-x-2 pt-4\">\n            <Progress value={currentStep === 1 ? 50 : 100} className=\"flex-1\" data-testid=\"progress-signup\" />\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-progress\">{currentStep}/2</span>\n          </div>\n        </DialogHeader>\n\n        {/* 1단계: 가입 방법 선택 */}\n        {currentStep === 1 && (\n          <div className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <h3 className=\"text-sm font-medium text-center text-muted-foreground mb-4\" data-testid=\"text-step1-title\">\n                가입 방법을 선택해주세요\n              </h3>\n              \n              {/* 소셜 로그인 버튼들 - 크고 눈에 띄게 */}\n              <div className=\"space-y-3\">\n                <Button\n                  onClick={() => handleSocialSignup('카카오')}\n                  className=\"w-full h-12 bg-[#FEE500] hover:bg-[#FEE500]/90 text-black font-medium flex items-center justify-center space-x-3\"\n                  data-testid=\"button-kakao-signup\"\n                >\n                  <SiKakaotalk className=\"w-5 h-5\" />\n                  <span>카카오로 3초 만에 가입</span>\n                </Button>\n\n                <Button\n                  onClick={() => handleSocialSignup('Replit')}\n                  className=\"w-full h-12 bg-[#F26207] hover:bg-[#F26207]/90 text-white font-medium flex items-center justify-center space-x-3\"\n                  data-testid=\"button-replit-signup\"\n                >\n                  <SiReplit className=\"w-5 h-5\" />\n                  <span>Replit으로 가입</span>\n                </Button>\n\n                <Button\n                  onClick={() => handleSocialSignup('Google')}\n                  variant=\"outline\"\n                  className=\"w-full h-12 border-2 hover:bg-gray-50 dark:hover:bg-gray-800 font-medium flex items-center justify-center space-x-3\"\n                  data-testid=\"button-google-signup\"\n                >\n                  <SiGoogle className=\"w-5 h-5 text-[#4285f4]\" />\n                  <span>Google로 가입</span>\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-background px-2 text-muted-foreground\">또는</span>\n              </div>\n            </div>\n\n            {/* 이메일 가입 - 작게 배치 */}\n            <Button\n              onClick={() => setCurrentStep(2)}\n              variant=\"ghost\"\n              className=\"w-full text-sm text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-email-signup-option\"\n            >\n              <Mail className=\"w-4 h-4 mr-2\" />\n              이메일로 가입하기\n            </Button>\n          </div>\n        )}\n\n        {/* 2단계: 이메일 가입 폼 */}\n        {currentStep === 2 && (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <Button\n                onClick={() => setCurrentStep(1)}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"p-0 h-auto\"\n                data-testid=\"button-back-to-step1\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <h3 className=\"text-sm font-medium text-muted-foreground\" data-testid=\"text-step2-title\">\n                기본 정보를 입력해주세요\n              </h3>\n            </div>\n\n            <Form {...signupForm}>\n              <form onSubmit={signupForm.handleSubmit(handleEmailSignup)} className=\"space-y-4\">\n                <FormField\n                  control={signupForm.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel data-testid=\"label-signup-firstname\">이름 *</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <User className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                          <Input\n                            placeholder=\"이름을 입력하세요\"\n                            className=\"pl-10\"\n                            data-testid=\"input-signup-firstname\"\n                            {...field}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage data-testid=\"error-signup-firstname\" />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={signupForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel data-testid=\"label-signup-email\">이메일 *</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                          <Input\n                            type=\"email\"\n                            placeholder=\"이메일을 입력하세요\"\n                            className=\"pl-10\"\n                            data-testid=\"input-signup-email\"\n                            {...field}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage data-testid=\"error-signup-email\" />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={signupForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel data-testid=\"label-signup-password\">비밀번호 *</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                          <Input\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"8자리 이상 입력하세요\"\n                            className=\"pl-10 pr-10\"\n                            data-testid=\"input-signup-password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-signup-password\"\n                          >\n                            {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage data-testid=\"error-signup-password\" />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={signupForm.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel data-testid=\"label-signup-confirm-password\">비밀번호 확인 *</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                          <Input\n                            type={showConfirmPassword ? \"text\" : \"password\"}\n                            placeholder=\"비밀번호를 다시 입력하세요\"\n                            className=\"pl-10 pr-10\"\n                            data-testid=\"input-signup-confirm-password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            data-testid=\"button-toggle-signup-confirm-password\"\n                          >\n                            {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage data-testid=\"error-signup-confirm-password\" />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  data-testid=\"button-signup-submit\"\n                  disabled={signupMutation.isPending}\n                >\n                  {signupMutation.isPending ? \"가입 중...\" : \"회원가입 완료\"}\n                </Button>\n              </form>\n            </Form>\n\n            <p className=\"text-xs text-center text-muted-foreground\">\n              가입을 진행하면 <span className=\"underline\">개인정보처리방침</span>과{\" \"}\n              <span className=\"underline\">이용약관</span>에 동의하는 것으로 간주됩니다.\n            </p>\n          </div>\n        )}\n\n        {/* 로그인 링크 - 모든 단계에서 표시 */}\n        <div className=\"text-center pt-4 border-t\">\n          <p className=\"text-sm text-muted-foreground\">\n            이미 계정이 있으신가요?{\" \"}\n            <Button \n              variant=\"link\" \n              className=\"p-0 h-auto text-sm font-medium underline\"\n              onClick={() => {\n                onOpenChange(false);\n                onSwitchToLogin?.();\n              }}\n              data-testid=\"link-switch-to-login\"\n            >\n              로그인하기\n            </Button>\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":19823},"client/src/pages/forgot-password.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Mail, ArrowLeft, Loader2, CheckCircle } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\ntype RequestState = 'idle' | 'pending' | 'success' | 'error';\n\ninterface ForgotPasswordResponse {\n  message: string;\n  email?: string;\n}\n\n// 비밀번호 리셋 요청 폼 스키마\nconst forgotPasswordSchema = z.object({\n  email: z.string().email(\"올바른 이메일 주소를 입력해주세요\"),\n});\n\ntype ForgotPasswordFormData = z.infer<typeof forgotPasswordSchema>;\n\nexport default function ForgotPassword() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [requestState, setRequestState] = useState<RequestState>('idle');\n  const [submittedEmail, setSubmittedEmail] = useState<string>('');\n\n  // 비밀번호 리셋 요청 폼\n  const form = useForm<ForgotPasswordFormData>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  // 비밀번호 리셋 요청 mutation\n  const forgotPasswordMutation = useMutation({\n    mutationFn: async (data: ForgotPasswordFormData) => {\n      setRequestState('pending');\n      const response = await apiRequest('POST', '/api/auth/forgot-password', data);\n      return response.json();\n    },\n    onSuccess: (data: ForgotPasswordResponse) => {\n      setRequestState('success');\n      setSubmittedEmail(data.email || form.getValues('email'));\n      \n      toast({\n        title: \"이메일 발송 완료! ✉️\",\n        description: \"비밀번호 재설정 링크가 이메일로 발송되었습니다.\",\n        duration: 5000,\n      });\n    },\n    onError: (error: Error) => {\n      console.error('Forgot password error:', error);\n      setRequestState('error');\n      \n      // Parse error message for user-friendly display\n      let errorMessage = \"비밀번호 재설정 요청 중 오류가 발생했습니다. 다시 시도해주세요.\";\n      \n      const errorMsg = error.message;\n      if (errorMsg.includes(\"이메일 서비스가 일시적으로 사용할 수 없습니다\")) {\n        errorMessage = \"이메일 서비스가 일시적으로 사용할 수 없습니다. 관리자에게 문의해주세요.\";\n      } else if (errorMsg.includes(\"입력 데이터가 올바르지 않습니다\")) {\n        errorMessage = \"입력 데이터가 올바르지 않습니다. 이메일 주소를 확인해주세요.\";\n      }\n      \n      toast({\n        variant: \"destructive\",\n        title: \"요청 실패\",\n        description: errorMessage,\n      });\n    },\n  });\n\n  const handleSubmit = (data: ForgotPasswordFormData) => {\n    forgotPasswordMutation.mutate(data);\n  };\n\n  const handleBackToLogin = () => {\n    navigate('/');\n  };\n\n  const handleTryAgain = () => {\n    setRequestState('idle');\n    form.reset();\n  };\n\n  // 성공 상태 UI\n  if (requestState === 'success') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"title-success\">\n              이메일 발송 완료\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <Alert>\n              <Mail className=\"h-4 w-4\" />\n              <AlertDescription data-testid=\"text-success-message\">\n                <span className=\"font-medium\">{submittedEmail}</span>로 비밀번호 재설정 링크를 발송했습니다.\n                <br />\n                <br />\n                이메일을 확인하고 링크를 클릭하여 비밀번호를 재설정해주세요.\n                <br />\n                <br />\n                <span className=\"text-sm text-muted-foreground\">\n                  * 이메일이 오지 않았다면 스팸함을 확인해주세요.\n                  <br />\n                  * 링크는 1시간 후 만료됩니다.\n                </span>\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"space-y-3\">\n              <Button\n                onClick={handleTryAgain}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-try-again\"\n              >\n                다른 이메일로 다시 시도\n              </Button>\n              \n              <Button\n                onClick={handleBackToLogin}\n                variant=\"ghost\"\n                className=\"w-full\"\n                data-testid=\"button-back-to-login\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                로그인 페이지로 돌아가기\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // 메인 폼 UI\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n            <Mail className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\" data-testid=\"title-forgot-password\">\n            비밀번호 재설정\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-description\">\n            가입 시 사용한 이메일 주소를 입력하시면,\n            <br />\n            비밀번호 재설정 링크를 보내드립니다.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"label-email\">이메일 주소</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Mail className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                        <Input\n                          type=\"email\"\n                          placeholder=\"example@email.com\"\n                          className=\"pl-10\"\n                          data-testid=\"input-email\"\n                          disabled={requestState === 'pending'}\n                          {...field}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage data-testid=\"error-email\" />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                data-testid=\"button-submit\"\n                disabled={requestState === 'pending'}\n              >\n                {requestState === 'pending' ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    발송 중...\n                  </>\n                ) : (\n                  <>\n                    <Mail className=\"w-4 h-4 mr-2\" />\n                    재설정 링크 발송\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"text-center\">\n            <Button\n              onClick={handleBackToLogin}\n              variant=\"ghost\"\n              className=\"text-sm\"\n              data-testid=\"button-back-to-login-bottom\"\n              disabled={requestState === 'pending'}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              로그인 페이지로 돌아가기\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8928},"client/src/pages/reset-password.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLocation } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Lock, ArrowLeft, Loader2, CheckCircle, XCircle, Eye, EyeOff } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\ntype ResetState = 'idle' | 'pending' | 'success' | 'error' | 'invalid-token';\n\ninterface ResetPasswordResponse {\n  message: string;\n  email?: string;\n}\n\n// 비밀번호 재설정 폼 스키마\nconst resetPasswordSchema = z.object({\n  password: z.string().min(8, \"비밀번호는 최소 8자리 이상이어야 합니다\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"비밀번호가 일치하지 않습니다\",\n  path: [\"confirmPassword\"],\n});\n\ntype ResetPasswordFormData = z.infer<typeof resetPasswordSchema>;\n\nexport default function ResetPassword() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [resetState, setResetState] = useState<ResetState>('idle');\n  const [token, setToken] = useState<string>('');\n  const [userEmail, setUserEmail] = useState<string>('');\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  // 비밀번호 재설정 폼\n  const form = useForm<ResetPasswordFormData>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Extract token from URL query parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const resetToken = urlParams.get('token');\n    \n    if (!resetToken) {\n      setResetState('invalid-token');\n      setErrorMessage('비밀번호 재설정 토큰이 없습니다. 이메일에서 올바른 링크를 클릭해주세요.');\n      return;\n    }\n    \n    setToken(resetToken);\n  }, []);\n\n  // 비밀번호 재설정 mutation\n  const resetPasswordMutation = useMutation({\n    mutationFn: async (data: ResetPasswordFormData) => {\n      setResetState('pending');\n      const response = await apiRequest('POST', '/api/auth/reset-password', {\n        token,\n        password: data.password,\n      });\n      return response.json();\n    },\n    onSuccess: (data: ResetPasswordResponse) => {\n      setResetState('success');\n      setUserEmail(data.email || '');\n      \n      toast({\n        title: \"비밀번호 재설정 완료! ✅\",\n        description: \"새로운 비밀번호로 로그인해주세요.\",\n        duration: 5000,\n      });\n\n      // Redirect to login page after 3 seconds\n      setTimeout(() => {\n        navigate('/');\n      }, 3000);\n    },\n    onError: (error: Error) => {\n      console.error('Reset password error:', error);\n      setResetState('error');\n      \n      // Parse error message for user-friendly display\n      const errorMsg = error.message;\n      \n      if (errorMsg.includes('재설정 토큰이 유효하지 않거나 만료되었습니다')) {\n        setErrorMessage('재설정 토큰이 유효하지 않거나 만료되었습니다. 새로운 비밀번호 재설정을 요청해주세요.');\n      } else if (errorMsg.includes('이미 사용된 재설정 토큰입니다')) {\n        setErrorMessage('이미 사용된 재설정 토큰입니다. 새로운 비밀번호 재설정을 요청해주세요.');\n      } else if (errorMsg.includes('입력 데이터가 올바르지 않습니다')) {\n        setErrorMessage('입력 데이터가 올바르지 않습니다. 비밀번호를 확인해주세요.');\n      } else {\n        setErrorMessage('비밀번호 재설정 중 오류가 발생했습니다. 다시 시도해주세요.');\n      }\n      \n      toast({\n        variant: \"destructive\",\n        title: \"재설정 실패\",\n        description: errorMessage,\n      });\n    },\n  });\n\n  const handleSubmit = (data: ResetPasswordFormData) => {\n    resetPasswordMutation.mutate(data);\n  };\n\n  const handleBackToLogin = () => {\n    navigate('/');\n  };\n\n  const handleRequestNewReset = () => {\n    navigate('/forgot-password');\n  };\n\n  // 토큰이 없는 경우\n  if (resetState === 'invalid-token') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center\">\n              <XCircle className=\"w-8 h-8 text-red-600 dark:text-red-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-red-600 dark:text-red-400\" data-testid=\"title-invalid-token\">\n              토큰이 유효하지 않습니다\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <Alert>\n              <XCircle className=\"h-4 w-4\" />\n              <AlertDescription data-testid=\"text-invalid-token-message\">\n                {errorMessage}\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"space-y-3\">\n              <Button\n                onClick={handleRequestNewReset}\n                className=\"w-full\"\n                data-testid=\"button-request-new-reset\"\n              >\n                새로운 비밀번호 재설정 요청\n              </Button>\n              \n              <Button\n                onClick={handleBackToLogin}\n                variant=\"ghost\"\n                className=\"w-full\"\n                data-testid=\"button-back-to-login\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                로그인 페이지로 돌아가기\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // 성공 상태\n  if (resetState === 'success') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"title-success\">\n              비밀번호 재설정 완료\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <Alert>\n              <CheckCircle className=\"h-4 w-4\" />\n              <AlertDescription data-testid=\"text-success-message\">\n                비밀번호가 성공적으로 재설정되었습니다.\n                <br />\n                <br />\n                {userEmail && (\n                  <>\n                    <span className=\"font-medium\">{userEmail}</span> 계정에 대한 새로운 비밀번호로 로그인해주세요.\n                    <br />\n                    <br />\n                  </>\n                )}\n                <span className=\"text-sm text-muted-foreground\">\n                  * 잠시 후 로그인 페이지로 자동 이동됩니다.\n                </span>\n              </AlertDescription>\n            </Alert>\n\n            <Button\n              onClick={handleBackToLogin}\n              className=\"w-full\"\n              data-testid=\"button-login-now\"\n            >\n              지금 로그인하기\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // 오류 상태\n  if (resetState === 'error') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center\">\n              <XCircle className=\"w-8 h-8 text-red-600 dark:text-red-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-red-600 dark:text-red-400\" data-testid=\"title-error\">\n              재설정 실패\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <Alert>\n              <XCircle className=\"h-4 w-4\" />\n              <AlertDescription data-testid=\"text-error-message\">\n                {errorMessage}\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"space-y-3\">\n              <Button\n                onClick={handleRequestNewReset}\n                className=\"w-full\"\n                data-testid=\"button-request-new-reset-error\"\n              >\n                새로운 비밀번호 재설정 요청\n              </Button>\n              \n              <Button\n                onClick={handleBackToLogin}\n                variant=\"ghost\"\n                className=\"w-full\"\n                data-testid=\"button-back-to-login-error\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                로그인 페이지로 돌아가기\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // 메인 폼 UI\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n            <Lock className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\" data-testid=\"title-reset-password\">\n            새 비밀번호 설정\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-description\">\n            계정에 사용할 새로운 비밀번호를 입력해주세요.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"label-password\">새 비밀번호</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                        <Input\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"8자리 이상 입력하세요\"\n                          className=\"pl-10 pr-10\"\n                          data-testid=\"input-password\"\n                          disabled={resetState === 'pending'}\n                          {...field}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage data-testid=\"error-password\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"label-confirm-password\">비밀번호 확인</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                        <Input\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"비밀번호를 다시 입력하세요\"\n                          className=\"pl-10 pr-10\"\n                          data-testid=\"input-confirm-password\"\n                          disabled={resetState === 'pending'}\n                          {...field}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          data-testid=\"button-toggle-confirm-password\"\n                        >\n                          {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage data-testid=\"error-confirm-password\" />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                data-testid=\"button-submit\"\n                disabled={resetState === 'pending'}\n              >\n                {resetState === 'pending' ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    재설정 중...\n                  </>\n                ) : (\n                  <>\n                    <Lock className=\"w-4 h-4 mr-2\" />\n                    비밀번호 재설정\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"text-center\">\n            <Button\n              onClick={handleBackToLogin}\n              variant=\"ghost\"\n              className=\"text-sm\"\n              data-testid=\"button-back-to-login-bottom\"\n              disabled={resetState === 'pending'}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              로그인 페이지로 돌아가기\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15435}},"version":1}